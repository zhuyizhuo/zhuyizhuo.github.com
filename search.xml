<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI驱动开发：软件开发的智能革命</title>
    <url>/2023/03/18/ai/2023-ai-in-software-development/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="AI驱动开发：软件开发的智能革命-🤖💻"><a href="#AI驱动开发：软件开发的智能革命-🤖💻" class="headerlink" title="AI驱动开发：软件开发的智能革命 🤖💻"></a>AI驱动开发：软件开发的智能革命 🤖💻</h1><p>大家好！👋 随着人工智能技术的飞速发展，它正在深刻改变着我们生活和工作的方方面面，软件开发领域也不例外。从代码补全到自动化测试，从文档生成到Bug检测，AI正在为软件开发带来前所未有的变革。今天，我们就来一起探索AI如何驱动软件开发的智能革命！🚀</p>
<h2 id="AI编程助手：开发者的智能搭档-🧑💻🤝🤖"><a href="#AI编程助手：开发者的智能搭档-🧑💻🤝🤖" class="headerlink" title="AI编程助手：开发者的智能搭档 🧑💻🤝🤖"></a>AI编程助手：开发者的智能搭档 🧑💻🤝🤖</h2><p>AI编程助手是当前AI在软件开发中最直接、最广泛的应用。这些工具通过理解代码上下文，提供智能的代码建议、自动补全和错误检测。</p>
<h3 id="主流AI编程助手一览-🌟"><a href="#主流AI编程助手一览-🌟" class="headerlink" title="主流AI编程助手一览 🌟"></a>主流AI编程助手一览 🌟</h3><ol>
<li><strong>GitHub Copilot</strong>：由OpenAI和GitHub合作开发，基于GPT模型，可以根据注释和上下文生成完整的代码片段</li>
<li><strong>TabNine</strong>：基于深度学习的代码补全工具，支持多种编程语言和IDE</li>
<li><strong>CodeWhisperer</strong>：Amazon推出的AI编程助手，特别擅长云服务相关代码生成</li>
<li><strong>ChatGPT/GPT-4</strong>：虽然不是专门的编程工具，但强大的自然语言理解能力使其成为优秀的编程助手</li>
</ol>
<h3 id="AI编程助手的工作原理-🧠"><a href="#AI编程助手的工作原理-🧠" class="headerlink" title="AI编程助手的工作原理 🧠"></a>AI编程助手的工作原理 🧠</h3><p>AI编程助手通常基于大型语言模型（LLM），通过海量代码库的训练，学习编程语言的语法、模式和最佳实践。它们能够理解代码的上下文，并生成符合项目风格和要求的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：使用AI编程助手生成数据可视化代码</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成样本数据</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;b-&#x27;</span>, label=<span class="string">&#x27;Sin(x)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Sine Wave&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X-axis&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y-axis&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="AI在软件开发全流程中的应用-🔄"><a href="#AI在软件开发全流程中的应用-🔄" class="headerlink" title="AI在软件开发全流程中的应用 🔄"></a>AI在软件开发全流程中的应用 🔄</h2><p>AI的应用远不止于代码生成，它正在渗透到软件开发的各个环节。</p>
<h3 id="1-需求分析与设计阶段-📝"><a href="#1-需求分析与设计阶段-📝" class="headerlink" title="1. 需求分析与设计阶段 📝"></a>1. 需求分析与设计阶段 📝</h3><p>AI可以帮助分析用户需求，提取关键信息，并生成初步的系统设计和架构建议。一些工具甚至可以根据自然语言描述自动生成用户故事和验收标准。</p>
<h3 id="2-编码阶段-💻"><a href="#2-编码阶段-💻" class="headerlink" title="2. 编码阶段 💻"></a>2. 编码阶段 💻</h3><p>除了代码补全和生成外，AI还可以提供代码重构建议、性能优化提示，以及检测潜在的安全漏洞。</p>
<h3 id="3-测试阶段-🧪"><a href="#3-测试阶段-🧪" class="headerlink" title="3. 测试阶段 🧪"></a>3. 测试阶段 🧪</h3><p>AI在测试领域的应用包括：</p>
<ul>
<li>自动生成测试用例和测试数据</li>
<li>智能测试执行和结果分析</li>
<li>自动化回归测试</li>
<li>异常检测和根因分析</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：AI生成的单元测试代码</span></span><br><span class="line">describe(<span class="string">&#x27;Calculator&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> calculator;</span><br><span class="line">  </span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it(<span class="string">&#x27;should add two numbers correctly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(calculator.add(<span class="number">2</span>, <span class="number">3</span>)).toBe(<span class="number">5</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it(<span class="string">&#x27;should subtract two numbers correctly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(calculator.subtract(<span class="number">5</span>, <span class="number">3</span>)).toBe(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-部署与运维阶段-🚀"><a href="#4-部署与运维阶段-🚀" class="headerlink" title="4. 部署与运维阶段 🚀"></a>4. 部署与运维阶段 🚀</h3><p>AI在DevOps领域的应用也日益广泛：</p>
<ul>
<li>智能监控和异常检测</li>
<li>自动伸缩和资源优化</li>
<li>故障预测和预防</li>
<li>日志分析和问题诊断</li>
</ul>
<h2 id="AI驱动开发的优势与挑战-⚖️"><a href="#AI驱动开发的优势与挑战-⚖️" class="headerlink" title="AI驱动开发的优势与挑战 ⚖️"></a>AI驱动开发的优势与挑战 ⚖️</h2><h3 id="主要优势-👍"><a href="#主要优势-👍" class="headerlink" title="主要优势 👍"></a>主要优势 👍</h3><ol>
<li><strong>开发效率提升</strong>：减少重复编码工作，加速开发流程</li>
<li><strong>代码质量改善</strong>：遵循最佳实践，减少常见错误</li>
<li><strong>学习曲线变缓</strong>：帮助初级开发者快速上手新技术</li>
<li><strong>创新能力增强</strong>：让开发者专注于更具创造性的工作</li>
</ol>
<h3 id="潜在挑战-👎"><a href="#潜在挑战-👎" class="headerlink" title="潜在挑战 👎"></a>潜在挑战 👎</h3><ol>
<li><strong>代码版权和合规性</strong>：AI生成的代码可能涉及知识产权问题</li>
<li><strong>过度依赖风险</strong>：开发者可能过度依赖AI，导致核心能力退化</li>
<li><strong>上下文理解限制</strong>：在复杂业务场景下可能生成不准确的代码</li>
<li><strong>安全隐患</strong>：AI可能无意中生成有安全漏洞的代码</li>
</ol>
<h2 id="如何有效利用AI编程助手？最佳实践-💡"><a href="#如何有效利用AI编程助手？最佳实践-💡" class="headerlink" title="如何有效利用AI编程助手？最佳实践 💡"></a>如何有效利用AI编程助手？最佳实践 💡</h2><p>要充分发挥AI编程助手的价值，需要掌握一些使用技巧和最佳实践：</p>
<h3 id="1-明确的提示工程-📝"><a href="#1-明确的提示工程-📝" class="headerlink" title="1. 明确的提示工程 📝"></a>1. 明确的提示工程 📝</h3><p>学会编写清晰、具体的提示是有效使用AI编程助手的关键。提供足够的上下文信息，明确你的需求和期望。</p>
<h3 id="2-代码审查不可少-🔍"><a href="#2-代码审查不可少-🔍" class="headerlink" title="2. 代码审查不可少 🔍"></a>2. 代码审查不可少 🔍</h3><p>始终审查AI生成的代码，确保其逻辑正确、性能良好且符合项目规范。不要盲目复制粘贴。</p>
<h3 id="3-持续学习与提升-📚"><a href="#3-持续学习与提升-📚" class="headerlink" title="3. 持续学习与提升 📚"></a>3. 持续学习与提升 📚</h3><p>将AI作为学习工具，通过分析它生成的代码来提升自己的编程技能。理解”为什么这么写”比”怎么写”更重要。</p>
<h3 id="4-建立反馈机制-🔄"><a href="#4-建立反馈机制-🔄" class="headerlink" title="4. 建立反馈机制 🔄"></a>4. 建立反馈机制 🔄</h3><p>积极向AI工具提供反馈，帮助它们不断改进。同时，建立团队内部的反馈机制，分享使用经验和技巧。</p>
<h2 id="AI驱动开发的未来展望-🔮"><a href="#AI驱动开发的未来展望-🔮" class="headerlink" title="AI驱动开发的未来展望 🔮"></a>AI驱动开发的未来展望 🔮</h2><p>随着AI技术的不断进步，未来的软件开发将更加智能化：</p>
<ol>
<li><strong>全栈AI开发</strong>：从前端到后端，从移动应用到云服务，提供全方位的AI支持</li>
<li><strong>个性化开发体验</strong>：AI将学习开发者的编码风格和偏好，提供更加个性化的建议</li>
<li><strong>团队协作增强</strong>：AI将帮助团队更好地理解和维护代码库，提升协作效率</li>
<li><strong>无代码/低代码融合</strong>：AI与低代码平台的结合，让更多人能够参与软件开发</li>
</ol>
<h2 id="写在最后：与AI共舞，而非被AI取代-💃"><a href="#写在最后：与AI共舞，而非被AI取代-💃" class="headerlink" title="写在最后：与AI共舞，而非被AI取代 💃"></a>写在最后：与AI共舞，而非被AI取代 💃</h2><p>面对AI在软件开发中的快速发展，有些开发者可能会感到焦虑，担心自己的工作被AI取代。但我认为，AI更像是一个强大的工具，它可以帮助我们更高效地完成工作，但无法替代人类的创造力、解决问题的能力和对业务的深刻理解。</p>
<p>作为开发者，我们应该积极拥抱AI技术，学会与之协作，将它作为提升自己能力的助手，而不是竞争对手。只有这样，我们才能在这个快速变化的时代保持竞争力！</p>
<p>你在开发工作中使用过哪些AI工具？有什么心得体会？欢迎在评论区留言分享！</p>
<p>Happy AI Coding！🤖💻✨</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>软件开发</tag>
        <tag>智能编程</tag>
        <tag>效率提升</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年AI平台及工具全景图：功能、对比与免费方案</title>
    <url>/2024/05/18/ai/2024-ai-platforms-tools-comparison/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="2024年AI平台及工具全景图：功能、对比与免费方案-🤖🌐"><a href="#2024年AI平台及工具全景图：功能、对比与免费方案-🤖🌐" class="headerlink" title="2024年AI平台及工具全景图：功能、对比与免费方案 🤖🌐"></a>2024年AI平台及工具全景图：功能、对比与免费方案 🤖🌐</h1><p>大家好！👋 随着人工智能技术的快速迭代，市面上涌现出了大量AI平台和工具，让人眼花缭乱。今天，我将为大家系统梳理2024年主流的AI平台及工具，从多个维度进行对比分析，帮助你找到最适合自己需求的AI解决方案！🚀</p>
<h2 id="一、AI编程助手：提升开发效率的利器-💻"><a href="#一、AI编程助手：提升开发效率的利器-💻" class="headerlink" title="一、AI编程助手：提升开发效率的利器 💻"></a>一、AI编程助手：提升开发效率的利器 💻</h2><p>AI编程助手已经成为开发者的标配工具，它们能显著提升编码效率、改善代码质量。</p>
<h3 id="主流AI编程助手对比表"><a href="#主流AI编程助手对比表" class="headerlink" title="主流AI编程助手对比表"></a>主流AI编程助手对比表</h3><table>
<thead>
<tr>
<th>平台/工具</th>
<th>核心功能</th>
<th>支持语言</th>
<th>是否免费</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>GitHub Copilot</strong></td>
<td>代码生成、注释生成、上下文理解</td>
<td>多语言</td>
<td>收费（10美元/月）</td>
<td>全栈开发、快速原型</td>
</tr>
<tr>
<td><strong>TabNine</strong></td>
<td>智能代码补全、团队代码风格匹配</td>
<td>多语言</td>
<td>基础版免费，专业版收费</td>
<td>日常编码、新手学习</td>
</tr>
<tr>
<td><strong>CodeWhisperer</strong></td>
<td>云服务代码生成、安全扫描</td>
<td>多语言</td>
<td>个人免费，企业收费</td>
<td>AWS云开发、安全编码</td>
</tr>
<tr>
<td><strong>ChatGPT/GPT-4</strong></td>
<td>代码生成、解释、调试</td>
<td>多语言</td>
<td>基础版免费，高级功能收费</td>
<td>代码学习、问题解决</td>
</tr>
<tr>
<td><strong>Claude 3</strong></td>
<td>长代码理解、代码优化建议</td>
<td>多语言</td>
<td>有限免费，超出计费</td>
<td>复杂系统重构、代码审查</td>
</tr>
</tbody></table>
<h3 id="实践案例：如何选择合适的AI编程助手？"><a href="#实践案例：如何选择合适的AI编程助手？" class="headerlink" title="实践案例：如何选择合适的AI编程助手？"></a>实践案例：如何选择合适的AI编程助手？</h3><ul>
<li>如果你是个人开发者或小团队，可以考虑 <strong>GitHub Copilot</strong> 或 <strong>TabNine</strong>，它们提供了全面的编码辅助功能。</li>
<li>如果你主要在AWS云上开发，<strong>CodeWhisperer</strong> 的云服务集成会是很好的选择。</li>
<li>对于学生和新手，<strong>TabNine基础版</strong> 和 <strong>ChatGPT免费版</strong> 是不错的入门选择。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：使用AI编程助手生成数据处理代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span>(<span class="params">df, column_name, operation</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据指定操作处理DataFrame中的特定列</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        df: pandas DataFrame</span></span><br><span class="line"><span class="string">        column_name: 要处理的列名</span></span><br><span class="line"><span class="string">        operation: 处理操作 (&#x27;normalize&#x27;, &#x27;standardize&#x27;, &#x27;log_transform&#x27;)</span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        处理后的DataFrame</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    </span><br><span class="line">    result_df = df.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> operation == <span class="string">&#x27;normalize&#x27;</span>:</span><br><span class="line">        min_val = result_df[column_name].<span class="built_in">min</span>()</span><br><span class="line">        max_val = result_df[column_name].<span class="built_in">max</span>()</span><br><span class="line">        result_df[<span class="string">f&#x27;<span class="subst">&#123;column_name&#125;</span>_normalized&#x27;</span>] = \</span><br><span class="line">            (result_df[column_name] - min_val) / (max_val - min_val)</span><br><span class="line">    <span class="keyword">elif</span> operation == <span class="string">&#x27;standardize&#x27;</span>:</span><br><span class="line">        mean_val = result_df[column_name].mean()</span><br><span class="line">        std_val = result_df[column_name].std()</span><br><span class="line">        result_df[<span class="string">f&#x27;<span class="subst">&#123;column_name&#125;</span>_standardized&#x27;</span>] = \</span><br><span class="line">            (result_df[column_name] - mean_val) / std_val</span><br><span class="line">    <span class="keyword">elif</span> operation == <span class="string">&#x27;log_transform&#x27;</span>:</span><br><span class="line">        result_df[<span class="string">f&#x27;<span class="subst">&#123;column_name&#125;</span>_log&#x27;</span>] = np.log1p(result_df[column_name])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result_df</span><br></pre></td></tr></table></figure>

<h2 id="二、大语言模型平台：企业级AI应用的基础-🧠"><a href="#二、大语言模型平台：企业级AI应用的基础-🧠" class="headerlink" title="二、大语言模型平台：企业级AI应用的基础 🧠"></a>二、大语言模型平台：企业级AI应用的基础 🧠</h2><p>大语言模型（LLM）已经成为企业AI应用的核心基础设施，不同类型的模型适用于不同的业务场景。</p>
<h3 id="大语言模型类型与应用场景"><a href="#大语言模型类型与应用场景" class="headerlink" title="大语言模型类型与应用场景"></a>大语言模型类型与应用场景</h3><table>
<thead>
<tr>
<th>模型类型</th>
<th>代表产品</th>
<th>主要优势</th>
<th>免费方案</th>
<th>企业应用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>通用大模型</strong></td>
<td>GPT-4o、Claude 3、Gemini 1.5</td>
<td>功能全面、适应性强</td>
<td>部分免费额度，超出计费</td>
<td>内容生成、客服支持</td>
</tr>
<tr>
<td><strong>行业大模型</strong></td>
<td>医疗GPT、金融BERT、法律LLM</td>
<td>行业知识丰富、专业性强</td>
<td>部分提供免费试用</td>
<td>医疗诊断辅助、金融分析</td>
</tr>
<tr>
<td><strong>企业定制模型</strong></td>
<td>私有GPT、企业专属Claude</td>
<td>数据安全、定制化程度高</td>
<td>通常无免费方案</td>
<td>内部知识管理、敏感数据处理</td>
</tr>
</tbody></table>
<h3 id="企业应用实践：如何选择大语言模型？"><a href="#企业应用实践：如何选择大语言模型？" class="headerlink" title="企业应用实践：如何选择大语言模型？"></a>企业应用实践：如何选择大语言模型？</h3><ol>
<li><strong>通用场景</strong>：选择 <strong>GPT-4o</strong> 或 <strong>Claude 3 Sonnet</strong>，它们提供了最全面的功能和良好的性价比。</li>
<li><strong>专业领域</strong>：考虑垂直领域的专业大模型，如医疗领域的 <strong>IBM Watson Health</strong>。</li>
<li><strong>数据敏感场景</strong>：必须采用私有化部署或企业定制模型，确保数据安全。</li>
</ol>
<h2 id="三、AI内容创作工具：释放创意潜能-✍️"><a href="#三、AI内容创作工具：释放创意潜能-✍️" class="headerlink" title="三、AI内容创作工具：释放创意潜能 ✍️"></a>三、AI内容创作工具：释放创意潜能 ✍️</h2><p>AI内容创作工具正在改变内容生产方式，从文章撰写到图像处理，都能显著提升效率。</p>
<h3 id="主流AI内容创作工具对比"><a href="#主流AI内容创作工具对比" class="headerlink" title="主流AI内容创作工具对比"></a>主流AI内容创作工具对比</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>核心功能</th>
<th>免费方案</th>
<th>付费价格</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ChatGPT/GPT-4</strong></td>
<td>文本生成、改写、总结</td>
<td>基础版免费</td>
<td>20-40美元/月</td>
<td>文章撰写、邮件生成</td>
</tr>
<tr>
<td><strong>Midjourney</strong></td>
<td>图像生成、艺术创作</td>
<td>无免费版</td>
<td>10-60美元/月</td>
<td>插图设计、概念创作</td>
</tr>
<tr>
<td><strong>DALL-E 3</strong></td>
<td>图像生成、编辑</td>
<td>有限免费额度</td>
<td>按生成次数计费</td>
<td>品牌设计、内容配图</td>
</tr>
<tr>
<td><strong>Runway Gen-2</strong></td>
<td>视频生成与编辑</td>
<td>部分免费功能</td>
<td>12-60美元/月</td>
<td>视频内容创作、特效生成</td>
</tr>
<tr>
<td><strong>Copy.ai</strong></td>
<td>营销文案、社交媒体内容</td>
<td>7天免费试用</td>
<td>49-369美元/月</td>
<td>营销推广、广告创作</td>
</tr>
</tbody></table>
<h3 id="内容创作最佳实践"><a href="#内容创作最佳实践" class="headerlink" title="内容创作最佳实践"></a>内容创作最佳实践</h3><ul>
<li>结合多个工具使用：用 <strong>ChatGPT</strong> 生成文案，用 <strong>Midjourney</strong> 或 <strong>DALL-E 3</strong> 生成配图。</li>
<li>利用提示工程技巧：提供详细的上下文和要求，获得更精准的生成结果。</li>
<li>始终保持人工审核：确保AI生成内容符合品牌调性和准确性要求。</li>
</ul>
<h2 id="四、AI数据分析工具：数据驱动决策的加速器-📊"><a href="#四、AI数据分析工具：数据驱动决策的加速器-📊" class="headerlink" title="四、AI数据分析工具：数据驱动决策的加速器 📊"></a>四、AI数据分析工具：数据驱动决策的加速器 📊</h2><p>AI数据分析工具正在改变传统的数据分析方式，让非技术人员也能从数据中获取洞见。</p>
<h3 id="热门AI数据分析工具一览"><a href="#热门AI数据分析工具一览" class="headerlink" title="热门AI数据分析工具一览"></a>热门AI数据分析工具一览</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>核心功能</th>
<th>是否免费</th>
<th>适用用户</th>
<th>主要优势</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Tableau AI</strong></td>
<td>自然语言查询、智能洞察</td>
<td>收费</td>
<td>数据分析人员</td>
<td>可视化能力强、易于交互</td>
</tr>
<tr>
<td><strong>Power BI Copilot</strong></td>
<td>数据探索、报告生成</td>
<td>收费</td>
<td>业务分析师</td>
<td>微软生态集成、企业级支持</td>
</tr>
<tr>
<td><strong>DataRobot</strong></td>
<td>自动机器学习、预测分析</td>
<td>收费</td>
<td>数据科学家</td>
<td>自动化程度高、模型丰富</td>
</tr>
<tr>
<td><strong>Google Analytics AI</strong></td>
<td>用户行为分析、趋势预测</td>
<td>基础版免费</td>
<td>市场人员</td>
<td>Google生态、易用性强</td>
</tr>
<tr>
<td><strong>Pandas AI</strong></td>
<td>增强版数据分析库</td>
<td>开源免费</td>
<td>数据分析师、开发者</td>
<td>Python集成、自定义灵活</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：使用Pandas AI进行数据分析</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandasai <span class="keyword">import</span> PandasAI</span><br><span class="line"><span class="keyword">from</span> pandasai.llm.openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Pandas AI</span></span><br><span class="line">llm = OpenAI(api_key=<span class="string">&quot;your_api_key&quot;</span>)</span><br><span class="line">pandas_ai = PandasAI(llm)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建示例数据</span></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;产品&quot;</span>: [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>],</span><br><span class="line">    <span class="string">&quot;销量&quot;</span>: [<span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>, <span class="number">80</span>, <span class="number">120</span>],</span><br><span class="line">    <span class="string">&quot;利润&quot;</span>: [<span class="number">2000</span>, <span class="number">3000</span>, <span class="number">4000</span>, <span class="number">1600</span>, <span class="number">2400</span>],</span><br><span class="line">    <span class="string">&quot;区域&quot;</span>: [<span class="string">&quot;华东&quot;</span>, <span class="string">&quot;华南&quot;</span>, <span class="string">&quot;华北&quot;</span>, <span class="string">&quot;西南&quot;</span>, <span class="string">&quot;东北&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用自然语言提问</span></span><br><span class="line">result = pandas_ai(df, prompt=<span class="string">&quot;分析哪个产品的利润率最高，并给出建议&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h2 id="五、AI学习与教育平台：个人成长的智能导师-📚"><a href="#五、AI学习与教育平台：个人成长的智能导师-📚" class="headerlink" title="五、AI学习与教育平台：个人成长的智能导师 📚"></a>五、AI学习与教育平台：个人成长的智能导师 📚</h2><p>AI教育平台正在改变学习方式，提供个性化的学习体验和智能辅导。</p>
<h3 id="主流AI学习平台对比"><a href="#主流AI学习平台对比" class="headerlink" title="主流AI学习平台对比"></a>主流AI学习平台对比</h3><table>
<thead>
<tr>
<th>平台名称</th>
<th>核心功能</th>
<th>是否免费</th>
<th>适合人群</th>
<th>特色优势</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Coursera AI辅导</strong></td>
<td>课程推荐、学习路径规划</td>
<td>部分免费</td>
<td>学生、职场人士</td>
<td>名校课程、专业认证</td>
</tr>
<tr>
<td><strong>Duolingo Max</strong></td>
<td>个性化语言学习、AI对话练习</td>
<td>基础版免费</td>
<td>语言学习者</td>
<td>游戏化设计、趣味性强</td>
</tr>
<tr>
<td><strong>Brilliant.org AI</strong></td>
<td>交互式数学、科学学习</td>
<td>7天免费试用</td>
<td>STEM学习者</td>
<td>互动式课程、思维训练</td>
</tr>
<tr>
<td><strong>Khanmigo</strong></td>
<td>个性化辅导、概念解释</td>
<td>部分免费</td>
<td>K12学生</td>
<td>因材施教、耐心讲解</td>
</tr>
<tr>
<td><strong>ChatGPT Learn</strong></td>
<td>知识问答、概念解释、练习生成</td>
<td>基础版免费</td>
<td>全年龄段学习者</td>
<td>适应性强、覆盖广泛</td>
</tr>
</tbody></table>
<h2 id="六、AI开源工具与社区：创新的源泉-🌱"><a href="#六、AI开源工具与社区：创新的源泉-🌱" class="headerlink" title="六、AI开源工具与社区：创新的源泉 🌱"></a>六、AI开源工具与社区：创新的源泉 🌱</h2><p>开源AI工具和社区是AI技术发展的重要推动力，提供了丰富的免费资源。</p>
<h3 id="精选AI开源工具"><a href="#精选AI开源工具" class="headerlink" title="精选AI开源工具"></a>精选AI开源工具</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>功能领域</th>
<th>开源协议</th>
<th>主要优势</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Hugging Face Transformers</strong></td>
<td>NLP模型库</td>
<td>Apache 2.0</td>
<td>模型丰富、易于使用</td>
<td>NLP研究与应用开发</td>
</tr>
<tr>
<td><strong>LangChain</strong></td>
<td>LLM应用框架</td>
<td>MIT</td>
<td>组件化设计、扩展性强</td>
<td>复杂LLM应用构建</td>
</tr>
<tr>
<td><strong>PyTorch</strong></td>
<td>深度学习框架</td>
<td>BSD</td>
<td>动态图、研究友好</td>
<td>深度学习研究与开发</td>
</tr>
<tr>
<td><strong>TensorFlow</strong></td>
<td>深度学习框架</td>
<td>Apache 2.0</td>
<td>静态图、生产友好</td>
<td>大规模AI系统部署</td>
</tr>
<tr>
<td><strong>Stable Diffusion</strong></td>
<td>图像生成模型</td>
<td>CreativeML Open RAIL-M</td>
<td>高度可定制、社区活跃</td>
<td>图像生成与编辑</td>
</tr>
</tbody></table>
<h2 id="七、选择AI工具的核心考量因素-🧐"><a href="#七、选择AI工具的核心考量因素-🧐" class="headerlink" title="七、选择AI工具的核心考量因素 🧐"></a>七、选择AI工具的核心考量因素 🧐</h2><p>在众多AI工具中做出选择时，需要考虑以下关键因素：</p>
<h3 id="1-明确需求与场景"><a href="#1-明确需求与场景" class="headerlink" title="1. 明确需求与场景"></a>1. 明确需求与场景</h3><p>首先要明确你的具体需求和应用场景，不同的工具在不同场景下表现各异。</p>
<h3 id="2-成本效益分析"><a href="#2-成本效益分析" class="headerlink" title="2. 成本效益分析"></a>2. 成本效益分析</h3><p>评估免费版和付费版的功能差异，计算长期使用成本，选择最具性价比的方案。</p>
<h3 id="3-数据安全与隐私"><a href="#3-数据安全与隐私" class="headerlink" title="3. 数据安全与隐私"></a>3. 数据安全与隐私</h3><p>特别是对于企业用户，数据安全和隐私保护至关重要，要选择符合合规要求的工具。</p>
<h3 id="4-易用性与学习曲线"><a href="#4-易用性与学习曲线" class="headerlink" title="4. 易用性与学习曲线"></a>4. 易用性与学习曲线</h3><p>考虑团队的技术能力，选择学习成本适中的工具，确保能够快速上手和推广。</p>
<h3 id="5-生态系统与集成性"><a href="#5-生态系统与集成性" class="headerlink" title="5. 生态系统与集成性"></a>5. 生态系统与集成性</h3><p>评估工具与现有系统的兼容性和集成能力，避免产生数据孤岛。</p>
<h2 id="八、未来展望：AI工具的发展趋势-🔮"><a href="#八、未来展望：AI工具的发展趋势-🔮" class="headerlink" title="八、未来展望：AI工具的发展趋势 🔮"></a>八、未来展望：AI工具的发展趋势 🔮</h2><p>随着AI技术的不断进步，未来的AI工具将呈现以下发展趋势：</p>
<h3 id="1-多模态融合"><a href="#1-多模态融合" class="headerlink" title="1. 多模态融合"></a>1. 多模态融合</h3><p>AI工具将越来越多地支持文本、图像、音频、视频等多种数据类型的处理和理解。</p>
<h3 id="2-个性化定制"><a href="#2-个性化定制" class="headerlink" title="2. 个性化定制"></a>2. 个性化定制</h3><p>工具将更加了解用户的偏好和习惯，提供更加个性化的服务和体验。</p>
<h3 id="3-边缘计算部署"><a href="#3-边缘计算部署" class="headerlink" title="3. 边缘计算部署"></a>3. 边缘计算部署</h3><p>为了保护数据隐私和提高响应速度，更多AI工具将支持在边缘设备上运行。</p>
<h3 id="4-自主学习与进化"><a href="#4-自主学习与进化" class="headerlink" title="4. 自主学习与进化"></a>4. 自主学习与进化</h3><p>工具将具备更强的自主学习能力，能够从用户反馈中不断进化和优化。</p>
<h3 id="5-跨平台与协作"><a href="#5-跨平台与协作" class="headerlink" title="5. 跨平台与协作"></a>5. 跨平台与协作</h3><p>AI工具将更好地支持团队协作，实现跨平台的数据共享和无缝协作。</p>
<h2 id="写在最后：与AI共舞，拥抱智能未来-💃"><a href="#写在最后：与AI共舞，拥抱智能未来-💃" class="headerlink" title="写在最后：与AI共舞，拥抱智能未来 💃"></a>写在最后：与AI共舞，拥抱智能未来 💃</h2><p>AI工具正在以前所未有的速度改变我们的工作和生活方式。面对这一技术变革，我们应该保持开放的心态，积极学习和适应新工具，同时也要保持理性，认识到AI只是我们的助手，而非替代者。</p>
<p>选择合适的AI工具，能够帮助我们提升效率、释放创造力，让我们能够专注于更有价值的工作。希望本文的对比分析能够帮助你找到最适合自己需求的AI解决方案！</p>
<p>你使用过哪些AI工具？有什么宝贵的使用经验？欢迎在评论区留言分享！</p>
<p>让我们一起拥抱智能未来！🤖✨</p>
]]></content>
      <tags>
        <tag>AI平台</tag>
        <tag>AI工具</tag>
        <tag>对比分析</tag>
        <tag>免费资源</tag>
      </tags>
  </entry>
  <entry>
    <title>大语言模型在企业应用中的实践与思考</title>
    <url>/2023/11/05/ai/2023-llm-in-enterprise/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="大语言模型在企业应用中的实践与思考-🧠💼"><a href="#大语言模型在企业应用中的实践与思考-🧠💼" class="headerlink" title="大语言模型在企业应用中的实践与思考 🧠💼"></a>大语言模型在企业应用中的实践与思考 🧠💼</h1><p>大家好！👋 随着ChatGPT、GPT-4等大语言模型（LLM）的横空出世，人工智能技术迎来了新的里程碑。这些模型不仅在通用场景表现出色，也为企业应用带来了前所未有的可能性。作为一名在企业AI应用领域工作多年的实践者，我想分享一些大语言模型在企业应用中的实践经验和思考。今天，我们就来一起探索大语言模型如何为企业创造价值！🚀</p>
<h2 id="大语言模型：企业数字化转型的新引擎-🚂"><a href="#大语言模型：企业数字化转型的新引擎-🚂" class="headerlink" title="大语言模型：企业数字化转型的新引擎 🚂"></a>大语言模型：企业数字化转型的新引擎 🚂</h2><p>大语言模型是基于深度学习的自然语言处理模型，通过海量文本数据训练而成，具有理解和生成人类语言的能力。在企业场景中，大语言模型可以应用于客户服务、知识管理、内容生成、数据分析等多个领域。</p>
<h3 id="企业应用中的大语言模型类型-🏛️"><a href="#企业应用中的大语言模型类型-🏛️" class="headerlink" title="企业应用中的大语言模型类型 🏛️"></a>企业应用中的大语言模型类型 🏛️</h3><ol>
<li><strong>通用大模型</strong>：如OpenAI的GPT-4、Anthropic的Claude等，功能全面但可能缺乏行业专业性</li>
<li><strong>行业大模型</strong>：针对特定行业优化的模型，如医疗、金融、法律等领域的专业模型</li>
<li><strong>企业定制模型</strong>：基于企业自有数据训练或微调的专用模型，更好地满足企业特定需求</li>
</ol>
<h3 id="大语言模型的核心能力-🎯"><a href="#大语言模型的核心能力-🎯" class="headerlink" title="大语言模型的核心能力 🎯"></a>大语言模型的核心能力 🎯</h3><ol>
<li><strong>自然语言理解</strong>：理解复杂的业务问题和用户意图</li>
<li><strong>内容生成</strong>：生成高质量的报告、邮件、文档等内容</li>
<li><strong>知识检索与问答</strong>：从企业知识库中检索信息并提供准确回答</li>
<li><strong>多轮对话</strong>：进行复杂的、上下文相关的对话交互</li>
<li><strong>代码生成</strong>：辅助开发人员编写和优化代码</li>
</ol>
<p><img data-src="https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80" alt="企业AI应用"></p>
<h2 id="大语言模型在企业中的典型应用场景-💼"><a href="#大语言模型在企业中的典型应用场景-💼" class="headerlink" title="大语言模型在企业中的典型应用场景 💼"></a>大语言模型在企业中的典型应用场景 💼</h2><h3 id="1-智能客服与支持系统-🤝"><a href="#1-智能客服与支持系统-🤝" class="headerlink" title="1. 智能客服与支持系统 🤝"></a>1. 智能客服与支持系统 🤝</h3><p>大语言模型可以大幅提升客户服务的效率和质量：</p>
<ul>
<li>自动回答客户常见问题</li>
<li>引导用户解决简单问题</li>
<li>协助客服人员处理复杂咨询</li>
<li>多语言支持，拓展国际业务</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：大语言模型在客服系统中的应用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceAssistant</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, llm_model</span>):</span></span><br><span class="line">        self.llm_model = llm_model</span><br><span class="line">        self.knowledge_base = load_knowledge_base()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">respond_to_query</span>(<span class="params">self, user_query, context=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># 检索相关知识</span></span><br><span class="line">        relevant_info = self.retrieve_relevant_info(user_query)</span><br><span class="line">        <span class="comment"># 构建提示</span></span><br><span class="line">        prompt = self.build_prompt(user_query, relevant_info, context)</span><br><span class="line">        <span class="comment"># 获取模型响应</span></span><br><span class="line">        response = self.llm_model.generate_response(prompt)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="2-知识管理与内部协作-📚"><a href="#2-知识管理与内部协作-📚" class="headerlink" title="2. 知识管理与内部协作 📚"></a>2. 知识管理与内部协作 📚</h3><p>企业通常积累了大量的文档、报告和专业知识，但这些知识往往分散在不同系统中，难以有效利用。大语言模型可以帮助企业：</p>
<ul>
<li>自动化文档分类和摘要</li>
<li>构建智能知识问答系统</li>
<li>辅助员工快速获取所需信息</li>
<li>促进知识共享和团队协作</li>
</ul>
<h3 id="3-内容生成与营销自动化-📝"><a href="#3-内容生成与营销自动化-📝" class="headerlink" title="3. 内容生成与营销自动化 📝"></a>3. 内容生成与营销自动化 📝</h3><p>在内容创作和营销领域，大语言模型可以显著提升效率：</p>
<ul>
<li>生成营销文案、社交媒体内容</li>
<li>辅助产品描述和宣传材料创作</li>
<li>个性化邮件和消息推送</li>
<li>多语言内容翻译和本地化</li>
</ul>
<h3 id="4-数据分析与决策支持-📊"><a href="#4-数据分析与决策支持-📊" class="headerlink" title="4. 数据分析与决策支持 📊"></a>4. 数据分析与决策支持 📊</h3><p>大语言模型可以帮助企业更好地理解和利用数据：</p>
<ul>
<li>自然语言查询数据分析结果</li>
<li>生成数据驱动的业务报告</li>
<li>识别数据中的趋势和模式</li>
<li>提供基于数据的决策建议</li>
</ul>
<h2 id="大语言模型落地企业的关键挑战与解决方案-🚧"><a href="#大语言模型落地企业的关键挑战与解决方案-🚧" class="headerlink" title="大语言模型落地企业的关键挑战与解决方案 🚧"></a>大语言模型落地企业的关键挑战与解决方案 🚧</h2><h3 id="挑战1：数据安全与隐私-🔒"><a href="#挑战1：数据安全与隐私-🔒" class="headerlink" title="挑战1：数据安全与隐私 🔒"></a>挑战1：数据安全与隐私 🔒</h3><p>企业数据通常包含敏感信息，使用大语言模型可能带来数据泄露风险。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>使用私有化部署的大语言模型</li>
<li>实施数据脱敏和加密措施</li>
<li>建立严格的数据访问控制机制</li>
<li>选择符合行业合规要求的模型和服务</li>
</ul>
<h3 id="挑战2：模型准确性与可靠性-🎯"><a href="#挑战2：模型准确性与可靠性-🎯" class="headerlink" title="挑战2：模型准确性与可靠性 🎯"></a>挑战2：模型准确性与可靠性 🎯</h3><p>大语言模型有时会生成不准确或误导性的内容（幻觉问题）。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>实施基于检索增强生成（RAG）技术</li>
<li>建立内容审核和验证流程</li>
<li>使用领域专家进行人工干预</li>
<li>持续监控和优化模型性能</li>
</ul>
<h3 id="挑战3：成本控制-💰"><a href="#挑战3：成本控制-💰" class="headerlink" title="挑战3：成本控制 💰"></a>挑战3：成本控制 💰</h3><p>大语言模型的训练和推理成本可能很高，特别是对于资源有限的企业。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>采用混合模型策略，通用任务使用公有云服务，敏感任务使用私有部署</li>
<li>优化模型推理效率，如模型量化、知识蒸馏等技术</li>
<li>建立成本监控和优化机制</li>
<li>选择合适的模型规模，避免过度使用超大模型</li>
</ul>
<h3 id="挑战4：技术与组织适应性-🧩"><a href="#挑战4：技术与组织适应性-🧩" class="headerlink" title="挑战4：技术与组织适应性 🧩"></a>挑战4：技术与组织适应性 🧩</h3><p>引入大语言模型需要企业在技术和组织层面进行调整。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>开展员工培训，提升AI素养</li>
<li>建立跨部门的AI项目团队</li>
<li>采用敏捷的实施方法论</li>
<li>设定合理的预期和阶段性目标</li>
</ul>
<h2 id="大语言模型实施的最佳实践-💡"><a href="#大语言模型实施的最佳实践-💡" class="headerlink" title="大语言模型实施的最佳实践 💡"></a>大语言模型实施的最佳实践 💡</h2><h3 id="1-从具体场景入手，快速验证价值-🚀"><a href="#1-从具体场景入手，快速验证价值-🚀" class="headerlink" title="1. 从具体场景入手，快速验证价值 🚀"></a>1. 从具体场景入手，快速验证价值 🚀</h3><p>不要一开始就试图全面改造企业IT系统，而是选择几个具体的、价值明确的场景进行试点。例如，先从智能客服或知识问答开始，验证效果后再逐步扩展。</p>
<h3 id="2-结合企业实际数据，提升模型效果-📊"><a href="#2-结合企业实际数据，提升模型效果-📊" class="headerlink" title="2. 结合企业实际数据，提升模型效果 📊"></a>2. 结合企业实际数据，提升模型效果 📊</h3><p>使用企业自身的数据对模型进行微调或构建检索增强系统，可以显著提升模型在特定领域的表现。企业数据是最宝贵的资产，要充分利用。</p>
<h3 id="3-构建人机协作的混合模式-🤝"><a href="#3-构建人机协作的混合模式-🤝" class="headerlink" title="3. 构建人机协作的混合模式 🤝"></a>3. 构建人机协作的混合模式 🤝</h3><p>大语言模型不是要完全取代人类，而是要辅助人类工作。建立有效的人机协作模式，让AI负责重复性、标准化的工作，人类专注于创造性、判断性的工作。</p>
<h3 id="4-持续评估与优化-🔄"><a href="#4-持续评估与优化-🔄" class="headerlink" title="4. 持续评估与优化 🔄"></a>4. 持续评估与优化 🔄</h3><p>建立完善的评估体系，持续监控模型的性能、准确率和用户满意度。根据评估结果不断优化模型和应用，确保其持续为企业创造价值。</p>
<h2 id="未来展望：大语言模型与企业的深度融合-🔮"><a href="#未来展望：大语言模型与企业的深度融合-🔮" class="headerlink" title="未来展望：大语言模型与企业的深度融合 🔮"></a>未来展望：大语言模型与企业的深度融合 🔮</h2><p>随着大语言模型技术的不断发展，未来企业应用将呈现以下趋势：</p>
<ol>
<li><strong>多模态能力增强</strong>：从单一的文本处理扩展到图像、音频、视频等多种数据类型</li>
<li><strong>行业深度定制</strong>：针对特定行业的专业大模型将更加普及</li>
<li><strong>边缘计算部署</strong>：在保护数据隐私的同时，实现更低的延迟和更高的响应速度</li>
<li><strong>自主决策能力</strong>：从辅助决策向有限自主决策发展，提升业务自动化水平</li>
</ol>
<h2 id="写在最后：拥抱AI，重塑企业未来-🌟"><a href="#写在最后：拥抱AI，重塑企业未来-🌟" class="headerlink" title="写在最后：拥抱AI，重塑企业未来 🌟"></a>写在最后：拥抱AI，重塑企业未来 🌟</h2><p>大语言模型为企业带来了巨大的机遇，但也伴随着挑战。成功实施大语言模型需要企业在技术、组织和文化等多个层面进行变革。作为企业的技术领导者或从业者，我们需要保持开放的心态，积极拥抱这一技术变革，同时也要保持理性，认识到AI不是万能的，它需要与人类智慧和企业实际需求相结合。</p>
<p>我相信，在不久的将来，大语言模型将成为企业数字化转型的核心驱动力，帮助企业提升效率、降低成本、创造新的业务模式和价值。让我们一起见证并参与这一激动人心的变革！</p>
<p>你所在的企业是否已经开始探索大语言模型的应用？有什么成功经验或教训可以分享？欢迎在评论区留言讨论！</p>
<p>AI赋能企业，创新引领未来！💼🤖✨</p>
]]></content>
      <tags>
        <tag>大语言模型</tag>
        <tag>LLM</tag>
        <tag>企业应用</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>2025年AI开发工具全景：深度对比与未来趋势</title>
    <url>/2025/01/15/ai/2025-ai-development-tools-comparison/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="2025年AI开发工具全景：深度对比与未来趋势-🤖💻"><a href="#2025年AI开发工具全景：深度对比与未来趋势-🤖💻" class="headerlink" title="2025年AI开发工具全景：深度对比与未来趋势 🤖💻"></a>2025年AI开发工具全景：深度对比与未来趋势 🤖💻</h1><p>大家好！👋 随着生成式AI技术的持续突破，AI开发工具生态正在经历前所未有的变革。2025年，AI开发工具不仅在功能上更加全面，更在智能化、个性化和集成性方面实现了质的飞跃。今天，我将为大家深度剖析2025年主流AI开发工具的特点、优势与适用场景，帮助开发者在这个快速演进的领域中找到最适合自己的解决方案！🚀</p>
<h2 id="一、智能编程助手：从代码补全到全流程协作-🧑💻🤝🤖"><a href="#一、智能编程助手：从代码补全到全流程协作-🧑💻🤝🤖" class="headerlink" title="一、智能编程助手：从代码补全到全流程协作 🧑💻🤝🤖"></a>一、智能编程助手：从代码补全到全流程协作 🧑💻🤝🤖</h2><p>2025年的AI编程助手已经超越了简单的代码补全功能，进化为全流程的开发协作伙伴。</p>
<h3 id="2025年主流AI编程助手深度对比"><a href="#2025年主流AI编程助手深度对比" class="headerlink" title="2025年主流AI编程助手深度对比"></a>2025年主流AI编程助手深度对比</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>核心能力</th>
<th>智能水平</th>
<th>协作功能</th>
<th>定价模式</th>
<th>最佳适用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>GitHub Copilot Pro</strong></td>
<td>代码生成、架构建议、自动测试</td>
<td>L5级（专家级）</td>
<td>团队知识共享、代码评审辅助</td>
<td>30美元/月</td>
<td>企业级应用开发、复杂系统构建</td>
</tr>
<tr>
<td><strong>TabNine Ultra</strong></td>
<td>上下文感知编码、性能优化、安全扫描</td>
<td>L4级（高级）</td>
<td>团队编码规范统一</td>
<td>25美元/月</td>
<td>安全关键型项目、多团队协作</td>
</tr>
<tr>
<td><strong>AWS CodeWhisperer X</strong></td>
<td>云原生开发、无服务器架构、成本优化</td>
<td>L5级（专家级）</td>
<td>AWS资源智能配置</td>
<td>按使用量计费</td>
<td>AWS云原生应用、大规模分布式系统</td>
</tr>
<tr>
<td><strong>Google Gemini Code</strong></td>
<td>多语言支持、跨平台开发、AI模型集成</td>
<td>L5级（专家级）</td>
<td>跨平台兼容性检查</td>
<td>免费版/商业版35美元/月</td>
<td>多平台应用、AI驱动产品开发</td>
</tr>
<tr>
<td><strong>ChatGPT Dev Studio</strong></td>
<td>代码解释、重构建议、错误修复</td>
<td>L5级（专家级）</td>
<td>开发流程智能规划</td>
<td>40美元/月</td>
<td>复杂问题解决、遗留系统现代化</td>
</tr>
<tr>
<td><strong>Claude DevTools</strong></td>
<td>长上下文理解、系统级重构、文档生成</td>
<td>L5级（专家级）</td>
<td>架构设计评审</td>
<td>企业定制</td>
<td>大型系统重构、技术债务管理</td>
</tr>
<tr>
<td><strong>Trae AI IDE</strong></td>
<td>一体化开发环境、智能编码、协作编程</td>
<td>L5级（专家级）</td>
<td>实时协作、知识共享</td>
<td>免费版/企业版</td>
<td>全栈开发、团队协作项目</td>
</tr>
<tr>
<td><strong>Joycode AI</strong></td>
<td>智能编码、项目管理集成、流程自动化</td>
<td>L4级（高级）</td>
<td>团队任务协调、进度追踪</td>
<td>免费版/商业版</td>
<td>敏捷开发、中小型项目</td>
</tr>
<tr>
<td><strong>Cursor AI</strong></td>
<td>专注编辑器、多模型支持、代码导航</td>
<td>L5级（专家级）</td>
<td>插件生态系统</td>
<td>免费版/专业版20美元/月</td>
<td>个人开发者、前端开发</td>
</tr>
<tr>
<td><strong>豆包Dev智能助手</strong></td>
<td>中文优化、国产化适配、多模态交互</td>
<td>L4级（高级）</td>
<td>企业级权限管理</td>
<td>企业定制</td>
<td>国内企业开发、中文项目</td>
</tr>
<tr>
<td><strong>CodeGeeX 5</strong></td>
<td>开源、多语言支持、本地部署</td>
<td>L4级（高级）</td>
<td>社区贡献</td>
<td>开源免费</td>
<td>开源项目、隐私敏感场景</td>
</tr>
<tr>
<td><strong>Amazon Q Developer</strong></td>
<td>AWS深度集成、代码理解、部署自动化</td>
<td>L5级（专家级）</td>
<td>全栈开发工作流</td>
<td>35美元/月</td>
<td>AWS生态系统、云原生开发</td>
</tr>
</tbody></table>
<h3 id="技术亮点与创新功能"><a href="#技术亮点与创新功能" class="headerlink" title="技术亮点与创新功能"></a>技术亮点与创新功能</h3><p>2025年的AI编程助手普遍具备以下革命性功能：</p>
<ol>
<li><strong>架构级智能建议</strong>：不仅关注代码细节，更能提供系统架构层面的优化建议</li>
<li><strong>多模态理解</strong>：能够同时处理代码、文档、图表等多种形式的信息</li>
<li><strong>团队知识整合</strong>：学习团队的编码风格、最佳实践和业务逻辑，提供高度个性化的建议</li>
<li><strong>自动安全审计</strong>：在编码过程中实时检测安全漏洞和合规性问题</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：使用GitHub Copilot Pro生成微服务架构代码</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Depends, HTTPException</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> asynccontextmanager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动生成微服务架构代码，包含可观测性、安全性和可扩展性设计</span></span><br><span class="line"><span class="meta">@asynccontextmanager</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">lifespan</span>(<span class="params">app: FastAPI</span>):</span></span><br><span class="line">    <span class="comment"># 初始化日志、监控和追踪</span></span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    <span class="comment"># 启动时注册服务到服务发现</span></span><br><span class="line">    register_service()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 优雅关闭</span></span><br><span class="line">        deregister_service()</span><br><span class="line"></span><br><span class="line">app = FastAPI(lifespan=lifespan)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖注入：数据库会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span>():</span></span><br><span class="line">    db = SessionLocal()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> db</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># API路由，自动包含输入验证、错误处理和文档</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/api/v1/resources/&#123;resource_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_resource</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    resource_id: <span class="built_in">int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    db: Session = Depends(<span class="params">get_db</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment"># 自动处理认证和授权</span></span></span></span><br><span class="line"><span class="params"><span class="function">    current_user: User = Depends(<span class="params">get_current_user</span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取资源详情，自动生成OpenAPI文档</span></span><br><span class="line"><span class="string">    - 支持细粒度访问控制</span></span><br><span class="line"><span class="string">    - 实现请求限流和熔断</span></span><br><span class="line"><span class="string">    - 自动记录性能指标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    resource = db.query(Resource).<span class="built_in">filter</span>(Resource.<span class="built_in">id</span> == resource_id).first()</span><br><span class="line">    <span class="keyword">if</span> resource <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;Resource not found&quot;</span>)</span><br><span class="line">    <span class="comment"># 自动进行访问权限检查</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> has_access(current_user, resource):</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">403</span>, detail=<span class="string">&quot;Access denied&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resource</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动生成单元测试、集成测试和性能测试</span></span><br></pre></td></tr></table></figure>

<h2 id="二、AI开发框架：从模型训练到部署的全栈支持-🧠🛠️"><a href="#二、AI开发框架：从模型训练到部署的全栈支持-🧠🛠️" class="headerlink" title="二、AI开发框架：从模型训练到部署的全栈支持 🧠🛠️"></a>二、AI开发框架：从模型训练到部署的全栈支持 🧠🛠️</h2><p>2025年的AI开发框架已经实现了从模型设计、训练到部署的全流程自动化，大幅降低了AI应用开发的门槛。</p>
<h3 id="主流AI开发框架对比"><a href="#主流AI开发框架对比" class="headerlink" title="主流AI开发框架对比"></a>主流AI开发框架对比</h3><table>
<thead>
<tr>
<th>框架名称</th>
<th>核心优势</th>
<th>自动化程度</th>
<th>部署选项</th>
<th>生态系统</th>
<th>学习曲线</th>
</tr>
</thead>
<tbody><tr>
<td><strong>PyTorch 3.0</strong></td>
<td>动态计算图、研究友好、模型丰富</td>
<td>中高</td>
<td>多平台支持</td>
<td>极其丰富</td>
<td>中等</td>
</tr>
<tr>
<td><strong>TensorFlow 3.0</strong></td>
<td>静态计算图、生产优化、分布式训练</td>
<td>高</td>
<td>云边端一体化</td>
<td>企业级</td>
<td>较陡</td>
</tr>
<tr>
<td><strong>Hugging Face Transformers X</strong></td>
<td>预训练模型库、一键微调、模型共享</td>
<td>极高</td>
<td>容器化部署</td>
<td>开发者友好</td>
<td>平缓</td>
</tr>
<tr>
<td><strong>LangChain 4.0</strong></td>
<td>LLM应用编排、多模态集成、Agent框架</td>
<td>极高</td>
<td>弹性扩展</td>
<td>快速迭代</td>
<td>平缓</td>
</tr>
<tr>
<td><strong>MXNet 2.0</strong></td>
<td>混合精度训练、内存优化、多语言支持</td>
<td>中高</td>
<td>跨平台部署</td>
<td>学术导向</td>
<td>较陡</td>
</tr>
<tr>
<td><strong>JAX/Flax</strong></td>
<td>高性能计算、自动微分、可组合变换</td>
<td>中</td>
<td>大规模分布式</td>
<td>研究前沿</td>
<td>陡峭</td>
</tr>
</tbody></table>
<h3 id="开发框架的智能化演进"><a href="#开发框架的智能化演进" class="headerlink" title="开发框架的智能化演进"></a>开发框架的智能化演进</h3><p>2025年的AI开发框架呈现以下显著特点：</p>
<ol>
<li><strong>自动架构搜索</strong>：框架能够根据任务需求自动搜索最优的模型架构</li>
<li><strong>智能超参数优化</strong>：自动调整训练参数，最大化模型性能</li>
<li><strong>一键模型压缩</strong>：自动应用量化、剪枝等技术，优化部署性能</li>
<li><strong>端到端工作流</strong>：从数据准备到模型部署的全流程自动化</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：使用Hugging Face Transformers X进行模型微调</span></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForCausalLM, AutoTokenizer, TrainingArguments, BitsAndBytesConfig</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"><span class="keyword">from</span> trl <span class="keyword">import</span> SFTTrainer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 智能模型选择和配置</span></span><br><span class="line">model_id = <span class="string">&quot;mistralai/Mistral-7B-v0.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动检测硬件并优化配置</span></span><br><span class="line">quantization_config = BitsAndBytesConfig(</span><br><span class="line">    load_in_4bit=<span class="literal">True</span>,</span><br><span class="line">    bnb_4bit_quant_type=<span class="string">&quot;nf4&quot;</span>,</span><br><span class="line">    bnb_4bit_use_double_quant=<span class="literal">True</span>,</span><br><span class="line">    bnb_4bit_compute_dtype=<span class="string">&quot;float16&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动加载模型和分词器</span></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(</span><br><span class="line">    model_id,</span><br><span class="line">    quantization_config=quantization_config,</span><br><span class="line">    device_map=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    trust_remote_code=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 自动应用最佳实践配置</span></span><br><span class="line">    use_cache=<span class="literal">False</span>,</span><br><span class="line">    attn_implementation=<span class="string">&quot;flash_attention_2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载和预处理数据</span></span><br><span class="line">dataset = load_dataset(<span class="string">&quot;your_dataset&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 智能训练参数配置</span></span><br><span class="line"><span class="comment"># 根据模型大小、数据规模和硬件自动推荐最佳参数</span></span><br><span class="line">args = TrainingArguments(</span><br><span class="line">    output_dir=<span class="string">&quot;./results&quot;</span>,</span><br><span class="line">    num_train_epochs=<span class="number">3</span>,</span><br><span class="line">    <span class="comment"># 自动计算最佳批次大小</span></span><br><span class="line">    per_device_train_batch_size=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    gradient_accumulation_steps=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    optim=<span class="string">&quot;paged_adamw_32bit&quot;</span>,</span><br><span class="line">    <span class="comment"># 自动学习率调度</span></span><br><span class="line">    learning_rate=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    <span class="comment"># 自动启用梯度检查点</span></span><br><span class="line">    gradient_checkpointing=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    <span class="comment"># 自动启用FSDP或DDP</span></span><br><span class="line">    fsdp=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    <span class="comment"># 自动启用混合精度训练</span></span><br><span class="line">    fp16=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    logging_steps=<span class="number">10</span>,</span><br><span class="line">    save_strategy=<span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    <span class="comment"># 自动启用早停</span></span><br><span class="line">    load_best_model_at_end=<span class="literal">True</span>,</span><br><span class="line">    metric_for_best_model=<span class="string">&quot;eval_loss&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建训练器</span></span><br><span class="line"><span class="comment"># 自动应用最新的训练技术</span></span><br><span class="line"> trainer = SFTTrainer(</span><br><span class="line">    model=model,</span><br><span class="line">    tokenizer=tokenizer,</span><br><span class="line">    args=args,</span><br><span class="line">    train_dataset=dataset[<span class="string">&quot;train&quot;</span>],</span><br><span class="line">    eval_dataset=dataset[<span class="string">&quot;test&quot;</span>],</span><br><span class="line">    <span class="comment"># 自动选择合适的数据预处理策略</span></span><br><span class="line">    dataset_text_field=<span class="string">&quot;text&quot;</span>,</span><br><span class="line">    <span class="comment"># 自动启用PEFT技术</span></span><br><span class="line">    peft_config=<span class="string">&quot;auto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"> trainer.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署到多种环境</span></span><br><span class="line"> trainer.push_to_hub(<span class="string">&quot;your_finetuned_model&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="三、AI应用部署平台：云边端一体化的智能基础设施-☁️🏗️"><a href="#三、AI应用部署平台：云边端一体化的智能基础设施-☁️🏗️" class="headerlink" title="三、AI应用部署平台：云边端一体化的智能基础设施 ☁️🏗️"></a>三、AI应用部署平台：云边端一体化的智能基础设施 ☁️🏗️</h2><p>2025年的AI应用部署平台已经实现了云边端一体化，支持模型在不同环境中的无缝部署和优化。</p>
<h3 id="主流AI部署平台对比"><a href="#主流AI部署平台对比" class="headerlink" title="主流AI部署平台对比"></a>主流AI部署平台对比</h3><table>
<thead>
<tr>
<th>平台名称</th>
<th>部署灵活性</th>
<th>模型优化</th>
<th>成本效率</th>
<th>监控能力</th>
<th>安全特性</th>
</tr>
</thead>
<tbody><tr>
<td><strong>AWS SageMaker Studio</strong></td>
<td>极高</td>
<td>自动模型压缩、编译优化</td>
<td>按需计费</td>
<td>全链路监控</td>
<td>企业级安全合规</td>
</tr>
<tr>
<td><strong>Google Vertex AI</strong></td>
<td>高</td>
<td>自动MLOps、A/B测试</td>
<td>分层定价</td>
<td>可解释性分析</td>
<td>数据加密、访问控制</td>
</tr>
<tr>
<td><strong>Azure AI Studio</strong></td>
<td>高</td>
<td>模型加速、容器优化</td>
<td>包年包月/按需</td>
<td>实时监控预警</td>
<td>身份认证、威胁检测</td>
</tr>
<tr>
<td><strong>Hugging Face Inference Hub</strong></td>
<td>极高</td>
<td>自动扩缩容、优化路由</td>
<td>按请求计费</td>
<td>性能指标追踪</td>
<td>API密钥、速率限制</td>
</tr>
<tr>
<td><strong>NVIDIA Triton Inference Server</strong></td>
<td>高</td>
<td>GPU优化、低延迟推理</td>
<td>开源免费</td>
<td>详细性能分析</td>
<td>访问控制、模型加密</td>
</tr>
<tr>
<td><strong>Vercel AI SDK</strong></td>
<td>极高</td>
<td>边缘缓存、CDN加速</td>
<td>免费层/阶梯定价</td>
<td>基本监控</td>
<td>边缘安全、数据隔离</td>
</tr>
</tbody></table>
<h3 id="部署平台的创新特性"><a href="#部署平台的创新特性" class="headerlink" title="部署平台的创新特性"></a>部署平台的创新特性</h3><p>2025年的AI部署平台普遍具备以下创新特性：</p>
<ol>
<li><strong>智能路由与负载均衡</strong>：根据请求特征和模型特性自动选择最优部署策略</li>
<li><strong>动态资源分配</strong>：根据实时流量自动调整计算资源，优化成本和性能</li>
<li><strong>边缘AI加速</strong>：在边缘设备上部署轻量级模型，实现低延迟响应</li>
<li><strong>联邦学习支持</strong>：在保护数据隐私的前提下实现模型协同训练</li>
</ol>
<h2 id="四、低代码-无代码AI平台：普惠AI开发的新范式-🧩🚀"><a href="#四、低代码-无代码AI平台：普惠AI开发的新范式-🧩🚀" class="headerlink" title="四、低代码/无代码AI平台：普惠AI开发的新范式 🧩🚀"></a>四、低代码/无代码AI平台：普惠AI开发的新范式 🧩🚀</h2><p>低代码/无代码AI平台正在让AI开发变得更加普惠，即使没有深厚的技术背景，也能快速构建和部署AI应用。</p>
<h3 id="主流低代码-无代码AI平台对比"><a href="#主流低代码-无代码AI平台对比" class="headerlink" title="主流低代码/无代码AI平台对比"></a>主流低代码/无代码AI平台对比</h3><table>
<thead>
<tr>
<th>平台名称</th>
<th>易用性</th>
<th>功能丰富度</th>
<th>集成能力</th>
<th>定价模式</th>
<th>最佳应用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Microsoft Power Apps AI Builder</strong></td>
<td>极高</td>
<td>中高</td>
<td>微软生态深度集成</td>
<td>按用户/按容量</td>
<td>企业内部应用、业务流程自动化</td>
</tr>
<tr>
<td><strong>Google AppSheet AI</strong></td>
<td>极高</td>
<td>高</td>
<td>Google Workspace集成</td>
<td>免费版/商业版</td>
<td>轻量级应用、团队协作工具</td>
</tr>
<tr>
<td><strong>OutSystems AI</strong></td>
<td>高</td>
<td>极高</td>
<td>企业系统集成</td>
<td>按用户订阅</td>
<td>复杂企业应用、数字化转型</td>
</tr>
<tr>
<td><strong>Appian AI</strong></td>
<td>高</td>
<td>极高</td>
<td>流程自动化集成</td>
<td>按用户订阅</td>
<td>业务流程优化、客户体验提升</td>
</tr>
<tr>
<td><strong>Zapier AI Actions</strong></td>
<td>极高</td>
<td>中</td>
<td>5000+应用集成</td>
<td>分层定价</td>
<td>跨应用自动化、工作流优化</td>
</tr>
<tr>
<td><strong>Adalo AI</strong></td>
<td>极高</td>
<td>中</td>
<td>基础API集成</td>
<td>分层定价</td>
<td>移动应用、简单web应用</td>
</tr>
</tbody></table>
<h3 id="低代码平台的AI赋能"><a href="#低代码平台的AI赋能" class="headerlink" title="低代码平台的AI赋能"></a>低代码平台的AI赋能</h3><p>2025年的低代码/无代码平台通过AI技术实现了以下突破：</p>
<ol>
<li><strong>自然语言开发</strong>：通过自然语言描述即可生成应用代码和逻辑</li>
<li><strong>智能UI设计</strong>：自动生成符合用户体验的界面设计</li>
<li><strong>业务流程自动化</strong>：自动识别和优化业务流程</li>
<li><strong>智能测试与部署</strong>：自动化测试和部署流程，确保应用质量</li>
</ol>
<h2 id="五、AI开发工具选择指南：如何找到最适合的解决方案-🧐"><a href="#五、AI开发工具选择指南：如何找到最适合的解决方案-🧐" class="headerlink" title="五、AI开发工具选择指南：如何找到最适合的解决方案 🧐"></a>五、AI开发工具选择指南：如何找到最适合的解决方案 🧐</h2><p>在众多的AI开发工具中，如何选择最适合自己需求的解决方案？以下是2025年的AI开发工具选择指南：</p>
<h3 id="1-明确开发目标与场景"><a href="#1-明确开发目标与场景" class="headerlink" title="1. 明确开发目标与场景"></a>1. 明确开发目标与场景</h3><p>首先要明确你的开发目标和应用场景，不同的工具在不同场景下有各自的优势：</p>
<ul>
<li><strong>企业级应用开发</strong>：选择GitHub Copilot Pro、AWS CodeWhisperer X等企业级工具</li>
<li><strong>AI模型研究</strong>：选择PyTorch、JAX/Flax等研究友好的框架</li>
<li><strong>快速原型开发</strong>：选择低代码/无代码平台或Hugging Face等开箱即用的工具</li>
</ul>
<h3 id="2-评估团队技术能力"><a href="#2-评估团队技术能力" class="headerlink" title="2. 评估团队技术能力"></a>2. 评估团队技术能力</h3><p>根据团队的技术能力选择合适的工具：</p>
<ul>
<li><strong>专业AI团队</strong>：可以选择功能强大但学习曲线较陡的工具，如TensorFlow、PyTorch等</li>
<li><strong>全栈开发团队</strong>：可以选择集成度高、易用性好的工具，如Hugging Face、LangChain等</li>
<li><strong>业务团队</strong>：建议选择低代码/无代码平台，如Power Apps AI Builder、AppSheet AI等</li>
</ul>
<h3 id="3-考虑成本效益"><a href="#3-考虑成本效益" class="headerlink" title="3. 考虑成本效益"></a>3. 考虑成本效益</h3><p>AI开发工具的成本差异很大，需要进行成本效益分析：</p>
<ul>
<li><strong>开源工具</strong>：初始成本低，但可能需要更多的定制和维护工作</li>
<li><strong>商业工具</strong>：初始成本高，但通常提供更全面的支持和更丰富的功能</li>
<li><strong>云服务</strong>：按需付费，灵活度高，但长期使用成本可能较高</li>
</ul>
<h3 id="4-关注生态系统与集成性"><a href="#4-关注生态系统与集成性" class="headerlink" title="4. 关注生态系统与集成性"></a>4. 关注生态系统与集成性</h3><p>评估工具的生态系统和与现有系统的集成能力：</p>
<ul>
<li><strong>企业现有技术栈</strong>：优先选择能与现有技术栈良好集成的工具</li>
<li><strong>第三方服务支持</strong>：评估工具支持的第三方服务数量和质量</li>
<li><strong>社区活跃度</strong>：选择社区活跃的工具，获取更多的支持和资源</li>
</ul>
<h2 id="六、未来展望：AI开发工具的发展趋势-🔮"><a href="#六、未来展望：AI开发工具的发展趋势-🔮" class="headerlink" title="六、未来展望：AI开发工具的发展趋势 🔮"></a>六、未来展望：AI开发工具的发展趋势 🔮</h2><p>展望未来，AI开发工具将继续向更加智能化、自动化和个性化的方向发展：</p>
<h3 id="1-多模态开发环境"><a href="#1-多模态开发环境" class="headerlink" title="1. 多模态开发环境"></a>1. 多模态开发环境</h3><p>未来的AI开发环境将支持同时处理文本、代码、图像、音频等多种模态的信息，提供更加丰富和直观的开发体验。</p>
<h3 id="2-自适应开发助手"><a href="#2-自适应开发助手" class="headerlink" title="2. 自适应开发助手"></a>2. 自适应开发助手</h3><p>AI开发助手将变得更加智能，能够根据开发者的工作习惯、技能水平和项目需求提供个性化的建议和帮助。</p>
<h3 id="3-全生命周期自动化"><a href="#3-全生命周期自动化" class="headerlink" title="3. 全生命周期自动化"></a>3. 全生命周期自动化</h3><p>从需求分析、系统设计到代码实现、测试部署，AI将实现开发全生命周期的自动化，大幅提升开发效率。</p>
<h3 id="4-协同式开发体验"><a href="#4-协同式开发体验" class="headerlink" title="4. 协同式开发体验"></a>4. 协同式开发体验</h3><p>AI将促进开发者之间的协作，帮助团队更好地共享知识、解决问题和优化流程。</p>
<h3 id="5-安全与合规内置"><a href="#5-安全与合规内置" class="headerlink" title="5. 安全与合规内置"></a>5. 安全与合规内置</h3><p>未来的AI开发工具将内置安全和合规功能，在开发过程中自动检测和预防安全问题，确保应用符合相关法规要求。</p>
<h2 id="写在最后：与AI共同进化，拥抱开发新范式-💃"><a href="#写在最后：与AI共同进化，拥抱开发新范式-💃" class="headerlink" title="写在最后：与AI共同进化，拥抱开发新范式 💃"></a>写在最后：与AI共同进化，拥抱开发新范式 💃</h2><p>2025年的AI开发工具已经不再是简单的辅助工具，而是成为开发者的智能伙伴和协作对象。面对这一变革，我们应该保持开放的心态，积极学习和适应新的工具和方法，同时也要保持对核心技术的掌握和对业务本质的理解。</p>
<p>选择合适的AI开发工具，不仅能够提升开发效率，更能帮助我们释放创造力，专注于更有价值的工作。在这个AI与人类协作的新时代，让我们共同进化，拥抱开发新范式！</p>
<p>你在2025年使用了哪些AI开发工具？有什么宝贵的使用经验？欢迎在评论区留言分享！</p>
<p>Happy AI Coding！🤖💻✨</p>
]]></content>
      <tags>
        <tag>智能编程</tag>
        <tag>对比分析</tag>
        <tag>AI开发工具</tag>
        <tag>2025趋势</tag>
      </tags>
  </entry>
  <entry>
    <title>算法时间复杂度的推导</title>
    <url>/2021/01/10/algorithm/derivation-of-algorithm-time-complexity/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>大O表示法是最常用的表示算法时间复杂度的表示法。</p>
<p>本篇博客我们将推导各种算法的大O表示法。</p>
<span id="more"></span>

<h2 id="示例1：查找前n个数字的总和。"><a href="#示例1：查找前n个数字的总和。" class="headerlink" title="示例1：查找前n个数字的总和。"></a>示例1：查找前n个数字的总和。</h2><p>在此示例中，我们必须找到前n个数字的总和。例如，如果n = 4，则输出应为1 + 2 + 3 + 4 =10。如果n = 5，则输出应为1 + 2 + 3 + 4 + 5 =15。让我们尝试各种解决方案此代码，然后尝试比较所有这些代码。</p>
<h3 id="O（1）解决方案"><a href="#O（1）解决方案" class="headerlink" title="O（1）解决方案"></a>O（1）解决方案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * (n+<span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// 一条语句执行需要花费恒定的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，只有一条语句，并且我们知道一条语句执行需要花费恒定的时间。基本思想是，如果该语句花费的时间恒定，则所有输入大小所花费的时间相同，我们将其表示为 <strong>O（1）</strong>。</p>
<h3 id="O（n）解决方案"><a href="#O（n）解决方案" class="headerlink" title="O（n）解决方案"></a>O（n）解决方案</h3><p>在此解决方案中，我们将运行从1到n的循环，并将这些值添加到名为“ sum”的变量中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// -----------------&gt; 需要花费恒定的时间 假设为 &quot;c1&quot;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">// --&gt; 在这里，i的创建将花费一定的恒定时间，而比较和增量将发生n次（c2 * n）</span></span><br><span class="line">        sum = sum + i; <span class="comment">// -----------&gt; 这条语句将会被执行 n 次，假如本条语句花费的常量时间为 c3，则总时间为 c3*n</span></span><br><span class="line">    <span class="keyword">return</span> sum; <span class="comment">// ------------------&gt; 需要花费恒定的时间 假设为 &quot;c4&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 总时间花费 = 所有语句花费的时间总和</span></span><br><span class="line"><span class="comment">* 在我们的这个例子中，有3条语句花费的都是常量时间。 例如： &quot;sum = 0&quot;, &quot;i = 0&quot;, 和 &quot;return sum&quot;, 我们把所有的常量时间加起来，设其为 c</span></span><br><span class="line"><span class="comment">* 除此之外, 我们有两条语句将会执行 n 次。例如： &quot;i &lt; n(in real n+1)&quot; and &quot;sum = sum  + i&quot; 总花费的时间为 c2*n + c3*n = c0*n</span></span><br><span class="line"><span class="comment">* 所以总的时间花费 = c0*n + c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>上面代码的大O表示法是O（c0 * n）+ O（c），其中 c 和 c0 是常数。因此，总时间复杂度可以写成 <strong>O（n）</strong>。</p>
<h3 id="O（n²）解决方案"><a href="#O（n²）解决方案" class="headerlink" title="O（n²）解决方案"></a>O（n²）解决方案</h3><p>在此解决方案中，我们将求和变量“ i”的值增加一倍，即对于i = 1，求和变量将增加一次，即sum =1。对于i = 2，求和变量将被递增两次。因此，让我们看看解决方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// ---------------------&gt; 常量时间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            sum++; <span class="comment">// -------------------&gt; 将会执行 [n * (n + 1) / 2]</span></span><br><span class="line">    <span class="keyword">return</span> sum; <span class="comment">// ----------------------&gt; 常量时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 总时间 = 所有语句花费的时间总和</span></span><br><span class="line"><span class="comment">* 最多次执行的语句是 &quot;sum++&quot; 将会执行 n * (n + 1) / 2 次</span></span><br><span class="line"><span class="comment">* 所以，总的复杂度是: c1*n² + c2*n + c3 [c1 是 n² 的常数项, c2 是 n 的常数项, c3 是其他语句花费的常量时间]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>上面算法的大O符号是O（c1 *n²）+ O（c2 * n）+ O（c3）。</p>
<p>由于我们在大O中采用较高的增长顺序。因此，我们的表达式将简化为 <strong>O（n²）</strong>。</p>
<p>因此，到目前为止，我们已经针对同一问题看到了3种解决方案。现在，当你找到第一个“ n”个数字的总和时，你更喜欢使用哪种算法？</p>
<p>我们希望使用O（1）解决方案，因为该算法所花费的时间将是恒定的，而与输入大小无关。</p>
<h2 id="示例2：搜索算法"><a href="#示例2：搜索算法" class="headerlink" title="示例2：搜索算法"></a><strong>示例2：搜索算法</strong></h2><p>在博客的这一部分中，我们将找到各种搜索算法（例如线性搜索和二分查找）的时间复杂度。</p>
<h3 id="线性搜寻"><a href="#线性搜寻" class="headerlink" title="线性搜寻"></a>线性搜寻</h3><p>在线性搜索中，我们将有一个数组，并且还给了一个元素。我们需要在数组中找到该元素的索引。例如，如果我们的数组是[8，10，3，2，9]，并且我们想找到位置“ 3”，那么我们的输出应该是2（基于0的索引）。以下是相同的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @type of arr: integer array</span></span><br><span class="line"><span class="comment">* @type of n: integer(denoting size of arr)</span></span><br><span class="line"><span class="comment">* @type of k: integer(element to be searched)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linearSearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">if</span>(arr[i] == k)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* [说明]</span></span><br><span class="line"><span class="comment">* i = 0 ------------&gt; 将会被执行1次</span></span><br><span class="line"><span class="comment">* i &lt; n ------------&gt; 将会被执行 n+1 次</span></span><br><span class="line"><span class="comment">* i++ --------------&gt; 将会被执行 n 次</span></span><br><span class="line"><span class="comment">* if(arr[i] == k) --&gt; 将会被执行 n 次</span></span><br><span class="line"><span class="comment">* return i ---------&gt; 将会被执行1次(如果 &quot;k&quot; 在数组中)</span></span><br><span class="line"><span class="comment">* return -1 --------&gt; 将会被执行1次(如果 &quot;k&quot; 不再数组中)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>线性搜索在最坏情况下的时间复杂度为 <strong>O（n）</strong>，因为在最坏情况下，“ <em>if（arr [i] == k）</em> ”语句将执行“ n”次。</p>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>在二分查找中，我们将拥有一个排序的数组，并将给出一个元素。我们必须找到该元素在数组中的位置。为此，我们遵循以下步骤：</p>
<ol>
<li>通过找到数组的中间元素，将整个数组分为两部分。</li>
<li>查找中间元素是否等于要搜索的元素“ k”。如果相等，则返回该值。</li>
<li>如果中间元素不等于元素“ k”，则查找元素“ k”是否大于或小于中间元素。</li>
<li>如果元素“ k”大于中间元素，那么我们将在数组的[mid + 1至n]部分执行二分查找；如果元素“ k”小于中间元素，则我们将在数组的[0至mid-1]部分执行二分查找。</li>
<li>同样，我们将从步骤2开始重复。</li>
</ol>
<p>让我们编写相同的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @type of arr: integer array</span></span><br><span class="line"><span class="comment">* @type of left: integer(left most index of arr)</span></span><br><span class="line"><span class="comment">* @type of right: integer(right most index of arr)</span></span><br><span class="line"><span class="comment">* @type of k: integer(element to be searched)</span></span><br><span class="line"><span class="comment">* @return type: integer(index of element k(if found), otherwise return -1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="comment">// 查找中间元素</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="comment">// 判断 k 是否等于中间元素</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == k) </span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 如果 k 等于中间元素，那么就返回下标</span></span><br><span class="line">        <span class="comment">// 如果 k 大于中间元素,忽略数组的左半部分</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; k) </span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 更新左侧，右侧将保持不变</span></span><br><span class="line">        <span class="comment">// 如果 k 小于中间元素, 忽略数组的右半部分</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 更新右侧，左侧将保持不变</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 如果没有找到，则返回 -1 </span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二分查找算法的时间复杂度</strong></p>
<ul>
<li>为了找到元素“ k”，假设在“第i次”迭代之后，二分查找的迭代停止，即数组的大小变为1。此外，每次迭代后，我们将数组的大小减小一半。</li>
<li>因此，在第一次迭代中，数组的大小为“ n”，在第二次迭代中，数组的大小为“ n / 2”，在第三次迭代中，数组的大小为“（n / 2）/ 2 = n / 2²”，在第4次迭代中，数组的大小为“（（（n / 2）/ 2）/ 2 = n /2³”，依此类推。</li>
<li>因此，在第 <strong>i</strong> 次迭代之后，数组的大小将为n / 2 ^ i。同样，在第 <strong>i</strong> 次迭代之后，数组的长度将变为1。因此，以下关系应成立：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=&gt; n/2^i = 1</span><br><span class="line">=&gt; n = 2^i</span><br><span class="line">=&gt; log2 (n) = log2 (2^i)    [applying log2 both sides]</span><br><span class="line">=&gt; log2 (n) = i * log2 (2)  </span><br><span class="line">=&gt; i = log2 (n)             [as logn (n) = 1]</span><br></pre></td></tr></table></figure>

<p>因此，二分查找算法的最坏情况时间复杂度是 <strong>log2（n）</strong>。</p>
<h2 id="示例3：排序算法"><a href="#示例3：排序算法" class="headerlink" title="示例3：排序算法"></a>示例3：排序算法</h2><p>在博客的这一部分中，我们将学习各种排序算法的时间复杂度。排序算法用于按升序或降序对给定数组进行排序。因此，让我们从选择排序开始。</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>在选择排序中，在第一遍中，我们找到数组的最小元素并将其放在第一位。在第二遍中，我们找到数组的第二个最小元素并将其放在第二位，依此类推。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @type of arr: integer array</span></span><br><span class="line"><span class="comment">* @type of n: integer(length of arr)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">// move from index 0 to n-1  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++)  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// finding the minimum element  </span></span><br><span class="line">        <span class="keyword">int</span> minIndex = i;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; j++)  </span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])  </span><br><span class="line">                minIndex = j;  </span><br><span class="line">        <span class="comment">// Swap the found minimum element with the ith element  </span></span><br><span class="line">        swap(arr[minIndex], arr[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择排序的最坏情况时间复杂度是<em><strong>O（n²）</strong></em>。</p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>在冒泡排序中，我们比较相邻元素并将最小元素放在最大元素之前。例如，如果两个相邻元素为[4，1]，则最终输出将为[1，4]。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @type of arr: integer array</span></span><br><span class="line"><span class="comment">* @type of n: integer(length of arr)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">// move from index 0 to n-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++)        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n-i-<span class="number">1</span>; j++)  </span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])          <span class="comment">// comparing adjacent elements</span></span><br><span class="line">                swap(arr[j], arr[j+<span class="number">1</span>]);   <span class="comment">// swapping elements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>冒泡排序的最坏情况时间复杂度是 <strong>O（n²）</strong>。</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>在插入排序中，我们从第一个元素开始，然后检查该元素是否小于第0个元素。如果较小，则将其放在所需位置，否则检查第二个元素。如果第二个元素小于第0个元素或第一个元素，则将第二个元素放在所需的位置，依此类推。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @type of arr: integer array</span></span><br><span class="line"><span class="comment">* @type of n: integer(length of arr)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> key = arr[i];  <span class="comment">// select value to be inserted</span></span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;     <span class="comment">// position where number is to be inserted</span></span><br><span class="line">        <span class="comment">// check if previous no. is larger than value to be inserted</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) </span><br><span class="line">        &#123;  </span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];  </span><br><span class="line">            j = j - <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// changing the value</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = key;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>插入排序的最坏情况下时间复杂度为 <strong>O（n²）</strong>。</p>
<h3 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h3><p>合并排序使用分而治之技术（你将在本数据结构系列中了解有关分而治之的更多信息）。合并排序涉及以下步骤：</p>
<ul>
<li>通过找到中间元素，将数组分成两半。</li>
<li>在上半部分和下半部分调用合并排序功能。</li>
<li>现在，通过调用Merge函数合并两个部分。</li>
</ul>
<p>在这里，我们将使用递归：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp[end - start + <span class="number">1</span>];        <span class="comment">// creating temporary array</span></span><br><span class="line">	<span class="keyword">int</span> i = start, j = mid+<span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= end)       <span class="comment">// traverse and add smaller of both elements in temp </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i] &lt;= arr[j]) </span><br><span class="line">		&#123;</span><br><span class="line">			temp[k] = arr[i];</span><br><span class="line">			k += <span class="number">1</span>; i += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			temp[k] = arr[j];</span><br><span class="line">			k += <span class="number">1</span>; j += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// add the elements left in the 1st interval</span></span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid) </span><br><span class="line">	&#123;</span><br><span class="line">		temp[k] = arr[i];</span><br><span class="line">		k += <span class="number">1</span>; i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// add the elements left in the 2nd interval</span></span><br><span class="line">	<span class="keyword">while</span>(j &lt;= end) </span><br><span class="line">	&#123;</span><br><span class="line">		temp[k] = arr[j];</span><br><span class="line">		k += <span class="number">1</span>; j += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// updating the original array to have the sorted elements</span></span><br><span class="line">	<span class="keyword">for</span>(i = start; i &lt;= end; i += <span class="number">1</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = temp[i - start]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @type of arr: integer array</span></span><br><span class="line"><span class="comment">* @type of start: starting index of arr</span></span><br><span class="line"><span class="comment">* @type of end: eningd index of arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(start &lt; end) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>; <span class="comment">// finding middle element</span></span><br><span class="line">		mergeSort(arr, start, mid);  <span class="comment">// calling mergeSort for first half</span></span><br><span class="line">		mergeSort(arr, mid+<span class="number">1</span>, end);  <span class="comment">// calling mergeSort for second half</span></span><br><span class="line">		merge(arr, start, mid, end); <span class="comment">// calling merge function to merge the arrays</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>合并排序的最坏情况下的时间复杂度为 <strong>O（n log（n））</strong>。</p>
<p>下表显示了各种排序算法的最佳情况，平均情况和最坏情况的时间复杂度：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">|Sorting Algorithm |    Best Case     |   Average Case   |    Worst Case    |</span><br><span class="line">|------------------|------------------|------------------|------------------|</span><br><span class="line">|Selection Sort    |       Ω(n²)      |      θ(n²)       |       O(n²)      |</span><br><span class="line">|Bubble Sort       |       Ω(n)       |      θ(n²)       |       O(n²)      |</span><br><span class="line">|Insertion Sort    |       Ω(n)       |      θ(n²)       |       O(n²)      |</span><br><span class="line">|Merge Sort        |   Ω(n logn(n))   |   θ(n logn(n))   |   O(n logn(n))   |</span><br><span class="line">|Quick Sort        |   Ω(n logn(n))   |   θ(n logn(n))   |       O(n²)      |</span><br><span class="line">|Heap Sort         |   Ω(n logn(n))   |   θ(n logn(n))   |   O(n logn(n))   |</span><br><span class="line">|Radix Sort        |      Ω(nk)       |      θ(nk)       |       O(nk)      |</span><br><span class="line">|Bucket Sort       |     Ω(n + k)     |     θ(n + k)     |       O(n²)      |</span><br><span class="line">-----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>在此博客中，我们了解了算法的时间和空间复杂性。我们看到了如何使用这两个因素来分析算法的效率。因此，基本上，时间和空间之间需要权衡。希望本篇博客对你有所帮助。</p>
<p>原文链接: <span class="exturl" data-url="aHR0cHM6Ly9hZnRlcmFjYWRlbXkuY29tL2Jsb2cvdGltZS1hbmQtc3BhY2UtY29tcGxleGl0eS1hbmFseXNpcy1vZi1hbGdvcml0aG0=">https://afteracademy.com/blog/time-and-space-complexity-analysis-of-algorithm<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法的时间和空间复杂度分析</title>
    <url>/2021/01/07/algorithm/time-and-space-complexity-analysis-of-algorithm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><p>在计算机科学中，每当我们要解决一些计算问题时，我们都会定义一组解决该问题需要遵循的步骤。这些步骤统称为算法。</p>
<h2 id="如何区分算法的好坏？"><a href="#如何区分算法的好坏？" class="headerlink" title="如何区分算法的好坏？"></a>如何区分算法的好坏？</h2><p>针对特定问题可以有很多算法。那么，如何区分算法的好坏呢？</p>
<p>让我们了解一个好的算法的属性：</p>
<ul>
<li><strong>正确性：</strong>如果算法对于每组输入都以正确的输出停止运行，则该算法被认为是正确的。如果没有为任何特定的输入集获得正确的输出，则你的算法是错误的。</li>
<li><strong>有限性：</strong>通常，人们会忽略这一点，但这是算法评估中的重要因素之一。该算法必须始终在有限数量的步骤后终止。例如，在递归和循环的情况下，你的算法应终止，否则最终将分别产生堆栈溢出和无限循环的情况。</li>
<li><strong>效率：</strong>始终使用高效算法。效率一词是指：<ol>
<li>该算法应有效地使用系统可用的资源。</li>
<li>计算时间（生成对应于特定输入的输出所花费的时间）应尽可能短。</li>
<li>算法使用的内存也应尽可能少。通常，在计算时间和内存之间需要权衡。因此，我们需要确定时间是否比空间重要，反之亦然，然后相应地编写算法。</li>
</ol>
</li>
</ul>
<p>因此，我们已经看到了可用于评估算法的三个因素。在这三个因素中，最重要的因素是算法的效率。</p>
<span id="more"></span>

<h2 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h2><p>算法的效率主要由两个因素定义，即空间和时间。一种好的算法是占用更少的时间和更少的空间，但是不可能一直这样。在时间和空间之间需要权衡。如果要减少时间，则空间可能会增加。同样，如果要减少空间，则时间可能会增加。因此，你必须在空间或时间上妥协。让我们进一步了解算法的时空复杂度。</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>算法的空间复杂度表示对于各种输入大小，算法用于其工作所使用或需要的总空间。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    list.add(i); </span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们正在循环向列表中加入数据。因此，上述代码的空间复杂度约为“ n”，即，如果n增加，则空间需求也将相应增加。</p>
<p>即使在创建变量时，也需要一些空间来运行算法。算法所需的所有空间统称为算法的空间复杂度。</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度是算法针对<strong>输入大小</strong>执行的用于完成其任务的操作数（考虑到每个操作花费相同的时间量）。以最少数量的操作执行任务的算法被认为是效率最高的算法。</p>
<blockquote>
<p>时间复杂度是指执行这个算法所需要的计算工作量，其复杂度反映了程序执行时间<strong>「随输入规模增长而增长的量级」</strong>，在很大程度上能很好地反映出算法的优劣与否。一个算法花费的时间与算法中语句的<strong>「执行次数成正比」</strong>，执行次数越多，花费的时间就越多。一个算法中的执行次数称为语句频度或时间频度，记为T(n)，其中n称为问题的规模，当n不断变化时，它所呈现出来的规律，我们称之为时间复杂度。比如：T(n) = 3n^2与 T(n) = 5n^2*3n，虽然算法的时间频度不一样，但他们的时间复杂度却是一样的，<strong>「时间复杂度只关注最高数量级，且与之系数也没有关系」</strong>。</p>
</blockquote>
<p>算法所花费的时间还取决于<strong>你所使用的系统的计算速度</strong>，但是我们忽略了这些外部因素，并且仅考虑相对于输入大小，执行特定语句的次数。假设执行一条语句需要的时间为1秒，那么执行n条语句要花费的时间为n秒。</p>
<p>假设你遇到一个问题，并且针对同一问题编写了三种算法。现在，你需要从这三种算法中选择一种。你会怎么做？</p>
<ul>
<li>你可以做的一件事就是在三台不同的计算机上运行所有三种算法，提供相同的输入，找到所有三种算法所花费的时间，然后选择花费最少时间的一种。可以吗 不，所有系统都可能使用某些不同的处理器。因此，处理速度可能会有所不同。因此，我们不能使用这种方法来找到最有效的算法。</li>
<li>你可以做的另一件事是在同一台计算机上运行这三种算法，并尝试找出算法花费的时间并选择最佳的时间。但是在这里，你可能会得到错误的结果，因为在执行程序时，还有其他与你的程序一起执行的事情，因此你可能会获得错误的时间。</li>
</ul>
<p><strong>注意：</strong>此处要注意的一件事是，我们正在查找同一输入的不同算法所花费的时间，因为如果我们更改输入，那么与效率较低的算法相比，有效的算法可能会花费更多的时间，因为输入大小两种算法都不同。</p>
<p>因此，我们已经看到，无法通过计算在特定系统中执行算法所花费的时间来判断算法。我们需要一些标准的符号来分析算法。我们使用<em><strong>渐近符号</strong></em>来分析任何算法，并在此基础上找到最有效的算法。在这里，以渐近符号表示，我们不考虑系统配置，而是考虑输入的<strong>增长顺序</strong>。我们尝试找出在增加/减少输入大小之后算法所花费的时间或空间将如何增加/减少。</p>
<p>有三种渐近符号用于表示算法的时间复杂度。他们是：</p>
<ul>
<li><strong>Θ记号（theta）</strong></li>
<li><strong>大O表示法</strong></li>
<li><strong>Ω表示法</strong></li>
</ul>
<p>在了解这三种渐近符号之前，我们应该了解算法的最佳，平均和最差情况。</p>
<h3 id="最佳情况，平均情况和最坏情况"><a href="#最佳情况，平均情况和最坏情况" class="headerlink" title="最佳情况，平均情况和最坏情况"></a>最佳情况，平均情况和最坏情况</h3><p>对于不同的输入，算法可以具有不同的时间。某些输入可能需要1秒，其他输入可能需要10秒。</p>
<blockquote>
<p><strong>例如：</strong>我们有一个名为“ <em>arr”的</em>数组和一个整数“ <em>k</em> ”。我们需要查找数组“ <em>arr</em> ”中是否存在整数“ <em>k</em> ” ？如果整数存在，则返回1，其他返回0。尝试为该问题创建算法。</p>
</blockquote>
<p>可以从上述问题中提取以下信息：</p>
<ul>
<li><strong>输入：</strong>这里的输入是一个大小为n的整数数组，我们需要在该数组中搜索一个整数k。</li>
<li><strong>输出：</strong>如果在数组中找到元素“ k”，则返回1，否则返回0。</li>
</ul>
<p>现在，上述问题的一种可能解决方案是线性搜索，即遍历数组的每个元素，并将该元素与“ k”进行比较。如果等于“ k”，则返回1，否则，继续比较数组中的更多元素，如果到达数组的末尾却没有找到任何元素，则返回0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> arr integer 数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> n 数组长度</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> k 要查找的值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchK</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (arr[i] == k)</span><br><span class="line">              <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>分析上述代码</p>
<ul>
<li>i = 0  执行一次</li>
<li>i &lt; n  执行 n+1 次</li>
<li>i++    执行 n 次</li>
<li>if(arr[i] == k) 执行 n 次(如果”k”没在数组里)</li>
<li>return 1  执行 1 次(如果”k”在数组里)</li>
<li>return 0  执行 1 次(如果”k”没在数组里)</li>
</ul>
<p>代码中的每个语句都需要固定的时间，我们设花费的时间为“ C”。因此，无论何时声明一个整数，更改某些整数或其他变量的值都需要花费固定时间，而比较两个变量也需要花费固定时间。因此，如果一条语句花费的时间为“ C”，而执行了“ N”次，则它将花费C * N的时间。现在，考虑一下我们刚刚编写的上述算法的以下输入：</p>
<p><strong>注意：</strong>这里我们假设每个语句要花费1秒的时间来执行。</p>
<ul>
<li>如果输入数组为[1、2、3、4、5]，并且你想查找数组中是否存在“ 1”，则代码的 if 条件将执行1次，并找到元素1在数组中。因此，此处的if条件将花费1秒。</li>
<li>如果输入数组为[1、2、3、4、5]，并且你想查找数组中是否存在“ 3”，则代码的 if 条件将执行3次，并找到元素3在数组中。因此，此处的if条件将花费3秒。</li>
<li>如果输入数组为[1、2、3、4、5]，并且你想查找数组中是否存在“ 6”，则代码的 if 条件将执行5次，并找到数组中元素6不存在，在这种情况下算法将返回0。因此，此处的if条件需要5秒钟。</li>
</ul>
<p>如你所见，对于相同的输入数组，对于“ k”的不同值，我们具有不同的时间。因此，这可以分为三种情况：</p>
<ul>
<li><strong>最佳情况：</strong>这是算法运行时间的下限。我们必须知道导致最少数量的操作执行的情况。在上面的示例中，我们的数组为[1、2、3、4、5]，我们正在查找数组中是否存在“ 1”。因此，在这里，仅需进行一次比较，你就会知道你的元素存在于数组中。因此，这是算法的最佳情况。</li>
<li><strong>平均情况：</strong>我们计算所有可能输入的运行时间，将所有计算出的值相加，然后将总和除以输入总数。我们必须知道（或预测）案件的分布。</li>
<li><strong>最坏的情况：</strong>这是算法运行时间的上限。我们必须知道导致最大数量的操作执行的情况。在我们的示例中，最坏的情况是给定的数组为[1、2、3、4、5]，然后尝试查找数组中是否存在元素“ 6”。此处，循环的if条件将执行5次，然后算法将给出“ 0”作为输出。</li>
</ul>
<p>因此，我们了解了算法的最佳，平均和最差情况。现在，让我们回到渐近符号中，我们看到我们使用三种渐进符号来表示算法的复杂性，即Θ表示法（theta），Ω表示法，Big O表示法。</p>
<p><strong>注意：</strong>在渐进分析中，我们通常处理较大的输入量。</p>
<h3 id="Θ记号（theta）"><a href="#Θ记号（theta）" class="headerlink" title="Θ记号（theta）"></a>Θ记号（theta）</h3><p>Θ符号用于查找算法的平均界限，即它定义了上限和下限，你的算法将位于这些级别之间。</p>
<h3 id="Ω表示法"><a href="#Ω表示法" class="headerlink" title="Ω表示法"></a>Ω表示法</h3><p>Ω表示算法的下限，即算法花费的时间不能低于此时间。换句话说，这是算法返回结果的最快时间。提供最佳情况输入时，算法花费的时间。</p>
<h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p>大O表示法定义了任何算法的上限，即算法所花费的时间不能超过此时间。换句话说，我们可以说大O表示法表示算法花费的最大时间或算法的最坏情况下的时间复杂度。因此，对于算法的时间复杂度而言，大O表示法是最常用的表示法。</p>
<blockquote>
<p>如果一个问题的规模是n，解这一问题的某一算法所需要的时间为T(n)。T(n)称为这一算法的“时间复杂度”。当输入量n逐渐加大时，时间复杂度的极限情形称为算法的“渐近时间复杂度”。空间复杂度同理。举个例子，令 f(n) = 2n^2✖️3n，O(f(n)) = O(2n^2 ✖️n)=O(n^2)。</p>
</blockquote>
<p>原文链接: <span class="exturl" data-url="aHR0cHM6Ly9hZnRlcmFjYWRlbXkuY29tL2Jsb2cvdGltZS1hbmQtc3BhY2UtY29tcGxleGl0eS1hbmFseXNpcy1vZi1hbGdvcml0aG0=">https://afteracademy.com/blog/time-and-space-complexity-analysis-of-algorithm<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>30篇文学名著开场白</title>
    <url>/2018/06/13/book/opening-remarks-of-30-literary-masterpieces/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>生命有限，一个人不能经历太多太远太复杂，但读一部名著却可以让人犹如走过一次生命的轮回，其最深的滋味也往往在开始和结束处。尤其是开场白，它们或将人深深吸引，或令人陷入深思，使读者欲罢不能，往往成为整部著作的神韵所在。</p>
<ol>
<li>《三国演义》明·罗贯中<br>滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。 白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。<br>——调寄《临江仙》斋<br>话说天下大势，分久必合，合久必分。周末七国分争，并入于秦。及秦灭之后，楚、汉分争，又并入于汉。汉朝自高祖斩白蛇而起义，一统天下，后来光武中兴，传至献帝，遂分为三国。<span id="more"></span></li>
<li>《双城记》查尔斯·狄更斯<br>那是最美好的时代，那是最糟糕的时代；那是智慧的年头，那是愚昧的年头；那是信仰的时期，那是怀疑的时期；那是光明的季节，那是黑暗的季节；那是希望的春天，那是失望的冬天；我们全都在直奔天堂，我们全都在直奔相反的方向——简而言之，那时跟现在非常相像，某些最喧嚣的权威坚持要用形容词的最高级来形容它。说它好，是最高级的；说它不好，也是最高级的。</li>
<li>《安娜·卡列尼娜》列夫·托尔斯泰<br>幸福的家庭都是相似的，不幸的家庭各有各的不幸。</li>
<li>《西游记》吴承恩<br>诗曰：<br>混沌未分天地乱，茫茫渺渺无人见。<br>自从盘古破鸿蒙，开辟从兹清浊辨。<br>覆载群生仰至仁，发明万物皆成善。<br>欲知造化会元功，须看《西游释厄传》。</li>
<li>《查太莱夫人的情人》劳伦斯<br>“我们根本就生活在一个悲剧的时代，因此我们不愿惊惶。大灾难已经来临，我们处于废墟之中，我们开始建立一些新的小小的栖息地，怀抱一些新的微小的希望。这是一种颇为艰难的工作。现在没有一条通向未来的康庄大道，但是我们却迂回前进，或攀援障碍而过。不管天翻地覆，我们都得生活。”</li>
<li>《了不起的盖茨比》菲茨杰拉德<br>我年纪还轻、阅历不深的时候，我父亲教导过我一句话，我至今还念念不忘。“每逢你想要批评任何人的时候，”他对我说，“你就记住，这个世界上所有的人，并不是个个都有过你拥有的那些优越条件。”</li>
<li>《复活》列夫托尔斯泰<br>“尽管好几十万人聚居在一小块地方，竭力把土地糟蹋得面目全非，尽管他们肆意把石头砸进地里，不让花草树木生长，尽管他们除尽刚出土的小草，把煤炭和石油烧得烟雾腾腾，尽管他们滥伐树木，驱逐鸟兽，在城市里，春天毕竟还是春天。”</li>
<li>《墨菲》塞缪尔·贝克特<br>太阳照常升起，一切都没有改变。</li>
<li>《彼得潘》詹姆斯·马修·巴利<br>所有的孩子都会长大，只有一个例外。</li>
<li>《半生缘》张爱玲<br>  他和曼桢认识，已经是多年前的事了。算起来倒已经有十四年了──真吓人一跳！马上使他连带地觉得自己老了许多。日子过得真快，尤其对于中年以后的人，十年八年都好象是指顾间的事。可是对于年轻人，三年五载就可以是一生一世。他和曼桢从认识到分手，不过几年的工夫，这几年里面却经过这么许多事情，彷佛把生老病死一切的哀乐都经历到了。</li>
<li>《霍乱时期的爱情》加布里尔·加西亚·马尔克斯<br>  这是不可避免的：苦杏仁的味道总是让他想起注定没有回报的爱情。</li>
<li>《傲慢与偏见》简·奥斯汀<br>  凡是有钱的单身汉，总想娶位太太，这已经成了一条举世公认的真理。这样的单身汉，每逢新搬到一个地方，四邻八舍虽然完全不了解他的性情如何，见解如何，可是，既然这样的一条真理早已在人们心目中根深蒂固，因此人们总是把他看作自己某一个女儿理所应得的一笔财产。</li>
<li>《情人》玛格丽特·杜拉斯<br>  我已经老了，有一天，在一处公共场所的大厅里，有一个男人向我走来。他主动介绍自己，他对我说：“我认识你，永远记得你。那时候，你还很年轻，人人都说你美，现在，我是特地来告诉你，对我来说，我觉得现在你比年轻的时候更美，那时你是年轻女人，与你那时的面貌相比，我更爱你现在备受摧残的面容。”</li>
<li>《洛丽塔》纳博科夫<br>  洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。洛-丽-塔：舌尖向上，分三步，从上颚往下轻轻落在牙齿上。洛-丽-塔。</li>
<li>《第五屠宰场》库特·冯内古特<br>  故事中的所有一切，或多或少都发生过。</li>
<li>《茶花女》小仲马<br>  我认为只有深刻地研究过人，才能创造出人物，如同只有认真地学习了一种语言才能讲它一样。</li>
<li>《生命中不能承受之轻》米兰·昆德拉<br>  尼采常常与哲学家们纠缠一个神秘的“众劫回归”观：想想我们经历过的事情吧，想想它们重演如昨，甚至重演本身无休无止地重演下去！这癫狂的幻念意味着什么呢？</li>
<li>《麦田里的守望者》J.  D.  塞林格<br>  你要是真想听我讲，你想要知道的第一件事可能是我在什么地方出生，我倒楣的童年是怎样度过，我父母在生我之前干些什么，以及诸如此类的大卫科波菲尔式废话，可我老实告诉你，我无意告诉你这一切。</li>
<li>《我的名字叫红》奥尔罕·帕慕克<br>  如今我已是一个死人，成了一具躺在井底的死尸。</li>
<li>《局外人》加缪<br>  今天，妈妈死了。也许是昨天，我不知道。我收到养老院的一封电报，说：“母死。明日葬。专此通知。”这说明不了什么。可能是昨天死的。</li>
<li>《变形记》卡夫卡<br>  一天早晨，格里高尔·萨姆沙从不安的睡梦中醒来，发现自己躺在床上变成了一只巨大的甲虫。</li>
<li>《查密莉雅》艾特玛托夫<br>  这会儿我又一次站在这幅镶着简单画框的小画前面。明天一早我就要动身回家乡去，因此我久久地，出神地望着这幅小画，好像它能够对我说些吉祥的临别赠言似的。</li>
<li>《且听风吟》村上春树<br>  “不存在十全十美的文章，如同不存在彻头彻尾的绝望。”</li>
<li>《追忆似水年华》普鲁斯特<br>  在很长一段时期里，我都是早早就躺下了。有时候，蜡烛才灭，我的眼皮儿随即合上，都来不及咕哝一句：“我要睡着了。”半小时之后，我才想到应该睡觉；这一想，我反倒清醒过来。</li>
<li>《老人与海》海明威<br>  他是个独自在湾流中一条小船上钓鱼的老人，至今已去了84天，一条鱼也没逮住。</li>
<li>《哈克贝里·费恩历险记》马克·吐温<br>  你要是没读过一本叫做《汤姆索亚历险记》的书，你肯定不知道我是谁，不过这没关系。这本书的作者是一个叫马克·吐温的人，他大多讲真话。</li>
<li>《百年孤独》加西亚·马尔克斯<br>  很多年以后，奥雷连诺上校站在行刑队面前，准会想起父亲带他去参观冰块的那个遥远的下午。当时，马孔多是个20户人家的村庄，一座座土房都盖在河岸上，河水清澈，沿着遍布石头的河床流去，河里的石头光滑、洁白，活像史前的巨蛋。</li>
<li>《飘》玛格丽特·米切尔<br>  斯佳丽·奥哈拉长得并不漂亮，但是男人一旦像塔尔顿家孪生兄弟那样给她的魅力迷住往往就不大理会这点。</li>
<li>《呼啸山庄》艾米莉·勃朗特<br>  1801年。我刚刚拜访过我的房东回来——就是那个将要给我惹麻烦的孤独的邻居。</li>
<li>《日瓦戈医生》帕斯捷尔纳克<br>  他们走着，不停地走，一面唱着《永志不忘》，歌声休止的时候，人们的脚步、马蹄和微风仿佛接替着唱起这支哀悼的歌。</li>
</ol>
]]></content>
      <categories>
        <category>文摘</category>
        <category>Repost</category>
      </categories>
      <tags>
        <tag>文摘</tag>
        <tag>Repost</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生技术实践：从理论到落地的完整指南</title>
    <url>/2022/06/15/cloud-native/2022-cloud-native-practices/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="云原生技术实践：从理论到落地的完整指南-☁️"><a href="#云原生技术实践：从理论到落地的完整指南-☁️" class="headerlink" title="云原生技术实践：从理论到落地的完整指南 ☁️"></a>云原生技术实践：从理论到落地的完整指南 ☁️</h1><p>大家好！👋 在当今这个数字化转型的时代，云原生技术已经成为企业技术架构的重要选择。作为一名在云原生领域深耕多年的实践者，我想分享一些从理论到落地的经验和见解。今天，我们就来一起探索云原生技术的魅力吧！🚀</p>
<h2 id="什么是云原生？核心概念解析-🔍"><a href="#什么是云原生？核心概念解析-🔍" class="headerlink" title="什么是云原生？核心概念解析 🔍"></a>什么是云原生？核心概念解析 🔍</h2><p>云原生（Cloud Native）是一种构建和运行应用程序的方法，它充分利用了云计算的优势。根据CNCF（云原生计算基金会）的定义，云原生技术栈主要包含以下几个核心部分：</p>
<h3 id="1-容器化-📦"><a href="#1-容器化-📦" class="headerlink" title="1. 容器化 📦"></a>1. 容器化 📦</h3><p>容器化是云原生的基础，它解决了”代码在我机器上能运行”的问题。Docker作为容器技术的代表，通过将应用及其依赖打包到标准化单元中，实现了环境的一致性和快速部署。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个简单的Dockerfile示例</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-微服务架构-🧩"><a href="#2-微服务架构-🧩" class="headerlink" title="2. 微服务架构 🧩"></a>2. 微服务架构 🧩</h3><p>将单体应用拆分为多个独立、可独立部署的服务。每个服务都专注于自己的业务领域，通过API进行通信。这种架构提高了系统的灵活性和可维护性。</p>
<h3 id="3-容器编排-🎛️"><a href="#3-容器编排-🎛️" class="headerlink" title="3. 容器编排 🎛️"></a>3. 容器编排 🎛️</h3><p>随着容器数量的增加，手动管理变得不现实。Kubernetes作为容器编排的事实标准，提供了自动部署、扩展和管理容器化应用的能力。</p>
<p><img data-src="https://images.unsplash.com/photo-1633418607042-085d509052db?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80" alt="云原生架构图"></p>
<h2 id="云原生落地：关键实践与经验分享-💡"><a href="#云原生落地：关键实践与经验分享-💡" class="headerlink" title="云原生落地：关键实践与经验分享 💡"></a>云原生落地：关键实践与经验分享 💡</h2><p>理论很美好，但落地过程中会遇到各种挑战。以下是我在多个云原生项目中总结的关键实践：</p>
<h3 id="1-基础设施即代码（IaC）🏗️"><a href="#1-基础设施即代码（IaC）🏗️" class="headerlink" title="1. 基础设施即代码（IaC）🏗️"></a>1. 基础设施即代码（IaC）🏗️</h3><p>使用Terraform、Ansible等工具将基础设施配置代码化，实现基础设施的版本控制和自动化部署。这不仅提高了部署效率，还确保了环境的一致性。</p>
<h3 id="2-CI-CD流水线建设-🔄"><a href="#2-CI-CD流水线建设-🔄" class="headerlink" title="2. CI/CD流水线建设 🔄"></a>2. CI/CD流水线建设 🔄</h3><p>建立完善的持续集成和持续部署流水线，实现代码提交到生产环境的自动化。推荐使用Jenkins、GitHub Actions或GitLab CI等工具。</p>
<h3 id="3-可观测性设计-👀"><a href="#3-可观测性设计-👀" class="headerlink" title="3. 可观测性设计 👀"></a>3. 可观测性设计 👀</h3><p>在云原生环境中，系统的复杂性大大增加，因此可观测性变得尤为重要。构建完整的日志、指标和追踪体系，使用ELK、Prometheus、Grafana等工具。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kubernetes中Prometheus监控配置示例</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-app-monitor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-app</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">metrics</span></span><br></pre></td></tr></table></figure>

<h3 id="4-安全性左移-🛡️"><a href="#4-安全性左移-🛡️" class="headerlink" title="4. 安全性左移 🛡️"></a>4. 安全性左移 🛡️</h3><p>将安全考虑融入到开发的早期阶段，而不是等到部署后再处理。实施容器镜像扫描、漏洞检测、服务网格等安全措施。</p>
<h2 id="常见问题与解决方案-🚧"><a href="#常见问题与解决方案-🚧" class="headerlink" title="常见问题与解决方案 🚧"></a>常见问题与解决方案 🚧</h2><p>在云原生落地过程中，我遇到了许多挑战，以下是几个常见问题及解决方案：</p>
<h3 id="问题1：微服务间的通信复杂性"><a href="#问题1：微服务间的通信复杂性" class="headerlink" title="问题1：微服务间的通信复杂性"></a>问题1：微服务间的通信复杂性</h3><p><strong>解决方案</strong>：使用服务网格（如Istio）或API网关（如Kong）来管理服务间的通信，处理流量路由、负载均衡、熔断等问题。</p>
<h3 id="问题2：状态管理困难"><a href="#问题2：状态管理困难" class="headerlink" title="问题2：状态管理困难"></a>问题2：状态管理困难</h3><p><strong>解决方案</strong>：对于有状态应用，使用Kubernetes的StatefulSet控制器，结合持久卷（Persistent Volumes）来管理状态。</p>
<h3 id="问题3：资源优化与成本控制"><a href="#问题3：资源优化与成本控制" class="headerlink" title="问题3：资源优化与成本控制"></a>问题3：资源优化与成本控制</h3><p><strong>解决方案</strong>：实施自动伸缩策略，使用Kubernetes的Horizontal Pod Autoscaler和Vertical Pod Autoscaler，根据实际负载调整资源分配。</p>
<h2 id="未来展望：云原生的发展趋势-🔮"><a href="#未来展望：云原生的发展趋势-🔮" class="headerlink" title="未来展望：云原生的发展趋势 🔮"></a>未来展望：云原生的发展趋势 🔮</h2><p>云原生技术正在快速发展，未来我们可以期待以下趋势：</p>
<ol>
<li><strong>Serverless架构的普及</strong>：函数计算（FaaS）将进一步简化应用部署和运维</li>
<li><strong>边缘计算与云原生的结合</strong>：将计算能力扩展到网络边缘</li>
<li><strong>AI与云原生的融合</strong>：云原生平台将更好地支持AI模型的训练和部署</li>
</ol>
<h2 id="写在最后：踏上云原生之旅-🚂"><a href="#写在最后：踏上云原生之旅-🚂" class="headerlink" title="写在最后：踏上云原生之旅 🚂"></a>写在最后：踏上云原生之旅 🚂</h2><p>云原生技术不是银弹，但它确实为现代应用开发带来了巨大的优势。从理论到实践，需要团队的共同努力和持续学习。希望这篇文章能为你的云原生之旅提供一些帮助！如果你有任何问题或经验想分享，欢迎在评论区留言讨论！</p>
<p>Happy Coding！💻✨</p>
]]></content>
      <tags>
        <tag>云原生</tag>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Java微服务治理平台搭建指南</title>
    <url>/2024/10/18/cloud-native/2024-microservice-governance-guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Java微服务治理平台搭建指南-🏗️"><a href="#Java微服务治理平台搭建指南-🏗️" class="headerlink" title="Java微服务治理平台搭建指南 🏗️"></a>Java微服务治理平台搭建指南 🏗️</h1><p>大家好！👋 在当今的云原生时代，微服务架构已经成为构建大型分布式系统的主流选择。然而，随着微服务数量的不断增加，如何有效地管理和治理这些服务成为了一个巨大的挑战。今天，我将和大家分享如何基于Spring Cloud Alibaba构建一个完整的微服务治理平台，帮助你解决微服务治理中的各种痛点。</p>
<h2 id="一、微服务治理的重要性与挑战-🎯"><a href="#一、微服务治理的重要性与挑战-🎯" class="headerlink" title="一、微服务治理的重要性与挑战 🎯"></a>一、微服务治理的重要性与挑战 🎯</h2><h3 id="1-什么是微服务治理？"><a href="#1-什么是微服务治理？" class="headerlink" title="1. 什么是微服务治理？"></a>1. 什么是微服务治理？</h3><p>微服务治理是指对微服务架构中的各个服务进行全面管理和控制的过程，包括：</p>
<ul>
<li><strong>服务注册与发现</strong>：管理服务的生命周期和网络位置</li>
<li><strong>配置管理</strong>：集中管理和动态更新服务配置</li>
<li><strong>流量管理</strong>：包括负载均衡、限流、熔断、降级等</li>
<li><strong>安全管理</strong>：认证、授权、加密通信等</li>
<li><strong>监控与告警</strong>：收集指标、日志、链路追踪数据并进行告警</li>
<li><strong>灰度发布与回滚</strong>：控制新版本的发布过程</li>
</ul>
<h3 id="2-微服务治理面临的挑战"><a href="#2-微服务治理面临的挑战" class="headerlink" title="2. 微服务治理面临的挑战"></a>2. 微服务治理面临的挑战</h3><p>在实践中，微服务治理面临着诸多挑战：</p>
<ul>
<li><strong>服务数量爆炸</strong>：大型系统可能包含数百甚至数千个微服务</li>
<li><strong>网络复杂性</strong>：服务间调用关系复杂，网络故障难以排查</li>
<li><strong>数据一致性</strong>：分布式系统的数据一致性保障困难</li>
<li><strong>安全风险</strong>：服务暴露面增加，安全风险随之增加</li>
<li><strong>运维复杂度</strong>：传统运维方式难以应对大规模微服务集群</li>
</ul>
<h3 id="3-Spring-Cloud-Alibaba的优势"><a href="#3-Spring-Cloud-Alibaba的优势" class="headerlink" title="3. Spring Cloud Alibaba的优势"></a>3. Spring Cloud Alibaba的优势</h3><p>Spring Cloud Alibaba是阿里巴巴开源的微服务解决方案，它结合了Spring Cloud的生态优势和阿里巴巴在微服务领域的实践经验，具有以下优势：</p>
<ul>
<li><strong>本土化支持</strong>：完全适配国内的云服务环境</li>
<li><strong>组件丰富</strong>：提供了完整的微服务治理组件栈</li>
<li><strong>性能优秀</strong>：经过大规模生产环境验证</li>
<li><strong>社区活跃</strong>：持续更新和完善</li>
</ul>
<h2 id="二、基于Spring-Cloud-Alibaba构建完整微服务架构-🛠️"><a href="#二、基于Spring-Cloud-Alibaba构建完整微服务架构-🛠️" class="headerlink" title="二、基于Spring Cloud Alibaba构建完整微服务架构 🛠️"></a>二、基于Spring Cloud Alibaba构建完整微服务架构 🛠️</h2><h3 id="1-技术栈选型"><a href="#1-技术栈选型" class="headerlink" title="1. 技术栈选型"></a>1. 技术栈选型</h3><p>在搭建微服务治理平台之前，我们需要确定技术栈选型：</p>
<ul>
<li><strong>基础框架</strong>：Spring Boot 3.2.x + Spring Cloud 2023.x</li>
<li><strong>微服务治理</strong>：Spring Cloud Alibaba 2023.x</li>
<li><strong>注册中心</strong>：Nacos</li>
<li><strong>配置中心</strong>：Nacos Config</li>
<li><strong>网关</strong>：Spring Cloud Gateway</li>
<li><strong>服务调用</strong>：Dubbo/Spring Cloud OpenFeign</li>
<li><strong>熔断器</strong>：Sentinel</li>
<li><strong>链路追踪</strong>：SkyWalking</li>
<li><strong>监控告警</strong>：Prometheus + Grafana</li>
<li><strong>容器化</strong>：Docker + Kubernetes</li>
</ul>
<h3 id="2-系统架构设计"><a href="#2-系统架构设计" class="headerlink" title="2. 系统架构设计"></a>2. 系统架构设计</h3><p>下面是我们将要构建的微服务治理平台的整体架构设计：</p>
<p><img data-src="https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80" alt="微服务治理平台架构图"></p>
<p>这个架构包含以下核心组件：</p>
<ol>
<li><strong>接入层</strong>：API网关统一入口，负责路由转发、认证授权等</li>
<li><strong>服务层</strong>：各种业务微服务，实现具体业务功能</li>
<li><strong>基础设施层</strong>：提供服务治理的各种基础设施</li>
<li><strong>数据层</strong>：各类数据库和缓存</li>
<li><strong>监控层</strong>：负责监控和告警</li>
</ol>
<h3 id="3-项目结构设计"><a href="#3-项目结构设计" class="headerlink" title="3. 项目结构设计"></a>3. 项目结构设计</h3><p>为了便于管理，我们可以采用模块化的项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">microservice-platform/</span><br><span class="line">├── microservice-common/           # 公共模块</span><br><span class="line">├── microservice-gateway/          # 网关服务</span><br><span class="line">├── microservice-auth/             # 认证授权服务</span><br><span class="line">├── microservice-order/            # 订单服务</span><br><span class="line">├── microservice-product/          # 商品服务</span><br><span class="line">├── microservice-user/             # 用户服务</span><br><span class="line">├── microservice-search/           # 搜索服务</span><br><span class="line">└── microservice-config/           # 配置管理模块</span><br></pre></td></tr></table></figure>

<h2 id="三、实现核心治理组件的具体步骤-🔍"><a href="#三、实现核心治理组件的具体步骤-🔍" class="headerlink" title="三、实现核心治理组件的具体步骤 🔍"></a>三、实现核心治理组件的具体步骤 🔍</h2><h3 id="1-服务注册与发现（Nacos）"><a href="#1-服务注册与发现（Nacos）" class="headerlink" title="1. 服务注册与发现（Nacos）"></a>1. 服务注册与发现（Nacos）</h3><p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>
<p><strong>1.1 安装和启动Nacos</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Nacos</span></span><br><span class="line">wget https://github.com/alibaba/nacos/releases/download/2.3.0/nacos-server-2.3.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nacos-server-2.3.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nacos/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Nacos（单机模式）</span></span><br><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>

<p><strong>1.2 在微服务中集成Nacos</strong></p>
<p>首先，添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在<code>application.yml</code>中配置Nacos：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure>

<p>最后，在启动类上添加<code>@EnableDiscoveryClient</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置中心（Nacos-Config）"><a href="#2-配置中心（Nacos-Config）" class="headerlink" title="2. 配置中心（Nacos Config）"></a>2. 配置中心（Nacos Config）</h3><p>Nacos Config提供了统一的配置管理功能，支持动态刷新配置。</p>
<p><strong>2.1 添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.2 创建bootstrap.yml配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure>

<p><strong>2.3 在Nacos控制台创建配置</strong></p>
<p>在Nacos控制台创建<code>microservice-order.yaml</code>配置，并添加配置内容。</p>
<p><strong>2.4 在代码中使用配置</strong></p>
<p>使用<code>@Value</code>注解或<code>@ConfigurationProperties</code>注解获取配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 支持动态刷新配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;order.service.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/version&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-API网关（Spring-Cloud-Gateway）"><a href="#3-API网关（Spring-Cloud-Gateway）" class="headerlink" title="3. API网关（Spring Cloud Gateway）"></a>3. API网关（Spring Cloud Gateway）</h3><p>Spring Cloud Gateway提供了路由转发、请求过滤等功能，是微服务架构中的重要组件。</p>
<p><strong>3.1 添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.2 配置路由规则</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://microservice-order</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://microservice-product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure>

<p><strong>3.3 添加全局过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现认证授权逻辑</span></span><br><span class="line">        String token = exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证token...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-服务调用（Dubbo-Spring-Cloud-OpenFeign）"><a href="#4-服务调用（Dubbo-Spring-Cloud-OpenFeign）" class="headerlink" title="4. 服务调用（Dubbo/Spring Cloud OpenFeign）"></a>4. 服务调用（Dubbo/Spring Cloud OpenFeign）</h3><p><strong>4.1 使用Spring Cloud OpenFeign</strong></p>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建Feign客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;microservice-product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/products/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Product <span class="title">getProductById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/products/inventory&quot;)</span></span><br><span class="line">    <span class="function">Boolean <span class="title">reduceInventory</span><span class="params">(<span class="meta">@RequestBody</span> InventoryDTO inventoryDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类上添加<code>@EnableFeignClients</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.2 使用Dubbo</strong>（可选）</p>
<p>如果对性能有更高要求，可以使用Dubbo进行服务调用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义服务接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="function">Product <span class="title">getProduct</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function">Boolean <span class="title">reduceInventory</span><span class="params">(Long productId, Integer quantity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务提供者实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现服务接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务消费者调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用productService调用服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、详解高级治理方案：限流、熔断与降级-🛡️"><a href="#四、详解高级治理方案：限流、熔断与降级-🛡️" class="headerlink" title="四、详解高级治理方案：限流、熔断与降级 🛡️"></a>四、详解高级治理方案：限流、熔断与降级 🛡️</h2><h3 id="1-流量控制（Sentinel）"><a href="#1-流量控制（Sentinel）" class="headerlink" title="1. 流量控制（Sentinel）"></a>1. 流量控制（Sentinel）</h3><p>Sentinel是阿里巴巴开源的流量控制和熔断降级组件，具有强大的流量控制、熔断降级、系统负载保护等功能。</p>
<p><strong>1.1 添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1.2 配置Sentinel</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">sentinel-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure>

<p><strong>1.3 定义限流规则</strong></p>
<p>在Nacos中创建<code>sentinel-rules</code>配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;microservice-order&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;limitApp&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;grade&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;count&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;strategy&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;controlBehavior&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;clusterMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>1.4 使用注解定义资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;createOrder&quot;, blockHandler = &quot;handleBlock&quot;, fallback = &quot;handleFallback&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">createOrder</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建订单逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理限流逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">handleBlock</span><span class="params">(OrderDTO orderDTO, BlockException ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 限流处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Order().setMessage(<span class="string">&quot;当前请求过多，请稍后再试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理降级逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">handleFallback</span><span class="params">(OrderDTO orderDTO, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 降级处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Order().setMessage(<span class="string">&quot;系统繁忙，请稍后再试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-链路追踪（SkyWalking）"><a href="#2-链路追踪（SkyWalking）" class="headerlink" title="2. 链路追踪（SkyWalking）"></a>2. 链路追踪（SkyWalking）</h3><p>SkyWalking是一个开源的可观测性平台，提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。</p>
<p><strong>2.1 安装和启动SkyWalking</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载SkyWalking</span></span><br><span class="line">wget https://dlcdn.apache.org/skywalking/9.7.0/apache-skywalking-apm-9.7.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-skywalking-apm-9.7.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apache-skywalking-apm-bin/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动SkyWalking OAP服务</span></span><br><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure>

<p><strong>2.2 配置微服务接入SkyWalking</strong></p>
<p>添加JVM参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-javaagent:/path/to/skywalking-agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=microservice-order</span><br><span class="line">-Dskywalking.collector.backend_service=localhost:11800</span><br></pre></td></tr></table></figure>

<h3 id="3-分布式事务（Seata）"><a href="#3-分布式事务（Seata）" class="headerlink" title="3. 分布式事务（Seata）"></a>3. 分布式事务（Seata）</h3><p>在微服务架构中，保证数据一致性是一个挑战。Seata是阿里巴巴开源的分布式事务解决方案。</p>
<p><strong>3.1 安装和配置Seata Server</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Seata</span></span><br><span class="line">wget https://github.com/seata/seata/releases/download/v2.0.0/seata-server-2.0.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf seata-server-2.0.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> seata-server-2.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Seata Server</span></span><br><span class="line">sh bin/seata-server.sh -p 8091 -h 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><strong>3.2 配置微服务接入Seata</strong></p>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置Seata：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">application-id:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">my_test_tx_group</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span></span><br><span class="line">      <span class="attr">my_test_tx_group:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">grouplist:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="string">localhost:8091</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br></pre></td></tr></table></figure>

<p><strong>3.3 使用Seata进行事务管理</strong></p>
<p>在业务方法上添加<code>@GlobalTransactional</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductClient productClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GlobalTransactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">createOrder</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setUserId(orderDTO.getUserId());</span><br><span class="line">        order.setProductId(orderDTO.getProductId());</span><br><span class="line">        order.setQuantity(orderDTO.getQuantity());</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 扣减库存</span></span><br><span class="line">        <span class="keyword">boolean</span> success = productClient.reduceInventory(</span><br><span class="line">            <span class="keyword">new</span> InventoryDTO().setProductId(orderDTO.getProductId())</span><br><span class="line">                             .setQuantity(orderDTO.getQuantity())</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;扣减库存失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、大规模微服务集群的监控与告警实践-📊"><a href="#五、大规模微服务集群的监控与告警实践-📊" class="headerlink" title="五、大规模微服务集群的监控与告警实践 📊"></a>五、大规模微服务集群的监控与告警实践 📊</h2><h3 id="1-监控体系架构"><a href="#1-监控体系架构" class="headerlink" title="1. 监控体系架构"></a>1. 监控体系架构</h3><p>一个完整的微服务监控体系应包括以下几个方面：</p>
<ul>
<li><strong>指标监控</strong>：收集和展示系统运行指标</li>
<li><strong>日志管理</strong>：集中收集、存储和分析日志</li>
<li><strong>链路追踪</strong>：追踪请求的完整调用链路</li>
<li><strong>健康检查</strong>：监控服务的健康状态</li>
<li><strong>告警通知</strong>：及时发现和通知问题</li>
</ul>
<h3 id="2-基于Prometheus和Grafana的指标监控"><a href="#2-基于Prometheus和Grafana的指标监控" class="headerlink" title="2. 基于Prometheus和Grafana的指标监控"></a>2. 基于Prometheus和Grafana的指标监控</h3><p><strong>2.1 部署Prometheus</strong></p>
<p>创建Prometheus配置文件<code>prometheus.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;spring-actuator&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">&#x27;/actuator/prometheus&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:8080&#x27;</span>, <span class="string">&#x27;localhost:8081&#x27;</span>]  <span class="comment"># 微服务实例地址</span></span><br></pre></td></tr></table></figure>

<p>启动Prometheus：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9090:9090 -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure>

<p><strong>2.2 配置微服务暴露指标</strong></p>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置Actuator：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">prometheus,health,info,metrics</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">export:</span></span><br><span class="line">      <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>2.3 部署Grafana并配置Dashboard</strong></p>
<p>启动Grafana：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3000:3000 grafana/grafana</span><br></pre></td></tr></table></figure>

<p>在Grafana中添加Prometheus数据源，并导入Spring Boot相关的Dashboard（推荐使用ID为12856的Dashboard）。</p>
<h3 id="3-基于ELK的日志管理"><a href="#3-基于ELK的日志管理" class="headerlink" title="3. 基于ELK的日志管理"></a>3. 基于ELK的日志管理</h3><p><strong>3.1 部署ELK Stack</strong></p>
<p>使用Docker Compose部署ELK Stack：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:8.10.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms512m</span> <span class="string">-Xmx512m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.security.enabled=false</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:8.10.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5044:5044&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:8.10.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure>

<p><strong>3.2 配置微服务输出结构化日志</strong></p>
<p>添加Logback配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">destination</span>&gt;</span>localhost:5044<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;</span><br><span class="line">        &quot;app_name&quot;:&quot;$&#123;spring.application.name&#125;&quot;,</span><br><span class="line">        &quot;environment&quot;:&quot;$&#123;spring.profiles.active&#125;&quot;</span><br><span class="line">      &#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-告警系统配置"><a href="#4-告警系统配置" class="headerlink" title="4. 告警系统配置"></a>4. 告警系统配置</h3><p><strong>4.1 在Prometheus中配置告警规则</strong></p>
<p>创建告警规则文件<code>alerts.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">spring-boot-alerts</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighCpuUsage</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="number">100</span> <span class="bullet">-</span> <span class="string">(avg</span> <span class="string">by(instance)</span> <span class="string">(irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m]))</span> <span class="string">*</span> <span class="number">100</span><span class="string">)</span> <span class="string">&gt;</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">5m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;High CPU usage detected&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;CPU usage is above 80% for 5 minutes&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">ServiceDown</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">up</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;Service is down&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;Service <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> has been down for 1 minute&quot;</span></span><br></pre></td></tr></table></figure>

<p>在Prometheus配置文件中引用告警规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;alerts.yml&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>4.2 配置Alertmanager</strong></p>
<p>创建Alertmanager配置文件<code>alertmanager.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;email-notifications&#x27;</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;email-notifications&#x27;</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;admin@example.com&#x27;</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">&#x27;alertmanager@example.com&#x27;</span></span><br><span class="line">    <span class="attr">smarthost:</span> <span class="string">&#x27;smtp.example.com:587&#x27;</span></span><br><span class="line">    <span class="attr">auth_username:</span> <span class="string">&#x27;alertmanager&#x27;</span></span><br><span class="line">    <span class="attr">auth_password:</span> <span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>

<p>启动Alertmanager：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9093:9093 -v /path/to/alertmanager.yml:/etc/alertmanager/alertmanager.yml prom/alertmanager</span><br></pre></td></tr></table></figure>

<h2 id="六、总结与最佳实践建议-📝"><a href="#六、总结与最佳实践建议-📝" class="headerlink" title="六、总结与最佳实践建议 📝"></a>六、总结与最佳实践建议 📝</h2><p>通过本文的介绍，我们详细讲解了如何基于Spring Cloud Alibaba构建一个完整的微服务治理平台，包括服务注册发现、配置管理、API网关、服务调用、流量控制、链路追踪、分布式事务以及监控告警等核心组件的实现方法。</p>
<p>以下是一些在实践中总结的最佳实践建议：</p>
<ol>
<li><p><strong>从小规模开始，逐步扩展</strong>：不要一开始就尝试构建一个非常复杂的微服务系统，应该从小规模开始，积累经验后再逐步扩展。</p>
</li>
<li><p><strong>统一技术栈和规范</strong>：在团队内部统一技术栈和开发规范，减少沟通成本和维护难度。</p>
</li>
<li><p><strong>自动化部署和运维</strong>：尽可能实现自动化部署、自动化测试和自动化运维，提高开发和运维效率。</p>
</li>
<li><p><strong>重视安全</strong>：在微服务架构中，安全问题更加突出，应该重视认证授权、数据加密、访问控制等安全措施。</p>
</li>
<li><p><strong>持续优化</strong>：微服务治理是一个持续的过程，需要不断地监控、分析和优化系统性能和稳定性。</p>
</li>
</ol>
<p>微服务治理是一个复杂而庞大的话题，本文只是介绍了其中的一部分内容。希望本文能够为你构建自己的微服务治理平台提供一些参考和帮助。如果你有任何问题或建议，欢迎在评论区留言讨论！😊</p>
]]></content>
      <tags>
        <tag>微服务</tag>
        <tag>SpringCloud</tag>
        <tag>服务治理</tag>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Java云原生应用最佳实践</title>
    <url>/2025/05/20/cloud-native/2025-java-cloud-native-best-practices/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Java云原生应用最佳实践-☁️"><a href="#Java云原生应用最佳实践-☁️" class="headerlink" title="Java云原生应用最佳实践 ☁️"></a>Java云原生应用最佳实践 ☁️</h1><p>大家好！👋 在当今的云计算时代，云原生已经成为构建现代化应用的主流范式。对于Java开发者来说，如何将传统的Java应用转变为云原生应用，充分利用云平台的弹性和扩展性，是一个重要的课题。今天，我将和大家分享Java云原生应用的最佳实践，帮助你构建更高效、更可靠、更易于维护的云原生Java应用。</p>
<h2 id="一、云原生应用的核心概念与原则-📚"><a href="#一、云原生应用的核心概念与原则-📚" class="headerlink" title="一、云原生应用的核心概念与原则 📚"></a>一、云原生应用的核心概念与原则 📚</h2><h3 id="1-什么是云原生应用？"><a href="#1-什么是云原生应用？" class="headerlink" title="1. 什么是云原生应用？"></a>1. 什么是云原生应用？</h3><p>云原生应用是指为云环境设计和优化的应用程序，它充分利用了云平台提供的弹性、可扩展性、容错性等特性。云原生应用通常具有以下特点：</p>
<ul>
<li><strong>容器化</strong>：应用及其依赖被打包在轻量级容器中，确保在任何环境中一致运行</li>
<li><strong>微服务架构</strong>：应用被拆分为多个独立的微服务，每个微服务专注于一个特定的业务功能</li>
<li><strong>DevOps文化</strong>：开发和运维紧密协作，实现持续集成、持续部署和自动化运维</li>
<li><strong>弹性扩展</strong>：根据负载自动扩展或缩减资源</li>
<li><strong>故障自愈</strong>：自动检测和恢复故障</li>
<li><strong>声明式API</strong>：使用声明式方法定义和管理基础设施和应用</li>
</ul>
<h3 id="2-云原生应用的关键原则"><a href="#2-云原生应用的关键原则" class="headerlink" title="2. 云原生应用的关键原则"></a>2. 云原生应用的关键原则</h3><p>构建云原生应用时，应遵循以下关键原则：</p>
<ul>
<li><strong>12-Factor App</strong>：12要素应用宣言，提供了构建云原生应用的最佳实践指南</li>
<li><strong>不可变基础设施</strong>：基础设施一旦部署就不再修改，更新通过替换实现</li>
<li><strong>关注点分离</strong>：将应用逻辑与基础设施、配置、状态等分离</li>
<li><strong>API优先</strong>：将API设计作为应用设计的核心</li>
<li><strong>自动化一切</strong>：尽可能实现自动化部署、测试、监控和运维</li>
</ul>
<h3 id="3-Java与云原生的结合"><a href="#3-Java与云原生的结合" class="headerlink" title="3. Java与云原生的结合"></a>3. Java与云原生的结合</h3><p>Java作为一门成熟的编程语言，在云原生时代仍然具有强大的生命力。现代Java技术栈（如Spring Boot 3.x、GraalVM等）为构建云原生应用提供了良好的支持：</p>
<ul>
<li><strong>Spring Boot</strong>：简化了Java应用的开发和部署</li>
<li><strong>Spring Cloud</strong>：提供了微服务架构所需的各种工具和组件</li>
<li><strong>GraalVM</strong>：提供了原生镜像支持，可以显著减小应用体积和启动时间</li>
<li><strong>Quarkus</strong>：为GraalVM优化的Kubernetes原生Java框架</li>
<li><strong>Micronaut</strong>：轻量级的JVM框架，专为云原生和Serverless设计</li>
</ul>
<h2 id="二、基于Kubernetes的Java应用容器化实践-🐳"><a href="#二、基于Kubernetes的Java应用容器化实践-🐳" class="headerlink" title="二、基于Kubernetes的Java应用容器化实践 🐳"></a>二、基于Kubernetes的Java应用容器化实践 🐳</h2><h3 id="1-容器化策略与最佳实践"><a href="#1-容器化策略与最佳实践" class="headerlink" title="1. 容器化策略与最佳实践"></a>1. 容器化策略与最佳实践</h3><p>将Java应用容器化是构建云原生应用的第一步。以下是一些容器化的最佳实践：</p>
<h4 id="1-1-选择合适的基础镜像"><a href="#1-1-选择合适的基础镜像" class="headerlink" title="1.1 选择合适的基础镜像"></a>1.1 选择合适的基础镜像</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用官方JDK镜像或Alpine-based JDK镜像以减小镜像体积</span></span><br><span class="line"><span class="keyword">FROM</span> eclipse-temurin:<span class="number">17</span>-jre-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/my-application.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置JVM参数</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx512m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$JAVA_OPTS</span> -jar app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-多阶段构建优化"><a href="#1-2-多阶段构建优化" class="headerlink" title="1.2 多阶段构建优化"></a>1.2 多阶段构建优化</h4><p>使用多阶段构建可以显著减小最终镜像的体积：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建阶段</span></span><br><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.9</span>-eclipse-temurin-<span class="number">17</span>-alpine AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src ./src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn clean package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行阶段</span></span><br><span class="line"><span class="keyword">FROM</span> eclipse-temurin:<span class="number">17</span>-jre-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/target/my-application.jar app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-JVM参数优化"><a href="#1-3-JVM参数优化" class="headerlink" title="1.3 JVM参数优化"></a>1.3 JVM参数优化</h4><p>为容器环境优化JVM参数是提高Java应用在容器中性能的关键：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用容器感知的JVM参数</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;\</span></span><br><span class="line"><span class="string">    -XX:+UseContainerSupport \</span></span><br><span class="line"><span class="string">    -XX:MaxRAMPercentage=75.0 \</span></span><br><span class="line"><span class="string">    -XX:+UseG1GC \</span></span><br><span class="line"><span class="string">    -XX:+UseStringDeduplication \</span></span><br><span class="line"><span class="string">    -Djava.security.egd=file:/dev/./urandom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$JAVA_OPTS</span> -jar app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Kubernetes资源配置优化"><a href="#2-Kubernetes资源配置优化" class="headerlink" title="2. Kubernetes资源配置优化"></a>2. Kubernetes资源配置优化</h3><p>在Kubernetes中部署Java应用时，合理配置资源请求和限制非常重要：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-application</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-java-application</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-java-application</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-java-application</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">my-java-application:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;1Gi&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/actuator/health/readiness</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/actuator/health/liveness</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-健康检查与就绪探针配置"><a href="#3-健康检查与就绪探针配置" class="headerlink" title="3. 健康检查与就绪探针配置"></a>3. 健康检查与就绪探针配置</h3><p>在Kubernetes中配置适当的健康检查和就绪探针对于确保应用的可靠性至关重要：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring Boot应用中的健康检查端点配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// application.properties配置</span></span><br><span class="line">management.endpoints.web.exposure.include=health,info,prometheus</span><br><span class="line">management.endpoint.health.probes.enabled=<span class="keyword">true</span></span><br><span class="line">management.endpoint.health.show-details=when_authorized</span><br><span class="line">management.health.db.enabled=<span class="keyword">true</span></span><br><span class="line">management.health.diskspace.enabled=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>自定义健康检查指示器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = dataSource.getConnection()) &#123;</span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            ResultSet resultSet = statement.executeQuery(<span class="string">&quot;SELECT 1&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="keyword">return</span> Health.up().withDetail(<span class="string">&quot;database&quot;</span>, <span class="string">&quot;Available&quot;</span>).build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withException(e).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Health.unknown().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、Java微服务的云原生改造方案-🔧"><a href="#三、Java微服务的云原生改造方案-🔧" class="headerlink" title="三、Java微服务的云原生改造方案 🔧"></a>三、Java微服务的云原生改造方案 🔧</h2><h3 id="1-传统Java应用的云原生改造路径"><a href="#1-传统Java应用的云原生改造路径" class="headerlink" title="1. 传统Java应用的云原生改造路径"></a>1. 传统Java应用的云原生改造路径</h3><p>将传统Java应用改造为云原生应用是一个渐进的过程，通常包括以下步骤：</p>
<ol>
<li><strong>容器化</strong>：将应用打包到容器中</li>
<li><strong>微服务化</strong>：将单体应用拆分为微服务</li>
<li><strong>无状态化</strong>：将应用改造为无状态或有状态分离</li>
<li><strong>API网关集成</strong>：引入API网关统一管理服务访问</li>
<li><strong>配置外部化</strong>：将配置从代码中分离出来</li>
<li><strong>服务注册与发现</strong>：集成服务注册发现机制</li>
<li><strong>弹性伸缩</strong>：实现基于负载的自动伸缩</li>
<li><strong>可观测性</strong>：增强应用的监控和日志能力</li>
</ol>
<h3 id="2-服务网格在Java微服务中的应用"><a href="#2-服务网格在Java微服务中的应用" class="headerlink" title="2. 服务网格在Java微服务中的应用"></a>2. 服务网格在Java微服务中的应用</h3><p>服务网格（如Istio）可以帮助我们更好地管理和监控微服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为Java应用启用Istio代理注入</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-java-service</span></span><br><span class="line">    <span class="attr">istio-injection:</span> <span class="string">enabled</span>  <span class="comment"># 启用Istio代理注入</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># ... 其他配置</span></span><br></pre></td></tr></table></figure>

<p>使用Istio进行流量管理：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置金丝雀发布</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">my-java-service</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">my-java-service</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">90</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">my-java-service</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">v2</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">10</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">my-java-service</span></span><br><span class="line">  <span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure>

<h3 id="3-配置管理与服务发现优化"><a href="#3-配置管理与服务发现优化" class="headerlink" title="3. 配置管理与服务发现优化"></a>3. 配置管理与服务发现优化</h3><p>在云原生环境中，配置管理和服务发现是非常重要的基础设施：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Spring Cloud Kubernetes进行配置管理</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">application.properties:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    server.port=8080</span></span><br><span class="line"><span class="string">    spring.datasource.url=jdbc:mysql://mysql:3306/mydb</span></span><br><span class="line"><span class="string">    spring.datasource.username=root</span></span><br><span class="line"><span class="string">    spring.datasource.password=password</span></span><br><span class="line"><span class="string">    logging.level.root=INFO</span></span><br></pre></td></tr></table></figure>

<p>在Spring Boot应用中使用ConfigMap：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用部署配置</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># ... 其他配置</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">my-java-service:latest</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/config</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-java-service-config</span></span><br></pre></td></tr></table></figure>

<h2 id="四、GraalVM与Java原生镜像优化-🚀"><a href="#四、GraalVM与Java原生镜像优化-🚀" class="headerlink" title="四、GraalVM与Java原生镜像优化 🚀"></a>四、GraalVM与Java原生镜像优化 🚀</h2><h3 id="1-GraalVM原生镜像的优势与适用场景"><a href="#1-GraalVM原生镜像的优势与适用场景" class="headerlink" title="1. GraalVM原生镜像的优势与适用场景"></a>1. GraalVM原生镜像的优势与适用场景</h3><p>GraalVM是一个高性能的运行时环境，它可以将Java应用编译为原生镜像，具有以下优势：</p>
<ul>
<li><strong>启动速度快</strong>：原生镜像的启动时间通常在毫秒级别</li>
<li><strong>内存占用小</strong>：相比传统JVM，原生镜像的内存占用显著减少</li>
<li><strong>启动体积小</strong>：原生镜像的体积通常只有传统JAR包的几分之一</li>
<li><strong>即时响应</strong>：适合需要快速启动和即时响应的场景</li>
</ul>
<p>GraalVM原生镜像特别适合以下场景：</p>
<ul>
<li><strong>Serverless函数</strong>：如AWS Lambda、阿里云函数计算等</li>
<li><strong>微服务</strong>：特别是需要快速启动的微服务</li>
<li><strong>容器化应用</strong>：减小容器镜像体积，提高启动速度</li>
<li><strong>边缘计算</strong>：资源受限环境下的应用</li>
</ul>
<h3 id="2-Spring-Boot应用的原生镜像构建"><a href="#2-Spring-Boot应用的原生镜像构建" class="headerlink" title="2. Spring Boot应用的原生镜像构建"></a>2. Spring Boot应用的原生镜像构建</h3><p>Spring Boot 3.x提供了对GraalVM原生镜像的官方支持，我们可以使用Spring Native来构建原生镜像：</p>
<h4 id="2-1-添加Spring-Native依赖"><a href="#2-1-添加Spring-Native依赖" class="headerlink" title="2.1 添加Spring Native依赖"></a>2.1 添加Spring Native依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.experimental<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-native<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">builder</span>&gt;</span>paketobuildpacks/builder:tiny<span class="tag">&lt;/<span class="name">builder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">env</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">BP_NATIVE_IMAGE</span>&gt;</span>true<span class="tag">&lt;/<span class="name">BP_NATIVE_IMAGE</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-构建原生镜像"><a href="#2-2-构建原生镜像" class="headerlink" title="2.2 构建原生镜像"></a>2.2 构建原生镜像</h4><p>使用Maven构建原生镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -Pnative spring-boot:build-image</span><br></pre></td></tr></table></figure>

<p>或者使用GraalVM原生镜像构建工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装GraalVM Native Image工具</span></span><br><span class="line">gu install native-image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建JAR包</span></span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建原生镜像</span></span><br><span class="line">native-image -jar target/my-application.jar</span><br><span class="line">s</span><br></pre></td></tr></table></figure>

<h3 id="3-原生镜像的性能调优与限制"><a href="#3-原生镜像的性能调优与限制" class="headerlink" title="3. 原生镜像的性能调优与限制"></a>3. 原生镜像的性能调优与限制</h3><p>虽然GraalVM原生镜像有很多优势，但也有一些限制和需要注意的地方：</p>
<h4 id="3-1-反射与动态类加载处理"><a href="#3-1-反射与动态类加载处理" class="headerlink" title="3.1 反射与动态类加载处理"></a>3.1 反射与动态类加载处理</h4><p>GraalVM原生镜像在编译时需要知道所有将在运行时使用的类、方法和字段。对于使用反射、动态类加载等特性的代码，需要进行特殊处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用@NativeHint注解提供反射信息</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@NativeHint(</span></span><br><span class="line"><span class="meta">    types = @TypeHint(</span></span><br><span class="line"><span class="meta">        types = &#123; com.example.User.class, com.example.Order.class &#125;,</span></span><br><span class="line"><span class="meta">        access = &#123; AccessBits.ALL &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者使用反射配置文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;reflect-config&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;com.example.User&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;allDeclaredConstructors&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;allDeclaredFields&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;allDeclaredMethods&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-性能监控与分析"><a href="#3-2-性能监控与分析" class="headerlink" title="3.2 性能监控与分析"></a>3.2 性能监控与分析</h4><p>原生镜像的性能监控和分析与传统JVM应用有所不同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Micrometer进行指标收集</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MeterRegistryCustomizer&lt;MeterRegistry&gt; <span class="title">metricsCommonTags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry -&gt; registry.config().commonTags(<span class="string">&quot;application&quot;</span>, <span class="string">&quot;my-application&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置Prometheus指标导出</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">export:</span></span><br><span class="line">      <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="五、Serverless与函数计算中的Java应用-☁️"><a href="#五、Serverless与函数计算中的Java应用-☁️" class="headerlink" title="五、Serverless与函数计算中的Java应用 ☁️"></a>五、Serverless与函数计算中的Java应用 ☁️</h2><h3 id="1-Java在Serverless环境中的挑战与应对策略"><a href="#1-Java在Serverless环境中的挑战与应对策略" class="headerlink" title="1. Java在Serverless环境中的挑战与应对策略"></a>1. Java在Serverless环境中的挑战与应对策略</h3><p>Java在Serverless环境中面临一些挑战，主要包括：</p>
<ul>
<li><strong>冷启动时间长</strong>：传统JVM的启动时间较长，可能导致函数调用延迟</li>
<li><strong>内存占用大</strong>：JVM本身需要一定的内存资源</li>
<li><strong>镜像体积大</strong>：传统Java应用的容器镜像体积较大</li>
<li><strong>不适合短时间执行的任务</strong>：对于执行时间非常短的任务，JVM的启动成本可能超过任务本身的执行成本</li>
</ul>
<p>针对这些挑战，我们可以采取以下应对策略：</p>
<ul>
<li><strong>使用GraalVM原生镜像</strong>：显著减小启动时间和内存占用</li>
<li><strong>优化函数代码</strong>：尽量减小函数的代码体积和依赖</li>
<li><strong>使用专用的Serverless Java框架</strong>：如Quarkus、Micronaut等</li>
<li><strong>配置适当的函数超时时间和内存</strong>：根据实际需求配置函数参数</li>
<li><strong>预热机制</strong>：对于关键函数，可以配置预热机制减少冷启动</li>
</ul>
<h3 id="2-使用Quarkus开发Serverless-Java函数"><a href="#2-使用Quarkus开发Serverless-Java函数" class="headerlink" title="2. 使用Quarkus开发Serverless Java函数"></a>2. 使用Quarkus开发Serverless Java函数</h3><p>Quarkus是一个为GraalVM和HotSpot优化的Kubernetes原生Java框架，非常适合开发Serverless函数：</p>
<h4 id="2-1-创建Quarkus函数项目"><a href="#2-1-创建Quarkus函数项目" class="headerlink" title="2.1 创建Quarkus函数项目"></a>2.1 创建Quarkus函数项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Quarkus CLI创建项目</span></span><br><span class="line">quarkus create app com.example:serverless-function:1.0.0-SNAPSHOT --extension=aws-lambda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用Maven</span></span><br><span class="line">mvn io.quarkus:quarkus-maven-plugin:3.2.0.Final:create \</span><br><span class="line">    -DprojectGroupId=com.example \</span><br><span class="line">    -DprojectArtifactId=serverless-function \</span><br><span class="line">    -Dextensions=<span class="string">&quot;aws-lambda&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-实现Lambda函数"><a href="#2-2-实现Lambda函数" class="headerlink" title="2.2 实现Lambda函数"></a>2.2 实现Lambda函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.dynamodb.DynamoDbClient;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.dynamodb.model.PutItemRequest;</span><br><span class="line"><span class="keyword">import</span> software.amazon.lambda.powertools.logging.Logging;</span><br><span class="line"><span class="keyword">import</span> software.amazon.lambda.powertools.metrics.Metrics;</span><br><span class="line"><span class="keyword">import</span> software.amazon.lambda.powertools.tracing.Tracing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandler</span> <span class="keyword">implements</span> <span class="title">RequestHandler</span>&lt;<span class="title">APIGatewayProxyRequestEvent</span>, <span class="title">APIGatewayProxyResponseEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DynamoDbClient dynamoDbClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Logging(logEvent = true)</span></span><br><span class="line">    <span class="meta">@Metrics</span></span><br><span class="line">    <span class="meta">@Tracing</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> APIGatewayProxyResponseEvent <span class="title">handleRequest</span><span class="params">(APIGatewayProxyRequestEvent input, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理订单请求</span></span><br><span class="line">        String requestBody = input.getBody();</span><br><span class="line">        Order order = JsonbBuilder.create().fromJson(requestBody, Order.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 保存订单到DynamoDB</span></span><br><span class="line">        dynamoDbClient.putItem(PutItemRequest.builder()</span><br><span class="line">                .tableName(<span class="string">&quot;orders&quot;</span>)</span><br><span class="line">                .item(Map.of(</span><br><span class="line">                        <span class="string">&quot;id&quot;</span>, AttributeValue.builder().s(order.getId()).build(),</span><br><span class="line">                        <span class="string">&quot;productId&quot;</span>, AttributeValue.builder().s(order.getProductId()).build(),</span><br><span class="line">                        <span class="string">&quot;quantity&quot;</span>, AttributeValue.builder().n(String.valueOf(order.getQuantity())).build()</span><br><span class="line">                ))</span><br><span class="line">                .build());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> APIGatewayProxyResponseEvent()</span><br><span class="line">                .withStatusCode(<span class="number">200</span>)</span><br><span class="line">                .withBody(<span class="string">&quot;Order created successfully&quot;</span>)</span><br><span class="line">                .withHeaders(Map.of(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-构建与部署Quarkus函数"><a href="#2-3-构建与部署Quarkus函数" class="headerlink" title="2.3 构建与部署Quarkus函数"></a>2.3 构建与部署Quarkus函数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建原生镜像</span></span><br><span class="line">./mvnw package -Pnative -DskipTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到AWS Lambda</span></span><br><span class="line">aws lambda create-function \</span><br><span class="line">    --function-name order-handler \</span><br><span class="line">    --handler io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest \</span><br><span class="line">    --runtime provided.al2 \</span><br><span class="line">    --role arn:aws:iam::123456789012:role/lambda-role \</span><br><span class="line">    --code S3Bucket=my-bucket,S3Key=function.zip \</span><br><span class="line">    --memory-size 256 \</span><br><span class="line">    --timeout 15</span><br></pre></td></tr></table></figure>

<h3 id="3-AWS-Lambda与Azure-Functions的Java最佳实践"><a href="#3-AWS-Lambda与Azure-Functions的Java最佳实践" class="headerlink" title="3. AWS Lambda与Azure Functions的Java最佳实践"></a>3. AWS Lambda与Azure Functions的Java最佳实践</h3><p>以下是在AWS Lambda和Azure Functions等Serverless平台上使用Java的最佳实践：</p>
<h4 id="3-1-函数设计最佳实践"><a href="#3-1-函数设计最佳实践" class="headerlink" title="3.1 函数设计最佳实践"></a>3.1 函数设计最佳实践</h4><ul>
<li><strong>保持函数简洁</strong>：每个函数只负责一个具体的业务功能</li>
<li><strong>优化依赖管理</strong>：只包含必要的依赖，使用依赖分析工具检测和移除未使用的依赖</li>
<li><strong>使用函数幂等性设计</strong>：确保函数可以被安全地重复执行</li>
<li><strong>实现错误处理和重试机制</strong>：处理可能的异常情况</li>
<li><strong>合理设置函数超时和内存</strong>：根据实际需求配置函数参数</li>
</ul>
<h4 id="3-2-性能优化技巧"><a href="#3-2-性能优化技巧" class="headerlink" title="3.2 性能优化技巧"></a>3.2 性能优化技巧</h4><ul>
<li><strong>使用连接池</strong>：对于需要访问数据库或其他服务的函数，可以使用连接池重用连接</li>
<li><strong>缓存静态数据</strong>：对于不常变化的数据，可以缓存到内存中</li>
<li><strong>优化序列化和反序列化</strong>：选择高效的序列化框架，如Jackson或Gson</li>
<li><strong>使用异步处理</strong>：对于耗时的操作，可以考虑使用异步处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用连接池优化数据库访问</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HikariDataSource dataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        HikariConfig config = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">        config.setJdbcUrl(System.getenv(<span class="string">&quot;DB_URL&quot;</span>));</span><br><span class="line">        config.setUsername(System.getenv(<span class="string">&quot;DB_USERNAME&quot;</span>));</span><br><span class="line">        config.setPassword(System.getenv(<span class="string">&quot;DB_PASSWORD&quot;</span>));</span><br><span class="line">        config.setMinimumIdle(<span class="number">0</span>);</span><br><span class="line">        config.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        config.setConnectionTimeout(<span class="number">30000</span>);</span><br><span class="line">        config.setIdleTimeout(<span class="number">600000</span>);</span><br><span class="line">        config.setMaxLifetime(<span class="number">1800000</span>);</span><br><span class="line">        </span><br><span class="line">        dataSource = <span class="keyword">new</span> HikariDataSource(config);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection conn = dataSource.getConnection();</span><br><span class="line">             PreparedStatement ps = conn.prepareStatement(<span class="string">&quot;SELECT * FROM users WHERE id = ?&quot;</span>)) &#123;</span><br><span class="line">            ps.setString(<span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">try</span> (ResultSet rs = ps.executeQuery()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                    User user = <span class="keyword">new</span> User();</span><br><span class="line">                    user.setId(rs.getString(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    user.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                    user.setEmail(rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                    <span class="keyword">return</span> user;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// 日志记录异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、云原生应用的可观测性与监控-🔍"><a href="#六、云原生应用的可观测性与监控-🔍" class="headerlink" title="六、云原生应用的可观测性与监控 🔍"></a>六、云原生应用的可观测性与监控 🔍</h2><h3 id="1-可观测性体系设计"><a href="#1-可观测性体系设计" class="headerlink" title="1. 可观测性体系设计"></a>1. 可观测性体系设计</h3><p>云原生应用的可观测性包括三个核心要素：指标（Metrics）、日志（Logs）和追踪（Tracing），通常被称为”可观测性三支柱”：</p>
<ul>
<li><strong>指标</strong>：用于监控系统的健康状况和性能指标，如CPU使用率、内存使用率、请求数、响应时间等</li>
<li><strong>日志</strong>：记录系统运行过程中的详细信息，用于问题排查和审计</li>
<li><strong>追踪</strong>：用于跟踪请求在分布式系统中的完整调用链路，识别性能瓶颈</li>
</ul>
<p>构建可观测性体系时，应遵循以下原则：</p>
<ul>
<li><strong>统一采集</strong>：使用统一的工具和标准采集可观测性数据</li>
<li><strong>集中存储</strong>：将可观测性数据存储在集中的平台中</li>
<li><strong>关联分析</strong>：将指标、日志和追踪数据关联起来进行分析</li>
<li><strong>实时监控</strong>：实时监控系统的运行状态</li>
<li><strong>智能告警</strong>：设置智能告警规则，及时发现和解决问题</li>
</ul>
<h3 id="2-日志管理与结构化日志"><a href="#2-日志管理与结构化日志" class="headerlink" title="2. 日志管理与结构化日志"></a>2. 日志管理与结构化日志</h3><p>在云原生环境中，管理和分析日志是一项重要的挑战。使用结构化日志可以显著提高日志的可读性和可分析性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用SLF4J和Logback配置结构化日志</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoggingEventEnhancer <span class="title">loggingEventEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomLoggingEventEnhancer();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomLoggingEventEnhancer</span> <span class="keyword">implements</span> <span class="title">LoggingEventEnhancer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">enhance</span><span class="params">(LoggingEvent event)</span> </span>&#123;</span><br><span class="line">            Map&lt;String, Object&gt; enhancements = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            enhancements.put(<span class="string">&quot;application&quot;</span>, <span class="string">&quot;my-application&quot;</span>);</span><br><span class="line">            enhancements.put(<span class="string">&quot;environment&quot;</span>, System.getenv(<span class="string">&quot;ENVIRONMENT&quot;</span>));</span><br><span class="line">            enhancements.put(<span class="string">&quot;instance_id&quot;</span>, System.getenv(<span class="string">&quot;HOSTNAME&quot;</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 添加MDC中的信息</span></span><br><span class="line">            enhancements.putAll(MDC.getCopyOfContextMap() != <span class="keyword">null</span> ? MDC.getCopyOfContextMap() : Map.of());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> enhancements;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在代码中使用结构化日志</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(OrderService.class);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">createOrder</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置MDC上下文</span></span><br><span class="line">        MDC.put(<span class="string">&quot;traceId&quot;</span>, UUID.randomUUID().toString());</span><br><span class="line">        MDC.put(<span class="string">&quot;userId&quot;</span>, orderDTO.getUserId());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Creating order with productId=&#123;&#125;, quantity=&#123;&#125;&quot;</span>, orderDTO.getProductId(), orderDTO.getQuantity());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建订单逻辑</span></span><br><span class="line">            Order order = <span class="keyword">new</span> Order();</span><br><span class="line">            order.setUserId(orderDTO.getUserId());</span><br><span class="line">            order.setProductId(orderDTO.getProductId());</span><br><span class="line">            order.setQuantity(orderDTO.getQuantity());</span><br><span class="line">            order.setCreateTime(LocalDateTime.now());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 保存订单</span></span><br><span class="line">            orderRepository.save(order);</span><br><span class="line">            </span><br><span class="line">            logger.info(<span class="string">&quot;Order created successfully with id=&#123;&#125;&quot;</span>, order.getId());</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Failed to create order: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Failed to create order&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 清除MDC上下文</span></span><br><span class="line">            MDC.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-分布式追踪与性能分析"><a href="#3-分布式追踪与性能分析" class="headerlink" title="3. 分布式追踪与性能分析"></a>3. 分布式追踪与性能分析</h3><p>分布式追踪可以帮助我们跟踪请求在分布式系统中的完整调用链路，识别性能瓶颈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Spring Cloud Sleuth和Zipkin实现分布式追踪</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TracingServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TracingServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分布式追踪配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span>  <span class="comment"># 采样率</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://zipkin-server:9411/</span>  <span class="comment"># Zipkin服务器地址</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure>

<h3 id="4-云原生监控告警实践"><a href="#4-云原生监控告警实践" class="headerlink" title="4. 云原生监控告警实践"></a>4. 云原生监控告警实践</h3><p>在云原生环境中，监控和告警是确保应用可靠性的重要保障：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Micrometer和Prometheus实现指标监控</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MeterRegistryCustomizer&lt;MeterRegistry&gt; <span class="title">metricsCommonTags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry -&gt; registry.config().commonTags(<span class="string">&quot;application&quot;</span>, <span class="string">&quot;my-application&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TimedAspect <span class="title">timedAspect</span><span class="params">(MeterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TimedAspect(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在方法上使用@Timed注解监控性能</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Timed(value = &quot;order.create&quot;, description = &quot;Time taken to create an order&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">createOrder</span><span class="params">(OrderDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建订单逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Timed(value = &quot;order.find&quot;, description = &quot;Time taken to find orders&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findOrdersByUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询订单逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置Prometheus监控和Grafana告警：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Prometheus配置</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;spring-actuator&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">&#x27;/actuator/prometheus&#x27;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">pod</span></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_label_app</span>]</span><br><span class="line">      <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">my-application</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Grafana告警规则</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">spring-boot-alerts</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighErrorRate</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">sum(rate(http_server_requests_seconds_count&#123;status=~&quot;5..&quot;&#125;[5m]))</span> <span class="string">/</span> <span class="string">sum(rate(http_server_requests_seconds_count[5m]))</span> <span class="string">*</span> <span class="number">100</span> <span class="string">&gt;</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;High error rate detected&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;Error rate is above 5% for 1 minute&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、总结与未来发展趋势展望-📝"><a href="#七、总结与未来发展趋势展望-📝" class="headerlink" title="七、总结与未来发展趋势展望 📝"></a>七、总结与未来发展趋势展望 📝</h2><p>通过本文的介绍，我们详细讲解了Java云原生应用的最佳实践，包括容器化策略、Kubernetes资源配置、微服务改造、GraalVM原生镜像优化、Serverless函数开发以及可观测性监控等方面的内容。</p>
<p>Java云原生应用的未来发展趋势主要包括以下几个方面：</p>
<ol>
<li><strong>更轻量级的运行时</strong>：随着GraalVM等技术的发展，Java应用的启动时间和内存占用将进一步减小</li>
<li><strong>更紧密的云平台集成</strong>：Java框架将与云平台提供的服务更紧密地集成，简化开发和部署</li>
<li><strong>更智能的运维</strong>：AI和机器学习技术将被更广泛地应用于云原生应用的监控、诊断和优化</li>
<li><strong>更强大的安全性</strong>：云原生安全技术将不断发展，提供更全面的安全保障</li>
<li><strong>更广泛的标准化</strong>：云原生相关的标准将不断完善，促进技术的规范化和互操作性</li>
</ol>
<p>构建云原生应用是一个持续学习和实践的过程。希望本文能够为你提供一些有用的指导和启发，帮助你在云原生时代构建更高效、更可靠的Java应用。如果你有任何问题或建议，欢迎在评论区留言讨论！😊</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>云原生</tag>
        <tag>Kubernetes</tag>
        <tag>DevOps</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据访问层优化实战</title>
    <url>/2025/02/15/database/2025-data-access-optimization/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Java数据访问层优化实战-🏎️"><a href="#Java数据访问层优化实战-🏎️" class="headerlink" title="Java数据访问层优化实战 🏎️"></a>Java数据访问层优化实战 🏎️</h1><p>大家好！👋 在Java应用开发中，数据访问层（DAL）的性能往往是整个应用性能的瓶颈。随着业务规模的扩大和数据量的增长，如何优化数据访问层的性能成为了开发团队必须面对的挑战。今天，我将和大家分享Java数据访问层优化的实战经验和最佳实践，帮助你构建高性能、高可用的数据访问层。</p>
<h2 id="一、数据访问层性能问题的根源与诊断-🕵️‍♂️"><a href="#一、数据访问层性能问题的根源与诊断-🕵️‍♂️" class="headerlink" title="一、数据访问层性能问题的根源与诊断 🕵️‍♂️"></a>一、数据访问层性能问题的根源与诊断 🕵️‍♂️</h2><h3 id="1-常见性能瓶颈分析"><a href="#1-常见性能瓶颈分析" class="headerlink" title="1. 常见性能瓶颈分析"></a>1. 常见性能瓶颈分析</h3><p>在Java应用中，数据访问层的性能问题主要来自以下几个方面：</p>
<ul>
<li><strong>数据库查询效率低</strong>：不合理的SQL语句、缺少必要的索引</li>
<li><strong>连接管理不当</strong>：连接池配置不合理、连接泄漏</li>
<li><strong>数据传输开销大</strong>：不必要的数据加载、序列化开销</li>
<li><strong>并发控制问题</strong>：锁竞争激烈、事务隔离级别设置不当</li>
<li><strong>应用层设计缺陷</strong>：N+1查询问题、频繁访问数据库</li>
</ul>
<h3 id="2-性能诊断工具与方法"><a href="#2-性能诊断工具与方法" class="headerlink" title="2. 性能诊断工具与方法"></a>2. 性能诊断工具与方法</h3><p>要优化数据访问层的性能，首先需要找到性能瓶颈所在。以下是一些常用的性能诊断工具和方法：</p>
<ul>
<li><strong>数据库层面</strong>：使用Explain分析SQL执行计划、监控慢查询日志</li>
<li><strong>应用层面</strong>：使用JProfiler、VisualVM等工具分析方法执行时间</li>
<li><strong>全链路追踪</strong>：使用SkyWalking、Zipkin等工具追踪请求链路</li>
<li><strong>连接池监控</strong>：监控连接池的状态和使用情况</li>
<li><strong>性能测试</strong>：使用JMeter、Gatling等工具进行压力测试</li>
</ul>
<h3 id="3-性能测试与基准分析"><a href="#3-性能测试与基准分析" class="headerlink" title="3. 性能测试与基准分析"></a>3. 性能测试与基准分析</h3><p>在优化数据访问层之前，进行性能测试并建立基准线是非常重要的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataAccessPerformanceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByIdPerformance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        <span class="keyword">int</span> iterations = <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iterations; i++) &#123;</span><br><span class="line">            userService.findUserById((<span class="keyword">long</span>) (i % <span class="number">1000</span> + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;执行&quot;</span> + iterations + <span class="string">&quot;次查询，耗时：&quot;</span> + stopWatch.getTotalTimeMillis() + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均每次查询耗时：&quot;</span> + (stopWatch.getTotalTimeMillis() / iterations) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、SQL优化策略与最佳实践-📝"><a href="#二、SQL优化策略与最佳实践-📝" class="headerlink" title="二、SQL优化策略与最佳实践 📝"></a>二、SQL优化策略与最佳实践 📝</h2><h3 id="1-索引优化技巧"><a href="#1-索引优化技巧" class="headerlink" title="1. 索引优化技巧"></a>1. 索引优化技巧</h3><p>索引是提高数据库查询性能的关键。以下是一些索引优化的技巧：</p>
<h4 id="1-1-合理设计索引"><a href="#1-1-合理设计索引" class="headerlink" title="1.1 合理设计索引"></a>1.1 合理设计索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为经常用于查询条件的列创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_name <span class="keyword">ON</span> <span class="keyword">user</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为经常用于排序和分组的列创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_create_time <span class="keyword">ON</span> <span class="keyword">order</span>(create_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合索引遵循最左前缀原则</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_name_age <span class="keyword">ON</span> <span class="keyword">user</span>(name, age);</span><br></pre></td></tr></table></figure>

<h4 id="1-2-避免索引失效"><a href="#1-2-避免索引失效" class="headerlink" title="1.2 避免索引失效"></a>1.2 避免索引失效</h4><p>以下情况可能导致索引失效：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 避免在索引列上进行计算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthday) <span class="operator">=</span> <span class="number">1990</span>; <span class="comment">-- 索引失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 避免使用IS NULL/IS NOT NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> email <span class="keyword">IS</span> <span class="keyword">NULL</span>; <span class="comment">-- 索引可能失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 避免使用NOT IN和LIKE &#x27;%...&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%张&#x27;</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用范围查询代替函数计算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> birthday <span class="keyword">BETWEEN</span> <span class="string">&#x27;1990-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1990-12-31&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对于NULL值，可以考虑使用默认值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="comment">-- 假设空字符串表示未设置邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用前缀匹配</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>; <span class="comment">-- 索引有效</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-定期维护索引"><a href="#1-3-定期维护索引" class="headerlink" title="1.3 定期维护索引"></a>1.3 定期维护索引</h4><p>定期检查和维护索引是保持数据库性能的重要措施：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL查看索引使用情况</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- PostgreSQL查看索引使用情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_user_indexes <span class="keyword">WHERE</span> schemaname <span class="operator">=</span> <span class="string">&#x27;public&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重建索引</span></span><br><span class="line"><span class="keyword">ALTER</span> INDEX idx_user_name REBUILD;</span><br></pre></td></tr></table></figure>

<h3 id="2-SQL查询优化技巧"><a href="#2-SQL查询优化技巧" class="headerlink" title="2. SQL查询优化技巧"></a>2. SQL查询优化技巧</h3><p>除了索引优化外，SQL查询本身的优化也非常重要：</p>
<h4 id="2-1-只查询需要的列"><a href="#2-1-只查询需要的列" class="headerlink" title="2.1 只查询需要的列"></a>2.1 只查询需要的列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 避免使用SELECT *</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, email <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 而不是</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-优化JOIN操作"><a href="#2-2-优化JOIN操作" class="headerlink" title="2.2 优化JOIN操作"></a>2.2 优化JOIN操作</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 小表驱动大表</span></span><br><span class="line"><span class="keyword">SELECT</span> u.name, o.order_no <span class="keyword">FROM</span> <span class="keyword">user</span> u <span class="keyword">JOIN</span> <span class="keyword">order</span> o <span class="keyword">ON</span> u.id <span class="operator">=</span> o.user_id <span class="keyword">WHERE</span> u.age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用STRAIGHT_JOIN强制连接顺序（仅MySQL）</span></span><br><span class="line"><span class="keyword">SELECT</span> STRAIGHT_JOIN u.name, o.order_no <span class="keyword">FROM</span> <span class="keyword">user</span> u <span class="keyword">JOIN</span> <span class="keyword">order</span> o <span class="keyword">ON</span> u.id <span class="operator">=</span> o.user_id <span class="keyword">WHERE</span> u.age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-使用LIMIT限制结果集大小"><a href="#2-3-使用LIMIT限制结果集大小" class="headerlink" title="2.3 使用LIMIT限制结果集大小"></a>2.3 使用LIMIT限制结果集大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span> LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用延迟关联优化大数据量分页</span></span><br><span class="line"><span class="keyword">SELECT</span> u.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span> LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">100000</span>) tmp</span><br><span class="line"><span class="keyword">ON</span> u.id <span class="operator">=</span> tmp.id;</span><br></pre></td></tr></table></figure>

<h3 id="3-数据库连接池优化"><a href="#3-数据库连接池优化" class="headerlink" title="3. 数据库连接池优化"></a>3. 数据库连接池优化</h3><p>数据库连接是宝贵的资源，合理配置和使用连接池可以显著提高应用性能：</p>
<h4 id="3-1-连接池配置优化"><a href="#3-1-连接池配置优化" class="headerlink" title="3.1 连接池配置优化"></a>3.1 连接池配置优化</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">5</span>  <span class="comment"># 最小空闲连接数</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span>  <span class="comment"># 最大连接池大小</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span>  <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span>  <span class="comment"># 空闲连接超时时间（毫秒）</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1800000</span>  <span class="comment"># 连接最大生命周期（毫秒）</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span>  <span class="comment"># 自动提交</span></span><br><span class="line">      <span class="attr">pool-name:</span> <span class="string">HikariCP</span>  <span class="comment"># 连接池名称</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-监控连接池状态"><a href="#3-2-监控连接池状态" class="headerlink" title="3.2 监控连接池状态"></a>3.2 监控连接池状态</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPoolMonitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 60000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitorConnectionPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource <span class="keyword">instanceof</span> HikariDataSource) &#123;</span><br><span class="line">            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;连接池名称: &quot;</span> + hikariDataSource.getPoolName());</span><br><span class="line">            System.out.println(<span class="string">&quot;当前活跃连接数: &quot;</span> + hikariDataSource.getHikariPoolMXBean().getActiveConnections());</span><br><span class="line">            System.out.println(<span class="string">&quot;当前空闲连接数: &quot;</span> + hikariDataSource.getHikariPoolMXBean().getIdleConnections());</span><br><span class="line">            System.out.println(<span class="string">&quot;当前等待连接数: &quot;</span> + hikariDataSource.getHikariPoolMXBean().getThreadsAwaitingConnection());</span><br><span class="line">            System.out.println(<span class="string">&quot;总连接数: &quot;</span> + hikariDataSource.getHikariPoolMXBean().getTotalConnections());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、ORM框架性能优化策略-🚀"><a href="#三、ORM框架性能优化策略-🚀" class="headerlink" title="三、ORM框架性能优化策略 🚀"></a>三、ORM框架性能优化策略 🚀</h2><h3 id="1-MyBatis性能优化"><a href="#1-MyBatis性能优化" class="headerlink" title="1. MyBatis性能优化"></a>1. MyBatis性能优化</h3><p>MyBatis是Java开发中常用的ORM框架，以下是一些性能优化技巧：</p>
<h4 id="1-1-使用ResultMap代替ResultType"><a href="#1-1-使用ResultMap代替ResultType" class="headerlink" title="1.1 使用ResultMap代替ResultType"></a>1.1 使用ResultMap代替ResultType</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐使用ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, name, email, create_time FROM user WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐大量使用ResultType，特别是对于复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-延迟加载与关联查询优化"><a href="#1-2-延迟加载与关联查询优化" class="headerlink" title="1.2 延迟加载与关联查询优化"></a>1.2 延迟加载与关联查询优化</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置全局延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用延迟加载查询关联对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;OrderResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_no&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderNo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者使用JOIN查询一次性加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findOrderWithUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;OrderWithUserResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT o.id, o.order_no, o.user_id, u.name, u.email</span><br><span class="line">    FROM `order` o</span><br><span class="line">    JOIN user u ON o.user_id = u.id</span><br><span class="line">    WHERE o.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-使用缓存提高查询效率"><a href="#1-3-使用缓存提高查询效率" class="headerlink" title="1.3 使用缓存提高查询效率"></a>1.3 使用缓存提高查询效率</h4><p>MyBatis提供了一级缓存和二级缓存：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在Mapper接口上启用二级缓存 --&gt;</span></span><br><span class="line">@CacheNamespace</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者在XML中配置缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Spring-Data-JPA-Hibernate性能优化"><a href="#2-Spring-Data-JPA-Hibernate性能优化" class="headerlink" title="2. Spring Data JPA/Hibernate性能优化"></a>2. Spring Data JPA/Hibernate性能优化</h3><p>对于使用Spring Data JPA或Hibernate的项目，可以采用以下优化策略：</p>
<h4 id="2-1-实体映射优化"><a href="#2-1-实体映射优化" class="headerlink" title="2.1 实体映射优化"></a>2.1 实体映射优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.Table(appliesTo = <span class="string">&quot;user&quot;</span>, indexes = &#123;</span><br><span class="line">    <span class="meta">@Index(name = &quot;idx_user_name&quot;, columnList = &quot;name&quot;)</span>,</span><br><span class="line">    <span class="meta">@Index(name = &quot;idx_user_email&quot;, columnList = &quot;email&quot;)</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, nullable = false, length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;email&quot;, nullable = false, length = 100, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他字段...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-查询优化"><a href="#2-2-查询优化" class="headerlink" title="2.2 查询优化"></a>2.2 查询优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用@Query注解自定义SQL</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT u.id, u.name, u.email FROM user u WHERE u.age &gt; ?1&quot;, nativeQuery = true)</span></span><br><span class="line">    List&lt;Object[]&gt; findUsersByAgeGreaterThanNative(<span class="keyword">int</span> age);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用JPQL</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u FROM User u WHERE u.age &gt; :age&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsersByAgeGreaterThan</span><span class="params">(<span class="meta">@Param(&quot;age&quot;)</span> <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用派生查询</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByCreateTimeAfter</span><span class="params">(LocalDateTime createTime)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-批量操作优化"><a href="#2-3-批量操作优化" class="headerlink" title="2.3 批量操作优化"></a>2.3 批量操作优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchInsert</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">            entityManager.persist(users.get(i));</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50条刷新一次</span></span><br><span class="line">                entityManager.flush();</span><br><span class="line">                entityManager.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        entityManager.flush();</span><br><span class="line">        entityManager.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdate</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用HQL批量更新</span></span><br><span class="line">        Query query = entityManager.createQuery(<span class="string">&quot;UPDATE User u SET u.name = :name WHERE u.id = :id&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            query.setParameter(<span class="string">&quot;name&quot;</span>, user.getName())</span><br><span class="line">                 .setParameter(<span class="string">&quot;id&quot;</span>, user.getId())</span><br><span class="line">                 .executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-抓取策略优化"><a href="#2-4-抓取策略优化" class="headerlink" title="2.4 抓取策略优化"></a>2.4 抓取策略优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 延迟加载关联对象</span></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 延迟加载集合</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;order&quot;, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; orderItems;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用JPQL的JOIN FETCH来避免N+1问题</span></span><br><span class="line"><span class="meta">@Query(&quot;SELECT o FROM Order o JOIN FETCH o.user JOIN FETCH o.orderItems WHERE o.id = :id&quot;)</span></span><br><span class="line"><span class="function">Order <span class="title">findOrderWithDetails</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="四、多级缓存架构设计与实现-💾"><a href="#四、多级缓存架构设计与实现-💾" class="headerlink" title="四、多级缓存架构设计与实现 💾"></a>四、多级缓存架构设计与实现 💾</h2><h3 id="1-多级缓存架构概述"><a href="#1-多级缓存架构概述" class="headerlink" title="1. 多级缓存架构概述"></a>1. 多级缓存架构概述</h3><p>为了进一步提高数据访问性能，我们可以引入多级缓存架构。一个典型的多级缓存架构包括：</p>
<ul>
<li><strong>一级缓存</strong>：应用内存缓存（如Caffeine、Ehcache）</li>
<li><strong>二级缓存</strong>：分布式缓存（如Redis、Memcached）</li>
<li><strong>三级缓存</strong>：数据库缓存</li>
</ul>
<h3 id="2-本地缓存实现（Caffeine）"><a href="#2-本地缓存实现（Caffeine）" class="headerlink" title="2. 本地缓存实现（Caffeine）"></a>2. 本地缓存实现（Caffeine）</h3><p>Caffeine是Java中高性能的本地缓存库，我们可以用它来实现一级缓存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CaffeineCacheManager cacheManager = <span class="keyword">new</span> CaffeineCacheManager();</span><br><span class="line">        cacheManager.setCaffeine(Caffeine.newBuilder()</span><br><span class="line">                .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)  <span class="comment">// 写入后10分钟过期</span></span><br><span class="line">                .maximumSize(<span class="number">1000</span>)  <span class="comment">// 最大缓存项数</span></span><br><span class="line">                .recordStats());  <span class="comment">// 记录缓存统计信息</span></span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CachePut(key = &quot;#user.id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.update(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        userMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-分布式缓存实现（Redis）"><a href="#3-分布式缓存实现（Redis）" class="headerlink" title="3. 分布式缓存实现（Redis）"></a>3. 分布式缓存实现（Redis）</h3><p>Redis是一个高性能的分布式缓存系统，我们可以用它来实现二级缓存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置序列化器</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line">        </span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofMinutes(<span class="number">10</span>))  <span class="comment">// 缓存过期时间</span></span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(</span><br><span class="line">                        <span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-多级缓存整合与数据一致性保证"><a href="#4-多级缓存整合与数据一致性保证" class="headerlink" title="4. 多级缓存整合与数据一致性保证"></a>4. 多级缓存整合与数据一致性保证</h3><p>在使用多级缓存时，保证数据一致性是一个挑战。以下是一些常用的数据一致性保证策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先从Redis缓存获取</span></span><br><span class="line">        String key = <span class="string">&quot;user:&quot;</span> + id;</span><br><span class="line">        User user = (User) redisTemplate.opsForValue().get(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Redis缓存不存在，从数据库获取</span></span><br><span class="line">        user = userMapper.findById(id);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将数据放入Redis缓存</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, user, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 更新数据库</span></span><br><span class="line">        userMapper.update(user);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 淘汰缓存</span></span><br><span class="line">        String key = <span class="string">&quot;user:&quot;</span> + user.getId();</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除数据库记录</span></span><br><span class="line">        userMapper.delete(id);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 淘汰缓存</span></span><br><span class="line">        String key = <span class="string">&quot;user:&quot;</span> + id;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于更复杂的场景，可以考虑使用消息队列来实现缓存的异步更新或淘汰：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheSyncService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncCache</span><span class="params">(String cacheKey, String operation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 发送缓存同步消息</span></span><br><span class="line">        String message = operation + <span class="string">&quot;:&quot;</span> + cacheKey;</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;cache-sync-topic&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheSyncConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;cache-sync-topic&quot;, groupId = &quot;cache-sync-group&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleCacheSyncMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解析消息并同步缓存</span></span><br><span class="line">        String[] parts = message.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (parts.length == <span class="number">2</span>) &#123;</span><br><span class="line">            String operation = parts[<span class="number">0</span>];</span><br><span class="line">            String cacheKey = parts[<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;delete&quot;</span>.equals(operation)) &#123;</span><br><span class="line">                redisTemplate.delete(cacheKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、读写分离与分库分表策略-📊"><a href="#五、读写分离与分库分表策略-📊" class="headerlink" title="五、读写分离与分库分表策略 📊"></a>五、读写分离与分库分表策略 📊</h2><p>当数据量达到一定规模时，单一数据库可能无法满足性能需求，此时我们需要考虑读写分离和分库分表策略。</p>
<h3 id="1-读写分离实现"><a href="#1-读写分离实现" class="headerlink" title="1. 读写分离实现"></a>1. 读写分离实现</h3><p>读写分离是指将数据库的读操作和写操作分离到不同的数据库实例上，以提高系统的并发处理能力：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://master-db:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">slave1:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://slave1-db:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">slave2:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://slave2-db:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br></pre></td></tr></table></figure>

<p>实现动态数据源切换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceContextHolder.getDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceContextHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSourceType</span><span class="params">(String dataSourceType)</span> </span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.set(dataSourceType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSourceType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSourceType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.mapper.*.select*(..)) || execution(* com.example.mapper.*.get*(..)) || execution(* com.example.mapper.*.find*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readPointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.mapper.*.insert*(..)) || execution(* com.example.mapper.*.update*(..)) || execution(* com.example.mapper.*.delete*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writePointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;readPointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 简单的轮询策略</span></span><br><span class="line">        <span class="keyword">int</span> slaveIndex = ThreadLocalRandom.current().nextInt(<span class="number">2</span>);</span><br><span class="line">        DataSourceContextHolder.setDataSourceType(<span class="string">&quot;slave&quot;</span> + (slaveIndex + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;writePointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceContextHolder.setDataSourceType(<span class="string">&quot;master&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After(&quot;readPointCut() || writePointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceContextHolder.clearDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-分库分表策略"><a href="#2-分库分表策略" class="headerlink" title="2. 分库分表策略"></a>2. 分库分表策略</h3><p>当单表数据量过大时，我们需要考虑分库分表策略。分库分表可以分为水平分库分表和垂直分库分表两种方式：</p>
<h4 id="2-1-水平分表实现（基于ShardingSphere）"><a href="#2-1-水平分表实现（基于ShardingSphere）" class="headerlink" title="2.1 水平分表实现（基于ShardingSphere）"></a>2.1 水平分表实现（基于ShardingSphere）</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,</span> <span class="string">ds1</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/db0?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/db1?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="attr">sharding:</span></span><br><span class="line">        <span class="attr">tables:</span></span><br><span class="line">          <span class="attr">order:</span></span><br><span class="line">            <span class="attr">actual-data-nodes:</span> <span class="string">ds$&#123;0..1&#125;.order_$&#123;0..1&#125;</span></span><br><span class="line">            <span class="attr">database-strategy:</span></span><br><span class="line">              <span class="attr">inline:</span></span><br><span class="line">                <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">                <span class="attr">algorithm-expression:</span> <span class="string">ds$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">            <span class="attr">table-strategy:</span></span><br><span class="line">              <span class="attr">inline:</span></span><br><span class="line">                <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">                <span class="attr">algorithm-expression:</span> <span class="string">order_$&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">            <span class="attr">key-generator:</span></span><br><span class="line">              <span class="attr">column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-垂直分库分表"><a href="#2-2-垂直分库分表" class="headerlink" title="2.2 垂直分库分表"></a>2.2 垂直分库分表</h4><p>垂直分库分表是将表按照业务功能或模块进行拆分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 垂直分表示例：将用户表拆分为基本信息表和扩展信息表</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user_base&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBase</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">// 其他常用字段...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user_ext&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserExt</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String bio;</span><br><span class="line">    <span class="comment">// 其他不常用字段...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserBaseRepository userBaseRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserExtRepository userExtRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">getUserDetail</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 分别查询两张表，然后合并结果</span></span><br><span class="line">        UserBase userBase = userBaseRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">        UserExt userExt = userExtRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (userBase == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        UserDTO userDTO = <span class="keyword">new</span> UserDTO();</span><br><span class="line">        <span class="comment">// 复制属性...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> userDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、高级优化：异步处理与批量操作-⚡"><a href="#六、高级优化：异步处理与批量操作-⚡" class="headerlink" title="六、高级优化：异步处理与批量操作 ⚡"></a>六、高级优化：异步处理与批量操作 ⚡</h2><h3 id="1-异步查询与并行处理"><a href="#1-异步查询与并行处理" class="headerlink" title="1. 异步查询与并行处理"></a>1. 异步查询与并行处理</h3><p>对于耗时的查询操作，我们可以使用异步处理和并行处理来提高效率：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;List&lt;Order&gt;&gt; findOrdersByUserIdAsync(Long userId) &#123;</span><br><span class="line">        List&lt;Order&gt; orders = orderMapper.findByUserId(userId);</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(orders);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderDetailDTO <span class="title">getOrderDetail</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 并行查询订单、商品和用户信息</span></span><br><span class="line">        CompletableFuture&lt;Order&gt; orderFuture = CompletableFuture.supplyAsync(() -&gt; </span><br><span class="line">            orderMapper.findById(orderId)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        CompletableFuture&lt;List&lt;Product&gt;&gt; productsFuture = orderFuture.thenApplyAsync(order -&gt; </span><br><span class="line">            productMapper.findByOrderId(orderId)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        CompletableFuture&lt;User&gt; userFuture = orderFuture.thenApplyAsync(order -&gt; </span><br><span class="line">            userMapper.findById(order.getUserId())</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待所有查询完成并合并结果</span></span><br><span class="line">        CompletableFuture&lt;OrderDetailDTO&gt; resultFuture = CompletableFuture.allOf(orderFuture, productsFuture, userFuture)</span><br><span class="line">            .thenApplyAsync(v -&gt; &#123;</span><br><span class="line">                OrderDetailDTO dto = <span class="keyword">new</span> OrderDetailDTO();</span><br><span class="line">                dto.setOrder(orderFuture.join());</span><br><span class="line">                dto.setProducts(productsFuture.join());</span><br><span class="line">                dto.setUser(userFuture.join());</span><br><span class="line">                <span class="keyword">return</span> dto;</span><br><span class="line">            &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> resultFuture.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;获取订单详情失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-批量操作优化"><a href="#2-批量操作优化" class="headerlink" title="2. 批量操作优化"></a>2. 批量操作优化</h3><p>批量操作可以显著减少数据库交互次数，提高性能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchOperationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchInsertUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;INSERT INTO user (name, email, age) VALUES (?, ?, ?)&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        jdbcTemplate.batchUpdate(sql, <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                User user = users.get(i);</span><br><span class="line">                ps.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">                ps.setString(<span class="number">2</span>, user.getEmail());</span><br><span class="line">                ps.setInt(<span class="number">3</span>, user.getAge());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> users.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdateUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 分批处理，每批处理1000条</span></span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> totalSize = users.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalSize; i += batchSize) &#123;</span><br><span class="line">            <span class="keyword">int</span> endIndex = Math.min(i + batchSize, totalSize);</span><br><span class="line">            List&lt;User&gt; batchUsers = users.subList(i, endIndex);</span><br><span class="line">            </span><br><span class="line">            String sql = <span class="string">&quot;UPDATE user SET name = ?, email = ?, age = ? WHERE id = ?&quot;</span>;</span><br><span class="line">            jdbcTemplate.batchUpdate(sql, <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> j)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                    User user = batchUsers.get(j);</span><br><span class="line">                    ps.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">                    ps.setString(<span class="number">2</span>, user.getEmail());</span><br><span class="line">                    ps.setInt(<span class="number">3</span>, user.getAge());</span><br><span class="line">                    ps.setLong(<span class="number">4</span>, user.getId());</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> batchUsers.size();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、总结与持续优化建议-📋"><a href="#七、总结与持续优化建议-📋" class="headerlink" title="七、总结与持续优化建议 📋"></a>七、总结与持续优化建议 📋</h2><p>通过本文的介绍，我们详细讲解了Java数据访问层优化的各种策略和最佳实践，包括SQL优化、ORM框架优化、多级缓存架构、读写分离与分库分表、异步处理与批量操作等方面的内容。</p>
<p>以下是一些持续优化的建议：</p>
<ol>
<li><p><strong>建立性能基准</strong>：定期进行性能测试，建立性能基准，以便及时发现性能问题。</p>
</li>
<li><p><strong>监控与告警</strong>：建立完善的数据访问层监控体系，及时发现和解决性能问题。</p>
</li>
<li><p><strong>持续学习与实践</strong>：数据库技术和优化方法在不断发展，需要持续学习和实践。</p>
</li>
<li><p><strong>结合业务场景</strong>：不同的业务场景有不同的优化需求，需要根据具体情况选择合适的优化策略。</p>
</li>
<li><p><strong>性能与代码可维护性平衡</strong>：在追求性能的同时，也要考虑代码的可维护性，避免过度优化。</p>
</li>
</ol>
<p>数据访问层优化是一个持续的过程，需要不断地监控、分析和优化。希望本文能够为你提供一些有用的指导和启发。如果你有任何问题或建议，欢迎在评论区留言讨论！😊</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据访问</tag>
        <tag>性能优化</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成数据库版本管理工具 Flyway</title>
    <url>/2020/06/21/database/spring-boot-flyway-database-version-control/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="为什么要进行数据库版本控制？"><a href="#为什么要进行数据库版本控制？" class="headerlink" title="为什么要进行数据库版本控制？"></a>为什么要进行数据库版本控制？</h4><p>假设我们有一个名为 <em>Shiny</em> 的项目，其主要交付项目是一个名为 <em>Shiny Soft</em> 的软件，该软件连接到名为 <em>Shiny DB</em> 的数据库。<br>最简单的图可能看起来像这样：<br><img data-src="%5Cassets/picture/spring-boot-flyway-database-version-control/SimpleView.png" alt="img"></p>
<span id="more"></span>

<p>但是在大多数项目中，我们的数据库都是像以下这样：<br><img data-src="\assets/picture/spring-boot-flyway-database-version-control/Environments.png" alt="img" style="zoom:70%;" /><br>通常，我们的环境不仅仅只有一套，一般来说会有 DEV、TEST、PROD 三套环境。<br>而在每次发版的时候，我们可能都会对数据库的表结构进行新增和变更，又或者需要插入一些初始化的数据。<br>那么，就意味着我们需要对 DEV、TEST、PROD 数据库都做一遍操作。<br>很多时候，我们并不能保证像机器一样，每次都操作都正确，很快出现了许多问题：</p>
<ul>
<li>该计算机上的数据库处于什么状态？</li>
<li>此脚本是否已经应用？</li>
<li>之后，生产中的快速修复是否已在测试中应用？</li>
<li>如何设置新的数据库实例？</li>
</ul>
<p>这些问题的答案常常是：我们不知道。</p>
<p><strong>数据库版本控制是控制这种混乱的好方法。</strong>本文就带大家入门一个数据库版本控制工具 Flyway。</p>
<h4 id="什么是-Flyway"><a href="#什么是-Flyway" class="headerlink" title="什么是 Flyway"></a>什么是 Flyway</h4><p>在 Flyway 的官网 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcv">https://flywaydb.org/<i class="fa fa-external-link-alt"></i></span> 中，对自己的介绍是：</p>
<blockquote>
<p>Version control for your database.<br>Robust schema evolution across all your environments.<br>With ease, pleasure and plain SQL.</p>
<p>即 数据库的版本控制。<br>使用轻松简单的 SQL 在所有环境中进行稳健的架构演变。</p>
</blockquote>
<p>Flyway 提供了 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">SQL-based migrations<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">Java-based migrations<i class="fa fa-external-link-alt"></i></span> 两种数据库变更方式。本文将分别用这两种方式来演示如何使用 Flyway。</p>
<h4 id="Spring-Boot-集成-Flyway"><a href="#Spring-Boot-集成-Flyway" class="headerlink" title="Spring Boot 集成 Flyway"></a>Spring Boot 集成 Flyway</h4><p>在 Spring Boot 项目中，提供了对 Flyway 的内置支持。基本上能实现开箱即用。</p>
<h5 id="1-首先创建一个-Spring-Boot-项目。"><a href="#1-首先创建一个-Spring-Boot-项目。" class="headerlink" title="1. 首先创建一个 Spring Boot 项目。"></a>1. 首先创建一个 Spring Boot 项目。</h5><h5 id="2-pom-xml-文件引入-Flyway-依赖"><a href="#2-pom-xml-文件引入-Flyway-依赖" class="headerlink" title="2.  pom.xml 文件引入 Flyway 依赖"></a>2.  <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/pom.xml"><code>pom.xml</code></a> 文件引入 <code>Flyway</code> 依赖</h5><p>在 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/pom.xml"><code>pom.xml</code></a>文件中，引入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 实现对数据库连接池的自动化配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot-starter-jdbc 支持 Flyway 的自动化配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 本文 Mysql 使用的 5.6 版本,所以 flyway 选择 5.2.4,高版本 Flyway 需升级 mysql 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-配置-application-properties"><a href="#3-配置-application-properties" class="headerlink" title="3. 配置 application.properties"></a>3. 配置 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/application.properties"><code>application.properties</code></a></h5><p><a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/application.properties"><code>application.properties</code></a> 配置如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://yizhuo.com:3306/flyway?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="comment"># 数据库驱动</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库账号</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">12345</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启 Flyway 功能</span></span><br><span class="line"><span class="meta">spring.flyway.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 禁用 Flyway 所有的 drop 相关的逻辑，避免出现跑路的情况。</span></span><br><span class="line"><span class="meta">spring.flyway.cleanDisabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># Flyway 版本控制所使用的表名 默认为 flyway_schema_history</span></span><br><span class="line"><span class="meta">spring.flyway.table</span>=<span class="string">flyway_history</span></span><br><span class="line"><span class="comment"># 配置 SQL-based 的 SQL 脚本在该目录下，默认配置即 classpath:db/migration</span></span><br><span class="line"><span class="meta">spring.flyway.locations[0]</span>=<span class="string">classpath:db/migration</span></span><br><span class="line"><span class="comment"># 配置 Java-based 的 Java 类在该目录下</span></span><br><span class="line"><span class="meta">spring.flyway.locations[1]</span>=<span class="string">classpath:com.github.zhuyizhuo.flyway.demo.migration</span></span><br><span class="line"><span class="comment"># 是否校验迁移脚本目录。如果配置为 true，代表需要校验, 如果目录下没有迁移脚本，会抛出 IllegalStateException 异常</span></span><br><span class="line"><span class="meta">spring.flyway.check-location</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="meta">spring.flyway.url</span>=<span class="string">$&#123;spring.datasource.url&#125;</span></span><br><span class="line"><span class="comment"># 数据库账号</span></span><br><span class="line"><span class="meta">spring.flyway.user</span>=<span class="string">$&#123;spring.datasource.username&#125;</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="meta">spring.flyway.password</span>=<span class="string">$&#123;spring.datasource.password&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-SQL-based-migrations-创建-SQL-迁移脚本"><a href="#4-SQL-based-migrations-创建-SQL-迁移脚本" class="headerlink" title="4. SQL-based migrations 创建 SQL 迁移脚本"></a>4. <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">SQL-based migrations<i class="fa fa-external-link-alt"></i></span> 创建 SQL 迁移脚本</h5><p>在 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/"><code>resources/db/migration</code></a> 目录下，创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/V1.0__INIT_USERS.sql"><code>V1.0__INIT_USERS.sql</code></a> SQL 迁移脚本。内容如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一条数据 密码为 123456 MD5 加密的 32 位大写</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(username, password, create_time) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;E10ADC3949BA59ABBE56E057F20F883E&#x27;</span>, now());</span><br></pre></td></tr></table></figure>

<p>Flyway 规定脚本  <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/V1.0__INIT_USERS.sql"><code>V1.0__INIT_USERS.sql</code></a>  的命名必须遵循以下命名模式：<br><img data-src="%5Cassets/picture/spring-boot-flyway-database-version-control/image-20200621174844867.png" alt="flyway-naming"></p>
<ul>
<li>Prefix 前缀 <ul>
<li><code>V</code>用于版本控制（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3NxbE1pZ3JhdGlvblByZWZpeA==">配置<i class="fa fa-external-link-alt"></i></span>）， <code>U</code>用于撤消迁移（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3VuZG9TcWxNaWdyYXRpb25QcmVmaXg=">配置<i class="fa fa-external-link-alt"></i></span>）和 <code>R</code>用于可重复迁移（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3JlcGVhdGFibGVTcWxNaWdyYXRpb25QcmVmaXg=">配置<i class="fa fa-external-link-alt"></i></span>）。</li>
<li><strong>版本化的迁移</strong>具有<strong>版本</strong>，<strong>描述</strong>和<strong>校验和</strong>。版本化迁移是最常见的迁移类型。它们仅按顺序<strong>应用一次</strong>。<strong>版本化迁移</strong>通常用于：<ul>
<li>创建/更改/删除表/…</li>
<li>参考数据更新</li>
<li>用户数据更正</li>
</ul>
</li>
<li><strong>撤销迁移</strong>负责撤消具有相同版本的版本化迁移的影响。<strong>不建议在线上使用</strong>，原因参考 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI2ltcG9ydGFudC1ub3Rlcw==">Flyway 官网<i class="fa fa-external-link-alt"></i></span></li>
<li><strong>可重复的迁移</strong>有<strong>描述</strong>和<strong>校验和</strong>，但没有版本。每次校验和更改时（重新）应用它们，而不是仅运行一次。<br>这对于管理数据库对象非常有用，该数据库对象的定义随后可以在版本控制中仅保存在单个文件中。它们通常用于<ul>
<li>（重新）创建视图/过程/功能/包/…</li>
<li>批量插入参考数据</li>
</ul>
</li>
</ul>
</li>
<li>Version 版本号 <ul>
<li>每一个迁移脚本，都需要一个对应一个<strong>唯一的版本号</strong>。只要符合通常的点分符号，任何版本都是有效的。<strong>在大多数情况下，只需要一个简单的递增整数即可</strong>。但是Flyway非常灵活，所有这些版本都是有效的版本迁移版本：<ul>
<li>001</li>
<li>5.2</li>
<li>1.2.3.4.5.6.7.8.9</li>
<li>20130115113556</li>
<li>2013.01.15.11.35.56<br>版本迁移按版本顺序应用。版本按照您通常期望的方式按数字排序。</li>
</ul>
</li>
<li>脚本的执行顺序，按照版本号的顺序。<strong>Flyway</strong> 是如何比较两个 <strong>SQL</strong> 文件的先后顺序呢？它采用 <strong>采用左对齐原则, 缺位用 0 代替</strong> 。举几个例子：<ul>
<li>1.0.1.1 比 1.0.1 版本高。</li>
<li>1.0.10 比 1.0.9.4 版本高。</li>
<li>1.0.10 和 1.0.010 版本号一样高, 每个版本号部分的前导 0 会被忽略。</li>
</ul>
</li>
</ul>
</li>
<li>Separator 分隔符：两个下划线 <code>_</code> ，即 <code>__</code> 。（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3NxbE1pZ3JhdGlvblNlcGFyYXRvcg==">配置<i class="fa fa-external-link-alt"></i></span>），一般使用缺省配置。</li>
<li>Description 描述：描述脚本的用途。</li>
<li>Suffix 后缀：<code>.sql</code> 。可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3NxbE1pZ3JhdGlvblN1ZmZpeGVz">配置<i class="fa fa-external-link-alt"></i></span>，一般使用缺省配置。</li>
</ul>
<h5 id="5-启动-Spring-Boot-项目"><a href="#5-启动-Spring-Boot-项目" class="headerlink" title="5. 启动 Spring Boot 项目"></a>5. 启动 Spring Boot 项目</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlywayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FlywayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-06-21 21:32:31.934  INFO 40674 --- [           main] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 5.2.4 by Boxfuse</span><br><span class="line">2020-06-21 21:32:37.590  INFO 40674 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://yizhuo.com:3306/flyway (MySQL 5.6)</span><br><span class="line">2020-06-21 21:32:37.780  WARN 40674 --- [           main] o.f.c.i.s.classpath.ClassPathScanner     : Unable to resolve location classpath:com/github/zhuyizhuo/flyway/demo/migration</span><br><span class="line">// 发现 1 个迁移脚本。</span><br><span class="line">2020-06-21 21:32:38.009  INFO 40674 --- [           main] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.148s)</span><br><span class="line">// 创建 management_flyway_schema_history 表</span><br><span class="line">2020-06-21 21:32:38.223  INFO 40674 --- [           main] o.f.c.i.s.JdbcTableSchemaHistory         : Creating Schema History table: `flyway`.`management_flyway_schema_history`</span><br><span class="line">// 当前数据库的迁移版本</span><br><span class="line">2020-06-21 21:32:38.699  INFO 40674 --- [           main] o.f.core.internal.command.DbMigrate      : Current version of schema `flyway`: &lt;&lt; Empty Schema &gt;&gt;</span><br><span class="line">// 开始执行当前迁移脚本 版本 1.0</span><br><span class="line">2020-06-21 21:32:38.729  INFO 40674 --- [           main] o.f.core.internal.command.DbMigrate      : Migrating schema `flyway` to version 1.0 - INIT USERS</span><br><span class="line">// MYSQL 告警日志 可忽略</span><br><span class="line">2020-06-21 21:32:38.876  WARN 40674 --- [           main] o.f.c.i.s.DefaultSqlScriptExecutor       : DB: Unknown table &#x27;flyway.users&#x27; (SQL State: 42S02 - Error Code: 1051)</span><br><span class="line">// 成功执行一个迁移</span><br><span class="line">2020-06-21 21:32:39.446  INFO 40674 --- [           main] o.f.core.internal.command.DbMigrate      : Successfully applied 1 migration to schema `flyway` (execution time 00:01.251s)</span><br><span class="line">2020-06-21 21:32:39.721  INFO 40674 --- [           main] c.g.z.flyway.demo.FlywayApplication      : Started FlywayApplication in 11.145 seconds (JVM running for 12.785)</span><br></pre></td></tr></table></figure>

<p>查看数据库，发现表已经正常创建。并且插入了初始化数据。<br><img data-src="\assets/picture/spring-boot-flyway-database-version-control/image-20200621215145105.png" alt="image-20200621215145105" style="zoom:50%;" /></p>
<p>在 <code>management_flyway_schema_history</code> 表中，出现了一条迁移脚本的记录：<br><img data-src="\assets/picture/spring-boot-flyway-database-version-control/image-20200621215313344.png" alt="image-20200621215313344" style="zoom:50%;" /></p>
<p>各字段含义如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `management_flyway_schema_history` (</span><br><span class="line">  `installed_rank` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 安装顺序，从 1 开始递增。</span></span><br><span class="line">  `version` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 版本号</span></span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 迁移脚本描述</span></span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 脚本类型，目前有 SQL 和 Java 。</span></span><br><span class="line">  `script` <span class="type">varchar</span>(<span class="number">1000</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 脚本地址</span></span><br><span class="line">  `checksum` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 脚本校验码。避免已经执行的脚本，被人变更了。</span></span><br><span class="line">  `installed_by` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行脚本的数据库用户</span></span><br><span class="line">  `installed_on` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 安装时间</span></span><br><span class="line">  `execution_time` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行时长，单位毫秒</span></span><br><span class="line">  `success` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行结果是否成功。1-成功。0-失败</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`installed_rank`),</span><br><span class="line">  KEY `management_flyway_schema_history_s_idx` (`success`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>再次启动项目，日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-06-21 21:55:05.064  INFO 40853 --- [           main] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 5.2.4 by Boxfuse</span><br><span class="line">2020-06-21 21:55:10.977  INFO 40853 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://yizhuo.com:3306/flyway (MySQL 5.6)</span><br><span class="line">2020-06-21 21:55:11.229  WARN 40853 --- [           main] o.f.c.i.s.classpath.ClassPathScanner     : Unable to resolve location classpath:com/github/zhuyizhuo/flyway/demo/migration</span><br><span class="line">2020-06-21 21:55:11.548  INFO 40853 --- [           main] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.212s)</span><br><span class="line">2020-06-21 21:55:11.827  INFO 40853 --- [           main] o.f.core.internal.command.DbMigrate      : Current version of schema `flyway`: 1.0</span><br><span class="line">2020-06-21 21:55:11.857  INFO 40853 --- [           main] o.f.core.internal.command.DbMigrate      : Schema `flyway` is up to date. No migration necessary.</span><br><span class="line">2020-06-21 21:55:12.257  INFO 40853 --- [           main] c.g.z.flyway.demo.FlywayApplication      : Started FlywayApplication in 12.763 seconds (JVM running for 14.531)</span><br></pre></td></tr></table></figure>
<p>会发现当前已经是最新版本，无需执行迁移。<br>我们来修改一下<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/V1.0__INIT_USERS.sql"><code>V1.0__INIT_USERS.sql</code></a> 脚本，在第一行插入一个空格，再次启动项目，会报如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.flywaydb.core.api.FlywayException: Validate failed: Migration checksum mismatch for migration version 1.0</span><br><span class="line">-&gt; Applied to database : -1350962438</span><br><span class="line">-&gt; Resolved locally    : -1984295967</span><br></pre></td></tr></table></figure>

<p>根据提示信息可以看出，因为该脚本的校验和发生了变化，所以抛出异常。这样的设计，保证不会因为已执行的脚本被改动，而出现不一致的问题。</p>
<h5 id="6-Java-based-migrations-创建-Java-类-使用自定义类名"><a href="#6-Java-based-migrations-创建-Java-类-使用自定义类名" class="headerlink" title="6. Java-based migrations  创建 Java 类 [使用自定义类名]"></a>6. <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">Java-based migrations<i class="fa fa-external-link-alt"></i></span>  创建 Java 类 [使用自定义类名]</h5><p>在<code>com.github.zhuyizhuo.flyway.demo.migration</code>包下，创建 <code>UpdateUserName</code>类，修改<code>Users</code>中初始化数据的用户名，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateUserName</span> <span class="keyword">implements</span> <span class="title">JavaMigration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 JdbcTemplate ，方便 JDBC 操作</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(context.getConfiguration().getDataSource());</span><br><span class="line">        <span class="comment">// 查询所有用户，如果用户名为 张三 ，则变更成 李四</span></span><br><span class="line">        template.query(<span class="string">&quot;SELECT id, username, password, create_time FROM users&quot;</span>, <span class="keyword">new</span> RowCallbackHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRow</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                <span class="comment">// 遍历返回的结果</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;张三&quot;</span>.equals(username)) &#123;</span><br><span class="line">                        Integer id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        template.update(<span class="string">&quot;UPDATE users SET username = ? WHERE id = ?&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;李四&quot;</span>, id);</span><br><span class="line">                        logger.info(<span class="string">&quot;[migrate][更新 user(&#123;&#125;) 的用户名(&#123;&#125; =&gt; &#123;&#125;)&quot;</span>, id, username, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (rs.next());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/** 版本号为 1.1 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MigrationVersion <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MigrationVersion.fromVersion(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/** 描述 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update user name&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUndo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/** 执行是否应在事务内部进行 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canExecuteInTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认校验和为 0  需重写 返回自己自定义计算的校验和 此处 demo 返回固定值11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getChecksum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-再次启动-Spring-Boot-项目"><a href="#7-再次启动-Spring-Boot-项目" class="headerlink" title="7. 再次启动 Spring Boot 项目"></a>7. 再次启动 Spring Boot 项目</h5><p>执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-06-21 22:17:27.999  INFO 41175 --- [           main] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 5.2.4 by Boxfuse</span><br><span class="line">2020-06-21 22:17:33.717  INFO 41175 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://yizhuo.com:3306/flyway (MySQL 5.6)</span><br><span class="line">2020-06-21 22:17:34.135  INFO 41175 --- [           main] o.f.core.internal.command.DbValidate     : Successfully validated 2 migrations (execution time 00:00.189s)</span><br><span class="line">2020-06-21 22:17:34.410  INFO 41175 --- [           main] o.f.core.internal.command.DbMigrate      : Current version of schema `flyway`: 1.0</span><br><span class="line">2020-06-21 22:17:34.441  INFO 41175 --- [           main] o.f.core.internal.command.DbMigrate      : Migrating schema `flyway` to version 1.1 - update user name</span><br><span class="line">2020-06-21 22:17:35.067  INFO 41175 --- [           main] c.g.z.f.demo.migration.UpdateUserName    : [migrate][更新 user(1) 的用户名(张三 =&gt; 李四)</span><br><span class="line">2020-06-21 22:17:35.410  INFO 41175 --- [           main] o.f.core.internal.command.DbMigrate      : Successfully applied 1 migration to schema `flyway` (execution time 00:01.126s)</span><br><span class="line">2020-06-21 22:17:35.667  INFO 41175 --- [           main] c.g.z.flyway.demo.FlywayApplication      : Started FlywayApplication in 12.281 seconds (JVM running for 14.572)</span><br></pre></td></tr></table></figure>

<p>再次查询 mysql ，发现数据已经被更新<br><img data-src="\assets/picture/spring-boot-flyway-database-version-control/image-20200621222842067.png" alt="image-20200621222842067" style="zoom:70%;" /><br>并且在 <code>management_flyway_schema_history</code> 表中，增加了一条版本号为<code>1.1</code>的迁移脚本的日志。<br><img data-src="\assets/picture/spring-boot-flyway-database-version-control/image-20200621222930230.png" alt="image-20200621222930230" style="zoom:50%;" /></p>
<h5 id="8-Java-based-migrations-创建-Java-类-使用-Flyway-的命名方式命名"><a href="#8-Java-based-migrations-创建-Java-类-使用-Flyway-的命名方式命名" class="headerlink" title="8. Java-based migrations  创建 Java 类 [使用 Flyway 的命名方式命名]"></a>8. <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">Java-based migrations<i class="fa fa-external-link-alt"></i></span>  创建 Java 类 [使用 Flyway 的命名方式命名]</h5><p>在<code>com.github.zhuyizhuo.flyway.demo.migration</code>包下，创建 <code>V1_2__Another_user</code>类，新增初始化数据，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V1_2__Another_user</span> <span class="keyword">extends</span> <span class="title">BaseJavaMigration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JdbcTemplate(<span class="keyword">new</span> SingleConnectionDataSource(context.getConnection(), <span class="keyword">true</span>))</span><br><span class="line">                .execute(<span class="string">&quot;INSERT INTO users (username, password, create_time) VALUES (&#x27;James&#x27;, &#x27;E10ADC3949BA59ABBE56E057F20F883E&#x27;, now())&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认校验和为 0  需重写 返回自己自定义计算的校验和 此处 demo 返回固定值12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getChecksum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次启动项目。日志省略。<br>查看数据库数据，新增了一条<code> James</code> 的数据如下：</p>
<img data-src="\assets/picture/spring-boot-flyway-database-version-control/image-20200621225335153.png" alt="image-20200621225335153" style="zoom:70%;" />

<p>在 <code>management_flyway_schema_history</code> 表中，增加了一条版本号为<code>1.2</code>的迁移脚本的日志。<img data-src="\assets/picture/spring-boot-flyway-database-version-control/image-20200621225959300.png" alt="image-20200621225959300" style="zoom:50%;" /></p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>本文的完整工程可以查看下面仓库中的<code>spring-boot-samples-flyway</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Original</tag>
        <tag>Flyway</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成数据库版本管理工具 Liquibase</title>
    <url>/2020/07/04/database/spring-boot-liquibase-database-version-control/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://zhuyizhuo.oss-cn-beijing.aliyuncs.com/image/1.jpeg" alt="photo"></p>
<p>在 Spring Boot 项目中，提供了对 Liquibase 的内置支持。</p>
<span id="more"></span>

<blockquote>
<p>什么是数据库版本控制？为什么要进行数据库版本控制？可参考我上一篇文章 <span class="exturl" data-url="aHR0cDovL3podXlpemh1by5vbmxpbmUvMjAyMC8wNi8yMS9zcHJpbmctYm9vdC1mbHl3YXktZGF0YWJhc2UtdmVyc2lvbi1jb250cm9sLw==">SpringBoot 集成数据库版本管理工具 Flyway<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>Liquibase 通过在变更日志(<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL2RhdGFiYXNlY2hhbmdlbG9nLmh0bWw=">Change Log<i class="fa fa-external-link-alt"></i></span>)文件，配置每一个变更集(<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL2NoYW5nZXNldC5odG1s">Change Set<i class="fa fa-external-link-alt"></i></span>)，实现数据库变更的管理。</p>
<p>Liquibase 提供了多种格式，如下：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL3htbF9mb3JtYXQuaHRtbA==">XML Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL3lhbWxfZm9ybWF0Lmh0bWw=">YAML Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL2pzb25fZm9ybWF0Lmh0bWw=">JSON Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL3NxbF9mb3JtYXQuaHRtbA==">SQL Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL290aGVyX2Zvcm1hdHMuaHRtbA==">Other Formats<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>在 Spring Boot 中，默认配置使用 YAML Format 。所以我们在入门的示例中，也使用这种格式。</p>
<p>下面，就让我们开始入门 Liquibase 吧。</p>
<h5 id="1-首先创建一个-Spring-Boot-项目。"><a href="#1-首先创建一个-Spring-Boot-项目。" class="headerlink" title="1. 首先创建一个 Spring Boot 项目。"></a>1. 首先创建一个 Spring Boot 项目。</h5><h5 id="2-pom-xml-文件引入-Liquibase-依赖"><a href="#2-pom-xml-文件引入-Liquibase-依赖" class="headerlink" title="2.  pom.xml 文件引入 Liquibase 依赖"></a>2.  <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/pom.xml"><code>pom.xml</code></a> 文件引入 <code>Liquibase</code> 依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 实现对数据库连接池的自动化配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 同时，spring-boot-starter-jdbc 支持 Liquibase 的自动化配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 MySQL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Liquibase 依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.liquibase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liquibase-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-配置-application-yaml"><a href="#3-配置-application-yaml" class="headerlink" title="3. 配置 application.yaml"></a>3. 配置 <a href="https://github.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/application.yaml"><code>application.yaml</code></a></h5><p><a href="https://github.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/application.yaml"><code>application.yaml</code></a> 配置如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># datasource 数据源配置内容，对应 DataSourceProperties 配置属性类</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/github_demo?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 数据库账号</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 数据库密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;MYSQL_PWD:123456&#125;</span></span><br><span class="line">  <span class="comment"># Liquibase 配置内容，对应 LiquibaseProperties 配置项</span></span><br><span class="line">  <span class="attr">liquibase:</span></span><br><span class="line">    <span class="comment"># 开启 Liquibase 功能。默认为 true 。</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Liquibase 配置文件地址</span></span><br><span class="line">    <span class="attr">change-log:</span> <span class="string">classpath:/db/changelog/db_changelog.yaml</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">$&#123;spring.datasource.url&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;spring.datasource.username&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;spring.datasource.password&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-基于-SQL-的版本控制"><a href="#4-基于-SQL-的版本控制" class="headerlink" title="4. 基于 SQL 的版本控制"></a>4. 基于 SQL 的版本控制</h5><h6 id="在-resources-db-changelog目录下创建-db-changelog-yaml文件"><a href="#在-resources-db-changelog目录下创建-db-changelog-yaml文件" class="headerlink" title="在 resources/db/changelog目录下创建 db_changelog.yaml文件"></a>在 <code>resources/db/changelog</code>目录下创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a>文件</h6><p>修改 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a> 变更日志，增加 <code>ID = 0</code> 的变更集合( Change Set ) ，不执行任何 SQL 。代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">databaseChangeLog:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">changeSet:</span> <span class="comment"># 对应一个 ChangeSet 对象</span></span><br><span class="line">      <span class="attr">id:</span> <span class="number">0</span> <span class="comment"># ChangeSet 编号</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">yizhuo</span> <span class="comment"># 作者</span></span><br><span class="line">      <span class="attr">comments:</span> <span class="string">空</span> <span class="comment"># 备注</span></span><br></pre></td></tr></table></figure>

<p>启动 Spring Boot 项目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiquibaseApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LiquibaseApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 20:25:22.804  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:22.885  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : CREATE TABLE github_demo.DATABASECHANGELOGLOCK (ID INT NOT NULL, `LOCKED` BIT(1) NOT NULL, LOCKGRANTED datetime NULL, LOCKEDBY VARCHAR(255) NULL, CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID))</span><br><span class="line">2020-07-04 20:25:23.017  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:23.037  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : DELETE FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:23.045  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOGLOCK (ID, `LOCKED`) VALUES (1, 0)</span><br><span class="line">2020-07-04 20:25:23.062  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 20:25:23.095  INFO 70787 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 20:25:24.929  INFO 70787 --- [           main] l.c.StandardChangeLogHistoryService      : Creating database history table with name: github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:24.930  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : CREATE TABLE github_demo.DATABASECHANGELOG (ID VARCHAR(255) NOT NULL, AUTHOR VARCHAR(255) NOT NULL, FILENAME VARCHAR(255) NOT NULL, DATEEXECUTED datetime NOT NULL, ORDEREXECUTED INT NOT NULL, EXECTYPE VARCHAR(10) NOT NULL, MD5SUM VARCHAR(35) NULL, `DESCRIPTION` VARCHAR(255) NULL, COMMENTS VARCHAR(255) NULL, TAG VARCHAR(255) NULL, LIQUIBASE VARCHAR(20) NULL, CONTEXTS VARCHAR(255) NULL, LABELS VARCHAR(255) NULL, DEPLOYMENT_ID VARCHAR(10) NULL)</span><br><span class="line">2020-07-04 20:25:25.007  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:25.012  INFO 70787 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:25.013  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">2020-07-04 20:25:25.019  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:25.048  INFO 70787 --- [           main] liquibase.changelog.ChangeSet            : ChangeSet classpath:/db/changelog/db_changelog.yaml::0::yizhuo ran successfully in 7ms</span><br><span class="line">2020-07-04 20:25:25.050  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MAX(ORDEREXECUTED) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:25.054  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, `DESCRIPTION`, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES (&#x27;0&#x27;, &#x27;yizhuo&#x27;, &#x27;classpath:/db/changelog/db_changelog.yaml&#x27;, NOW(), 1, &#x27;8:d41d8cd98f00b204e9800998ecf8427e&#x27;, &#x27;empty&#x27;, &#x27;&#x27;, &#x27;EXECUTED&#x27;, NULL, NULL, &#x27;3.8.9&#x27;, &#x27;3865525034&#x27;)</span><br><span class="line">2020-07-04 20:25:25.101  INFO 70787 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br><span class="line">2020-07-04 20:25:25.387  INFO 70787 --- [           main] c.g.z.liquibase.LiquibaseApplication     : Started LiquibaseApplication in 8.936 seconds (JVM running for 10.127)</span><br></pre></td></tr></table></figure>

<p>在启动的日志中，我们看到 Liquibase 会自动创建两张表：</p>
<p> <code>DATABASECHANGELOG</code> ：数据库变更日志。每一条记录，对应记录每个变更集合( Change Set ) 的执行日志。表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `DATABASECHANGELOG` (</span><br><span class="line">  `ID` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- Change Set 编号</span></span><br><span class="line">  `AUTHOR` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 作者</span></span><br><span class="line">  `FILENAME` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- Change Log 文件路径</span></span><br><span class="line">  `DATEEXECUTED` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行时间</span></span><br><span class="line">  `ORDEREXECUTED` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行的顺序</span></span><br><span class="line">  `EXECTYPE` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行类型。枚举值有 EXECUTED/FAILED/SKIPPED/RERAN/MARK_RAN</span></span><br><span class="line">  `MD5SUM` <span class="type">varchar</span>(<span class="number">35</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- MD5 校验码</span></span><br><span class="line">  `DESCRIPTION` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 描述</span></span><br><span class="line">  `COMMENTS` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 备注</span></span><br><span class="line">  `TAG` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- Tag 标签</span></span><br><span class="line">  `LIQUIBASE` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- LIQUIBASE 版本号</span></span><br><span class="line">  `CONTEXTS` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 上下文</span></span><br><span class="line">  `LABELS` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- Label 标签</span></span><br><span class="line">  `DEPLOYMENT_ID` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="comment">-- 部署编号</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p> <code>DATABASECHANGELOGLOCK</code>：锁记录表，用于确保多个 JVM 进程同时只能有一个可以修改数据库。表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `DATABASECHANGELOGLOCK` (</span><br><span class="line">  `ID` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 锁的编号。</span></span><br><span class="line">  `LOCKED` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 是否锁。1-锁，0-未锁</span></span><br><span class="line">  `LOCKGRANTED` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 获得锁的时间</span></span><br><span class="line">  `LOCKEDBY` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 锁定人</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>我们去查询一下 Mysql，如下：</p>
<p><img data-src="%5Cassets/picture/spring-boot-liquibase-database-version-controller/image-20200704203257673.png" alt="image-20200704203257673"></p>
<p>并且 <code>DATABASECHANGELOG</code> 表多了一条数据如下(部分字段截图)</p>
<p><img data-src="%5Cassets/picture/spring-boot-liquibase-database-version-controller/image-20200704213047702.png" alt="image-20200704213047702"></p>
<h6 id="修改-db-changelog-yaml-文件，增加-ID-1-的变更集合-Change-Set-，如下："><a href="#修改-db-changelog-yaml-文件，增加-ID-1-的变更集合-Change-Set-，如下：" class="headerlink" title="修改 db_changelog.yaml 文件，增加 ID = 1 的变更集合( Change Set ) ，如下："></a>修改 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a> 文件，增加 <code>ID = 1</code> 的变更集合( Change Set ) ，如下：</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">changeSet:</span> <span class="comment"># 对应一个 ChangeSet 对象</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">yizhuo</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="string">初始化数据库表</span></span><br><span class="line">    <span class="attr">changes:</span> <span class="comment"># 对应 Change 数组。Change 是一个接口，每种操作对应一种 Change 实现类</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">sqlFile:</span> <span class="comment"># 使用 SQL 文件，对应 SQLFileChange 对象</span></span><br><span class="line">          <span class="attr">encoding:</span> <span class="string">utf8</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">classpath:db/changelog/sql/CHANGE_LOG_INIT_DB.sql</span></span><br></pre></td></tr></table></figure>

<p>在 <code>src/main/resources</code> 下创建目录 <code>db/changelog/sql/</code> ，并创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/sql/CHANGE_LOG_INIT_DB.sql"><code>CHANGE_LOG_INIT_DB.sql</code></a>文件如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(username, password, create_time) <span class="keyword">VALUES</span>(<span class="string">&#x27;zhuo&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, now());</span><br></pre></td></tr></table></figure>

<p>再次启动项目，日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 21:21:49.694  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:21:49.746  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:21:49.777  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 21:21:49.844  INFO 72084 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 21:21:51.881  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MD5SUM FROM github_demo.DATABASECHANGELOG WHERE MD5SUM IS NOT NULL LIMIT 1</span><br><span class="line">2020-07-04 21:21:51.889  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:21:51.921  INFO 72084 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:21:51.921  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">2020-07-04 21:21:52.058  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : -- 创建用户表</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;用户编号&#x27;,</span><br><span class="line">  `username` varchar(64) DEFAULT NULL COMMENT &#x27;账号&#x27;,</span><br><span class="line">  `password` varchar(32) DEFAULT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `idx_username` (`username`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4</span><br><span class="line">2020-07-04 21:21:52.260  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : -- 插入一条数据</span><br><span class="line">INSERT INTO `users`(username, password, create_time) VALUES(&#x27;zhuo&#x27;, &#x27;password&#x27;, now())</span><br><span class="line">2020-07-04 21:21:52.283  INFO 72084 --- [           main] liquibase.changelog.ChangeSet            : SQL in file classpath:db/changelog/sql/CHANGE_LOG_INIT_DB.sql executed</span><br><span class="line">2020-07-04 21:21:52.309  INFO 72084 --- [           main] liquibase.changelog.ChangeSet            : ChangeSet classpath:/db/changelog/db_changelog.yaml::1::yizhuo ran successfully in 364ms</span><br><span class="line">2020-07-04 21:21:52.310  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MAX(ORDEREXECUTED) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:21:52.321  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, `DESCRIPTION`, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES (&#x27;1&#x27;, &#x27;yizhuo&#x27;, &#x27;classpath:/db/changelog/db_changelog.yaml&#x27;, NOW(), 2, &#x27;8:88a193289a4da5d24c9fde1ae442fb3d&#x27;, &#x27;sqlFile&#x27;, &#x27;&#x27;, &#x27;EXECUTED&#x27;, NULL, NULL, &#x27;3.8.9&#x27;, &#x27;3868911933&#x27;)</span><br><span class="line">2020-07-04 21:21:52.377  INFO 72084 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br><span class="line">2020-07-04 21:21:52.615  INFO 72084 --- [           main] c.g.z.liquibase.LiquibaseApplication     : Started LiquibaseApplication in 8.401 seconds (JVM running for 10.018)</span><br><span class="line">Disconnected from the target VM, address: &#x27;127.0.0.1:54078&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>可以看到日志里执行了我们配置的初始化 SQL ，去数据库查看发现 users 表已经创建，并且 <code>DATABASECHANGELOG</code> 表又多了一条数据如下</p>
<p><img data-src="%5Cassets/picture/spring-boot-liquibase-database-version-controller/image-20200704213227760.png" alt="image-20200704213227760"></p>
<p>我们修改一下 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/sql/CHANGE_LOG_INIT_DB.sql"><code>CHANGE_LOG_INIT_DB.sql</code></a> 文件内容，新增一行注释如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 注释</span></span><br></pre></td></tr></table></figure>

<p>再次启动项目，会发现日志报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 21:34:55.789  WARN 72294 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;liquibase&#x27; defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Invocation of init method failed; nested exception is liquibase.exception.ValidationFailedException: Validation Failed:</span><br><span class="line">     1 change sets check sum</span><br><span class="line">          classpath:/db/changelog/db_changelog.yaml::1::yizhuo was: 8:88a193289a4da5d24c9fde1ae442fb3d but is now: 8:1b6bc2489cce8400e6aa8cfd2de6725f</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Liquibase 会给每个变更集合( Change Set )，计算出一个 <code>MD5SUM</code> 字段。这样，每次启动时，都会校验已经执行的变更集合( Change Set )，是否发生了改变。如果是，抛出异常。这样，保证不会因为 变更集合( Change Set ) 变更，导致出现问题。</p>
</blockquote>
<p>测试完成，将 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/sql/CHANGE_LOG_INIT_DB.sql"><code>CHANGE_LOG_INIT_DB.sql</code></a> 文件恢复原样。</p>
<p>再次启动项目，日志如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 21:55:43.289  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:55:43.319  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:55:43.337  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 21:55:43.371  INFO 72969 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 21:55:45.062  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MD5SUM FROM github_demo.DATABASECHANGELOG WHERE MD5SUM IS NOT NULL LIMIT 1</span><br><span class="line">2020-07-04 21:55:45.066  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:55:45.080  INFO 72969 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:55:45.080  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">2020-07-04 21:55:45.113  INFO 72969 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br><span class="line">2020-07-04 21:55:45.204  INFO 72969 --- [           main] c.g.z.liquibase.LiquibaseApplication     : Started LiquibaseApplication in 6.208 seconds (JVM running for 6.875)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在整个日志中，我可以看到 <code>ID = 1</code> 的变更集合( Change Set )不会重复执行。</p>
</blockquote>
<p>基于 SQL 的版本控制介绍完毕，大部分情况下我们都只使用基于 SQL 的版本控制，但是遇到复杂的业务需要根据业务逻辑处理数据，这时基于 SQL 的版本控制可能就不够用了，下面来介绍基于 Java 类的版本控制</p>
<h5 id="5-基于-Java-类的版本控制"><a href="#5-基于-Java-类的版本控制" class="headerlink" title="5. 基于 Java 类的版本控制"></a>5. 基于 Java 类的版本控制</h5><p>在 <code>com.github.zhuyizhuo.liquibase.sample</code>目录下创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/java/com/github/zhuyizhuo/liquibase/sample/FixUsername.java"><code>FixUsername.java</code></a> 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixUsername</span> <span class="keyword">implements</span> <span class="title">CustomTaskChange</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Database database)</span> <span class="keyword">throws</span> CustomChangeException </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 此处实现复杂业务逻辑  操作数据库之类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行业务逻辑。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfirmationMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> SetupException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileOpener</span><span class="params">(ResourceAccessor resourceAccessor)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValidationErrors <span class="title">validate</span><span class="params">(Database database)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a> 变更日志，增加 <code>ID = 2</code> 的变更集合( Change Set ) 。代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">changeSet:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">yizhuo</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="string">自定义业务逻辑类</span></span><br><span class="line">    <span class="attr">changes:</span> <span class="comment"># 对应 Change 数组。Change 是一个接口，每种操作对应一种 Change 实现类</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">customChange:</span> &#123;<span class="attr">class:</span> <span class="string">com.github.zhuyizhuo.liquibase.sample.FixUsername</span>&#125;</span><br></pre></td></tr></table></figure>

<p>再次启动项目。执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 22:09:33.489  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 22:09:33.537  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 22:09:33.548  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 22:09:33.589  INFO 73234 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 22:09:34.875  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MD5SUM FROM github_demo.DATABASECHANGELOG WHERE MD5SUM IS NOT NULL LIMIT 1</span><br><span class="line">2020-07-04 22:09:34.879  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 22:09:34.886  INFO 73234 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 22:09:34.886  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">执行业务逻辑。。</span><br><span class="line">2020-07-04 22:09:34.905  INFO 73234 --- [           main] liquibase.changelog.ChangeSet            : null</span><br><span class="line">2020-07-04 22:09:34.908  INFO 73234 --- [           main] liquibase.changelog.ChangeSet            : ChangeSet classpath:/db/changelog/db_changelog.yaml::2::yizhuo ran successfully in 7ms</span><br><span class="line">2020-07-04 22:09:34.909  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MAX(ORDEREXECUTED) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 22:09:34.912  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, `DESCRIPTION`, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES (&#x27;2&#x27;, &#x27;yizhuo&#x27;, &#x27;classpath:/db/changelog/db_changelog.yaml&#x27;, NOW(), 3, &#x27;8:39259f2c0bad8428733b5b6c30d30a0a&#x27;, &#x27;customChange&#x27;, &#x27;&#x27;, &#x27;EXECUTED&#x27;, NULL, NULL, &#x27;3.8.9&#x27;, &#x27;3871774892&#x27;)</span><br><span class="line">2020-07-04 22:09:34.943  INFO 73234 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们可以看到，ID = 2 的变更集合( Change Set )完成了执行。</p>
</blockquote>
<p>此时，我们去查询下 MySQL 。如下：</p>
<p><img data-src="%5Cassets/picture/spring-boot-liquibase-database-version-controller/image-20200704221143804.png" alt="image-20200704221143804"></p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>本文的完整工程可以查看下面仓库中的<code>spring-boot-samples-liquibase</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Original</tag>
        <tag>Database</tag>
        <tag>Liquibase</tag>
      </tags>
  </entry>
  <entry>
    <title>低代码开发平台：软件开发的革命还是昙花一现？</title>
    <url>/2022/09/28/development/2022-low-code-platforms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="低代码开发平台：软件开发的革命还是昙花一现？-🤔"><a href="#低代码开发平台：软件开发的革命还是昙花一现？-🤔" class="headerlink" title="低代码开发平台：软件开发的革命还是昙花一现？ 🤔"></a>低代码开发平台：软件开发的革命还是昙花一现？ 🤔</h1><p>大家好！👋 在当今这个快速发展的数字化时代，企业对软件开发的需求与日俱增，而传统开发方式的效率瓶颈日益明显。低代码开发平台（Low-Code Development Platform，LCDP）作为一种新兴的开发方式，正在改变着软件开发的格局。今天，我们就来深入探讨低代码开发平台的实践与思考！🚀</p>
<h2 id="什么是低代码开发平台？核心概念解析-🔍"><a href="#什么是低代码开发平台？核心概念解析-🔍" class="headerlink" title="什么是低代码开发平台？核心概念解析 🔍"></a>什么是低代码开发平台？核心概念解析 🔍</h2><p>低代码开发平台是一种通过可视化拖拽、配置而非传统编码方式来构建应用程序的平台。它的核心思想是”最少代码、最快交付”。</p>
<h3 id="低代码平台的主要特性-✨"><a href="#低代码平台的主要特性-✨" class="headerlink" title="低代码平台的主要特性 ✨"></a>低代码平台的主要特性 ✨</h3><ol>
<li><strong>可视化开发环境</strong>：通过拖拽组件、配置属性来构建应用界面和逻辑</li>
<li><strong>预构建组件库</strong>：提供丰富的UI组件、业务组件和集成组件</li>
<li><strong>模型驱动开发</strong>：基于数据模型和业务模型进行应用构建</li>
<li><strong>自动化部署</strong>：一键部署到各种环境，简化运维流程</li>
<li><strong>集成能力</strong>：与现有系统和第三方服务的快速集成</li>
</ol>
<p><img data-src="https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80" alt="低代码开发平台"></p>
<h2 id="低代码平台的优势与挑战-⚖️"><a href="#低代码平台的优势与挑战-⚖️" class="headerlink" title="低代码平台的优势与挑战 ⚖️"></a>低代码平台的优势与挑战 ⚖️</h2><h3 id="主要优势-👍"><a href="#主要优势-👍" class="headerlink" title="主要优势 👍"></a>主要优势 👍</h3><ol>
<li><strong>开发效率提升</strong>：据Gartner统计，低代码平台可以将开发速度提升5-10倍</li>
<li><strong>降低技术门槛</strong>：让业务人员也能参与应用开发，实现”公民开发”（Citizen Development）</li>
<li><strong>成本降低</strong>：减少对专业开发人员的依赖，降低开发和维护成本</li>
<li><strong>更快的市场响应</strong>：快速原型制作和迭代，更快响应市场需求</li>
</ol>
<h3 id="潜在挑战-👎"><a href="#潜在挑战-👎" class="headerlink" title="潜在挑战 👎"></a>潜在挑战 👎</h3><ol>
<li><strong>灵活性限制</strong>：复杂业务场景下可能无法满足所有定制需求</li>
<li><strong>厂商锁定风险</strong>：迁移到其他平台可能面临较高成本</li>
<li><strong>性能担忧</strong>：生成的代码可能不如手写代码优化</li>
<li><strong>安全与合规性</strong>：多租户环境下的数据隔离和安全控制</li>
</ol>
<h2 id="低代码平台实践：从选型到落地-💡"><a href="#低代码平台实践：从选型到落地-💡" class="headerlink" title="低代码平台实践：从选型到落地 💡"></a>低代码平台实践：从选型到落地 💡</h2><h3 id="平台选型策略-📋"><a href="#平台选型策略-📋" class="headerlink" title="平台选型策略 📋"></a>平台选型策略 📋</h3><p>选择合适的低代码平台是成功落地的关键。以下是一些选型时需要考虑的因素：</p>
<ol>
<li><strong>业务需求匹配度</strong>：平台是否支持你的核心业务场景</li>
<li><strong>技术架构兼容性</strong>：是否与现有技术栈和系统兼容</li>
<li><strong>扩展性与开放性</strong>：是否支持自定义代码和第三方集成</li>
<li><strong>安全性与合规性</strong>：是否符合行业安全标准和法规要求</li>
<li><strong>成本与ROI分析</strong>：综合考虑许可证、实施和维护成本</li>
</ol>
<h3 id="实施最佳实践-🛠️"><a href="#实施最佳实践-🛠️" class="headerlink" title="实施最佳实践 🛠️"></a>实施最佳实践 🛠️</h3><ol>
<li><strong>明确应用边界</strong>：不是所有应用都适合低代码开发，优先选择数据密集型、流程驱动的应用</li>
<li><strong>建立治理机制</strong>：制定低代码应用开发规范和流程，避免”影子IT”</li>
<li><strong>组建混合团队</strong>：结合业务人员、低代码开发者和专业开发人员</li>
<li><strong>持续优化改进</strong>：建立反馈机制，不断优化应用体验和性能</li>
</ol>
<h2 id="低代码与传统开发的融合之道-🤝"><a href="#低代码与传统开发的融合之道-🤝" class="headerlink" title="低代码与传统开发的融合之道 🤝"></a>低代码与传统开发的融合之道 🤝</h2><p>低代码并不是要完全取代传统开发，而是与之互补。以下是几种有效的融合模式：</p>
<h3 id="1-前后端分离模式"><a href="#1-前后端分离模式" class="headerlink" title="1. 前后端分离模式"></a>1. 前后端分离模式</h3><p>低代码平台负责前端界面构建和基本逻辑，传统开发负责复杂业务逻辑和系统集成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 低代码平台中的自定义代码示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateDiscount</span>(<span class="params">price, userLevel</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用传统开发的微服务API</span></span><br><span class="line">  <span class="keyword">return</span> apiService.calculateDiscount(price, userLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-分层开发模式"><a href="#2-分层开发模式" class="headerlink" title="2. 分层开发模式"></a>2. 分层开发模式</h3><p>将应用分为表示层、业务逻辑层和数据层，低代码主要负责表示层和简单业务逻辑，传统开发负责复杂业务逻辑和数据层。</p>
<h3 id="3-中心辐射模式"><a href="#3-中心辐射模式" class="headerlink" title="3. 中心辐射模式"></a>3. 中心辐射模式</h3><p>以低代码平台为中心，辐射连接各种专业系统和服务，形成完整的解决方案。</p>
<h2 id="低代码的未来展望：会成为主流吗？-🔮"><a href="#低代码的未来展望：会成为主流吗？-🔮" class="headerlink" title="低代码的未来展望：会成为主流吗？ 🔮"></a>低代码的未来展望：会成为主流吗？ 🔮</h2><p>根据Gartner的预测，到2024年，65%的应用开发将通过低代码平台完成。低代码的未来发展趋势包括：</p>
<ol>
<li><strong>AI赋能</strong>：结合人工智能技术，实现智能推荐、自动代码生成等功能</li>
<li><strong>全栈能力增强</strong>：从前端到后端，提供更全面的开发能力</li>
<li><strong>行业化深耕</strong>：针对特定行业提供定制化的解决方案</li>
<li><strong>开源化趋势</strong>：更多开源低代码平台的出现，降低使用门槛</li>
</ol>
<h2 id="写在最后：拥抱低代码，但保持理性-🧠"><a href="#写在最后：拥抱低代码，但保持理性-🧠" class="headerlink" title="写在最后：拥抱低代码，但保持理性 🧠"></a>写在最后：拥抱低代码，但保持理性 🧠</h2><p>低代码开发平台无疑是软件开发领域的一股清流，它为企业数字化转型提供了新的可能。但我们也需要保持理性，认识到低代码并不是万能的，它有自己的适用场景和局限性。</p>
<p>作为开发者，我们应该拥抱这种新技术，但同时也要不断提升自己的核心竞争力。毕竟，无论工具如何进化，解决问题的能力和创新思维才是最宝贵的！</p>
<p>你对低代码开发平台有什么看法？欢迎在评论区留言讨论！</p>
<p>Happy Building！🏗️✨</p>
]]></content>
      <tags>
        <tag>软件开发</tag>
        <tag>低代码</tag>
        <tag>效率工具</tag>
        <tag>平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令整理</title>
    <url>/2020/08/29/docker/docker-command/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="显示版本信息-docker-version"><a href="#显示版本信息-docker-version" class="headerlink" title="显示版本信息 docker version"></a>显示版本信息 docker version</h3><p><strong>docker version</strong> :显示 Docker 版本信息。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version [OPTIONS]</span><br></pre></td></tr></table></figure>

<h3 id="显示-Docker-系统信息-docker-info"><a href="#显示-Docker-系统信息-docker-info" class="headerlink" title="显示 Docker 系统信息 docker info"></a>显示 Docker 系统信息 docker info</h3><p><strong>docker info</strong> : 显示 Docker 系统信息，包括镜像和容器数</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info [OPTIONS]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="搜索镜像-docker-search"><a href="#搜索镜像-docker-search" class="headerlink" title="搜索镜像 docker search"></a>搜索镜像 docker search</h3><p><strong>docker search :</strong> 从 <strong>Docker Hub</strong> 查找镜像</p>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure>

<p>OPTIONS 说明：</p>
<ul>
<li>**–automated :**只列出 automated build类型的镜像；</li>
<li>**–no-trunc :**显示完整的镜像描述；</li>
<li>**–filter=stars=:**列出收藏数不小于指定值的镜像。</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>从 <strong>Docker Hub</strong> 查找所有镜像名包含 hello-world，并且收藏数大于 1000 的镜像</p>
<blockquote>
<p><strong>hello-world</strong> 是 <strong>Docker</strong> 官方提供的一个镜像，通常用来验证 <strong>Docker</strong> 是否安装成功。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker search --filter=stars=1000 hello-world</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">hello-world         Hello World! (an example of minimal Dockeriz…   1278                [OK]</span><br></pre></td></tr></table></figure>

<h3 id="下载或更新镜像-docker-pull"><a href="#下载或更新镜像-docker-pull" class="headerlink" title="下载或更新镜像 docker pull"></a>下载或更新镜像 docker pull</h3><p><strong>docker pull :</strong> 从镜像仓库中拉取或者更新指定镜像</p>
<h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure>

<p>OPTIONS 说明：</p>
<ul>
<li>**-a :**拉取所有 tagged 镜像</li>
<li>**–disable-content-trust :**忽略镜像的校验,默认开启</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>从 Docker Hub下载 hello-world 最新版镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete</span><br><span class="line">Digest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line">docker.io/library/hello-world:latest</span><br></pre></td></tr></table></figure>

<h3 id="查看已下载的镜像-docker-images"><a href="#查看已下载的镜像-docker-images" class="headerlink" title="查看已下载的镜像 docker images"></a>查看已下载的镜像 docker images</h3><p><strong>docker images :</strong> 列出本地镜像。</p>
<h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>

<p>OPTIONS 说明：</p>
<ul>
<li>**-a :**列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li>
<li>**–digests :**显示镜像的摘要信息；</li>
<li>**-f :**显示满足条件的镜像；</li>
<li>**–format :**指定返回值的模板文件；</li>
<li>**–no-trunc :**显示完整的镜像信息；</li>
<li>**-q :**只显示镜像ID。</li>
</ul>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>查看本地镜像列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker images</span><br><span class="line">REPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                                                  latest              235592615444        2 months ago        104MB</span><br><span class="line">nginx                                                  latest              2622e6cca7eb        2 months ago        132MB</span><br><span class="line">hello-world                                            latest              bf756fb1ae65        7 months ago        13.3kB</span><br></pre></td></tr></table></figure>

<p>列出本地镜像中 REPOSITORY 为 nginx 的镜像列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker images nginx</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              2622e6cca7eb        2 months ago        132MB</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像-docker-rmi"><a href="#删除镜像-docker-rmi" class="headerlink" title="删除镜像 docker rmi"></a>删除镜像 docker rmi</h3><p><strong>docker rmi :</strong> 删除本地一个或多少镜像。</p>
<h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-f :**强制删除；</li>
<li>**–no-prune :**不移除该镜像的过程镜像，默认移除；</li>
</ul>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>强制删除本地镜像 hello-world。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker rmi -f hello-world</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5</span><br><span class="line">Deleted: sha256:bf756fb1ae65adf866bd8c456593cd24beb6a0a061dedf42b26a993176745f6b</span><br></pre></td></tr></table></figure>

<p>如果本地有多个  IMAGE ID 相同的镜像，可以通过 docker rmi [REPOSITORY]:[TAG] 来删除</p>
<p>如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ docker images</span><br><span class="line">REPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhuyizhuo/hello-world                                  v1                  c1004e8ed398        3 hours ago         105MB</span><br><span class="line">hello-world                                            latest              c1004e8ed398        2 months ago        105MB</span><br><span class="line">➜  ~ docker rmi zhuyizhuo/hello-world:v1</span><br><span class="line">Untagged: zhuyizhuo/hello-world:v1</span><br></pre></td></tr></table></figure>

<h3 id="删除容器-docker-rm"><a href="#删除容器-docker-rm" class="headerlink" title="删除容器 docker rm"></a>删除容器 docker rm</h3><p><strong>docker rm ：</strong>删除一个或多个容器</p>
<h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-f :**通过SIGKILL信号强制删除一个运行中的容器</li>
<li>**-l :**移除容器间的网络连接，而非容器本身</li>
<li><strong>-v :</strong>-v 删除与容器关联的卷</li>
</ul>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><p>强制删除容器 mynginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f mynginx</span><br></pre></td></tr></table></figure>

<h3 id="运行镜像-docker-run"><a href="#运行镜像-docker-run" class="headerlink" title="运行镜像 docker run"></a>运行镜像 docker run</h3><p><strong>docker run ：</strong>创建一个新的容器并运行一个命令</p>
<h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-p:</strong> 端口映射，格式为：主机(宿主)端口:容器端口；</li>
<li><strong>-v:</strong> 挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 格式，或者使用[HOST:CONTAINER:ro] 格式，后者对于容器来说，数据卷是只读的，可以有效保护宿主机的文件系统。</li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong>–name=:</strong> 为容器指定一个名称；</li>
<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>
<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>
<li><strong>-h:</strong> 指定容器的 hostname；</li>
<li><strong>-e:</strong> 设置环境变量；</li>
<li><strong>–env:</strong> 设置环境变量；</li>
<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>
<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>
<li>**-m :**设置容器使用内存最大值；</li>
<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>
<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>
</ul>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><p>使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name mynginx -d nginx:latest</span></span><br></pre></td></tr></table></figure>

<p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /Users/zhuo/logs 映射到容器的 /logs。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run -p 80:80 -v /Users/zhuo/logs:/logs -d nginx:latest</span><br><span class="line">d200a19a4e87ee5e8367aad121538b872151ed2c799646f5aae1e516d05345c2</span><br></pre></td></tr></table></figure>

<p>使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行 /bin/bash 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run -it nginx:latest /bin/bash</span><br><span class="line">root@51363b25e1a4:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>使用远程 registry.cn-hangzhou.aliyuncs.com/log-service/logtail 镜像启动容器，挂载根目录到 /logtail_host（只读模式）  挂载 /var/run 目录到容器的 /var/run 目录，设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -v /:/logtail_host:ro -v /var/run:/var/run --env ALIYUN_LOGTAIL_CONFIG=/etc/ilogtail/conf/demo/ilogtail_config.json  registry.cn-hangzhou.aliyuncs.com/log-service/logtail</span><br></pre></td></tr></table></figure>

<h3 id="创建镜像-docker-build"><a href="#创建镜像-docker-build" class="headerlink" title="创建镜像 docker build"></a>创建镜像 docker build</h3><p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>
<h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**–build-arg=[] :**设置镜像创建时的变量；</li>
<li>**–cpu-shares :**设置 cpu 使用权重；</li>
<li>**–cpu-period :**限制 CPU CFS周期；</li>
<li>**–cpu-quota :**限制 CPU CFS配额；</li>
<li>**–cpuset-cpus :**指定使用的CPU id；</li>
<li>**–cpuset-mems :**指定使用的内存 id；</li>
<li>**–disable-content-trust :**忽略校验，默认开启；</li>
<li>**-f :**指定要使用的Dockerfile路径；</li>
<li>**–force-rm :**设置镜像过程中删除中间容器；</li>
<li>**–isolation :**使用容器隔离技术；</li>
<li>**–label=[] :**设置镜像使用的元数据；</li>
<li>**-m :**设置内存最大值；</li>
<li>**–memory-swap :**设置Swap的最大值为内存+swap，”-1”表示不限swap；</li>
<li>**–no-cache :**创建镜像的过程不使用缓存；</li>
<li>**–pull :**尝试去更新镜像的新版本；</li>
<li>**–quiet, -q :**安静模式，成功后只输出镜像 ID；</li>
<li>**–rm :**设置镜像成功后删除中间容器；</li>
<li>**–shm-size :**设置/dev/shm的大小，默认值是64M；</li>
<li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>
<li><strong>–network:</strong> 默认 default。在构建期间设置RUN指令的网络模式</li>
</ul>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><p>使用当前目录的 Dockerfile 创建镜像，标签为 hello-world。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker build -t hello-world .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM openjdk:8-jdk-alpine</span><br><span class="line"> ---&gt; a3562aa0b991</span><br><span class="line">Step 2/2 : RUN <span class="built_in">echo</span> <span class="string">&#x27;hello world.&#x27;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 97b643c912bc</span><br><span class="line">hello world.</span><br><span class="line">Removing intermediate container 97b643c912bc</span><br><span class="line"> ---&gt; c1004e8ed398</span><br><span class="line">Successfully built c1004e8ed398</span><br><span class="line">Successfully tagged hello-world:latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回错误信息</p>
</blockquote>
<h3 id="列出容器-docker-ps"><a href="#列出容器-docker-ps" class="headerlink" title="列出容器 docker ps"></a>列出容器 docker ps</h3><p><strong>docker ps :</strong> 列出容器</p>
<h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-a :**显示所有的容器，包括未运行的。</li>
<li>**-f :**根据条件过滤显示的内容。</li>
<li>**–format :**指定返回值的模板文件。</li>
<li>**-l :**显示最近创建的容器。</li>
<li>**-n :**列出最近创建的n个容器。</li>
<li>**–no-trunc :**不截断输出。</li>
<li>**-q :**静默模式，只显示容器编号。</li>
<li>**-s :**显示总的文件大小。</li>
</ul>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><p>列出所有在运行的容器信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">ab56115efc9e        redis               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago          Up 2 days           0.0.0.0:6379-&gt;6379/tcp              redis</span><br></pre></td></tr></table></figure>

<p>列出最近创建的5个容器信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker ps -n 5</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS                    NAMES</span><br><span class="line">51363b25e1a4        nginx:latest        <span class="string">&quot;/docker-entrypoint.…&quot;</span>   3 minutes ago       Exited (127) About a minute ago                            inspiring_roentgen</span><br><span class="line">d200a19a4e87        nginx:latest        <span class="string">&quot;/docker-entrypoint.…&quot;</span>   10 minutes ago      Exited (0) 6 minutes ago                                   stupefied_curie</span><br><span class="line">b0314e3afbf3        nginx:latest        <span class="string">&quot;/docker-entrypoint.…&quot;</span>   13 minutes ago      Created                                                    charming_babbage</span><br><span class="line">3ddfa2c0733e        bf756fb1ae65        <span class="string">&quot;/hello&quot;</span>                 46 minutes ago      Exited (0) 46 minutes ago                                  gifted_thompson</span><br><span class="line">ab56115efc9e        redis               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago          Up 2 days                         0.0.0.0:6379-&gt;6379/tcp   redis</span><br></pre></td></tr></table></figure>

<h3 id="容器与主机之间的数据拷贝-复制-docker-cp"><a href="#容器与主机之间的数据拷贝-复制-docker-cp" class="headerlink" title="容器与主机之间的数据拷贝 复制 docker cp"></a>容器与主机之间的数据拷贝 复制 docker cp</h3><p>**docker cp :**用于容器与主机之间的数据拷贝。</p>
<h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-L :**保持源目标中的链接</li>
</ul>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><p>将主机 /www/test 目录拷贝到容器 8cd821c0fac7 的 /www 目录下。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker cp /www/test <span class="number">8</span>cd821c0fac7:/www</span><br></pre></td></tr></table></figure>

<p>将容器 8cd821c0fac7 的 /www 目录拷贝到主机的 /tmp 目录中。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker cp  <span class="number">8</span>cd821c0fac7:/www /tmp/</span><br></pre></td></tr></table></figure>

<h3 id="在运行的容器中执行命令-docker-exec"><a href="#在运行的容器中执行命令-docker-exec" class="headerlink" title="在运行的容器中执行命令 docker exec"></a>在运行的容器中执行命令 docker exec</h3><p><strong>docker exec ：</strong>在运行的容器中执行命令</p>
<h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-d :**分离模式: 在后台运行</li>
<li>**-i :**即使没有附加也保持STDIN 打开</li>
<li>**-t :**分配一个伪终端</li>
</ul>
<h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><p>在容器 mynginx 中以交互模式执行容器内 /root/helloworld.sh 脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker <span class="built_in">exec</span> -it mynginx /bin/sh /root/helloworld.sh</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p>在容器 mynginx 中开启一个交互模式的终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker <span class="built_in">exec</span> -it mynginx /bin/bash</span><br><span class="line">root@e66c098a5a0d:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="设置容器自动重启"><a href="#设置容器自动重启" class="headerlink" title="设置容器自动重启"></a>设置容器自动重启</h3><p>reboot 后 Docker 服务及容器自动启动设置，已启动容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker update --restart=always 8c965ffd0761</span><br></pre></td></tr></table></figure>

<h3 id="获取容器-镜像的元数据-docker-inspect"><a href="#获取容器-镜像的元数据-docker-inspect" class="headerlink" title="获取容器/镜像的元数据 docker inspect"></a>获取容器/镜像的元数据 docker inspect</h3><p><strong>docker inspect :</strong> 获取容器/镜像的元数据。</p>
<h4 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-f :**指定返回值的模板文件。</li>
<li>**-s :**显示总的文件大小。</li>
<li>**–type :**为指定类型返回JSON。</li>
</ul>
<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><p>获取镜像 nginx 的元信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker inspect nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;sha256:2622e6cca7ebbb6e310743abce3fc47335393e79171b9d76ba9d4f446ce7b163&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RepoTags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;nginx:latest&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;RepoDigests&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;nginx@sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Parent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Comment&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-06-09T16:57:42.632836191Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Container&quot;</span>: <span class="string">&quot;53e54c20f21e263548ac09475373e20dfef58dd38aebc6caec258b4ff6c2446c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ContainerConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;53e54c20f21e&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;80/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;NGINX_VERSION=1.19.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;NJS_VERSION=0.4.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PKG_RELEASE=1~buster&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#(nop) &quot;</span>,</span><br><span class="line">                <span class="string">&quot;CMD [\&quot;nginx\&quot; \&quot;-g\&quot; \&quot;daemon off;\&quot;]&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;ArgsEscaped&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:096f75b5300eeb60b7ec16dcf3bcd48abcde14a9a379a96f42d5ffc26fcfdf1b&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/docker-entrypoint.sh&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;maintainer&quot;</span>: <span class="string">&quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;StopSignal&quot;</span>: <span class="string">&quot;SIGTERM&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;DockerVersion&quot;</span>: <span class="string">&quot;18.09.7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;80/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;NGINX_VERSION=1.19.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;NJS_VERSION=0.4.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PKG_RELEASE=1~buster&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">                <span class="string">&quot;daemon off;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;ArgsEscaped&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:096f75b5300eeb60b7ec16dcf3bcd48abcde14a9a379a96f42d5ffc26fcfdf1b&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/docker-entrypoint.sh&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;maintainer&quot;</span>: <span class="string">&quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;StopSignal&quot;</span>: <span class="string">&quot;SIGTERM&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Architecture&quot;</span>: <span class="string">&quot;amd64&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Os&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Size&quot;</span>: 132122017,</span><br><span class="line">        <span class="string">&quot;VirtualSize&quot;</span>: 132122017,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/a186ce1c7e774439e0d2f1248c882767da3a76ade5aecbf776ca4d24eef9b653/diff:/var/lib/docker/overlay2/f334f37d35f72e5045b141167665d3f1e31025835d51a3b703b7d21e75351394/diff:/var/lib/docker/overlay2/77b46c9a92885bab12ac9feca5df425d6caa34e7cfb80e526a2ce72e61dd13ed/diff:/var/lib/docker/overlay2/b4416b53f656e25aa6ec1e0e3574495d0accdb697d12488c562173b311875a3f/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/6812b7407448ad5ba84978b9bdff1e078e393ca8d9cb812d1210ac37db16aeed/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/6812b7407448ad5ba84978b9bdff1e078e393ca8d9cb812d1210ac37db16aeed/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/6812b7407448ad5ba84978b9bdff1e078e393ca8d9cb812d1210ac37db16aeed/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;RootFS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;layers&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Layers&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;sha256:13cb14c2acd34e45446a50af25cb05095a17624678dbafbcc9e26086547c1d74&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:d4cf327d8ef50eb2e31b646f17217a3baf455391bfd59bce47df50c770ff8c07&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:7c7d7f4461826dd22f9234a81f9bed9c0bdb0b70b3ce66228bfc87418a9b8313&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:9040af41bb6677b114134de15ddeb10b070eb1f940dbbe277574ee154d89f6b9&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:f978b9ed3f26a49b55cf4849e4cadb29335be45a633cbe95a2f4e445e70086bf&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;LastTagTime&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="登陆-登出命令-docker-login-logout"><a href="#登陆-登出命令-docker-login-logout" class="headerlink" title="登陆/登出命令 docker login/logout"></a>登陆/登出命令 docker login/logout</h3><p><strong>docker login :</strong> 登陆到一个 Docker 镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<p><strong>docker logout :</strong> 登出一个 Docker 镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<h4 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line">docker <span class="built_in">logout</span> [OPTIONS] [SERVER]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**-u :**登陆的用户名</li>
<li>**-p :**登陆的密码</li>
</ul>
<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><p>登陆到 Docker Hub</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure>

<p>登出 Docker Hub</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure>

<h3 id="将本地的镜像上传到镜像仓库-docker-push"><a href="#将本地的镜像上传到镜像仓库-docker-push" class="headerlink" title="将本地的镜像上传到镜像仓库 docker push"></a>将本地的镜像上传到镜像仓库 docker push</h3><p><strong>docker push :</strong> 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p>
<h4 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**–disable-content-trust :**忽略镜像的校验,默认开启</li>
</ul>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><p>上传本地镜像 mynginx:v1 到镜像仓库中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push mynginx:v1</span><br></pre></td></tr></table></figure>

<h3 id="获取容器日志-docker-logs"><a href="#获取容器日志-docker-logs" class="headerlink" title="获取容器日志  docker logs"></a>获取容器日志  docker logs</h3><p><strong>docker logs :</strong> 获取容器的日志</p>
<h4 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong> 跟踪日志输出</li>
<li>**–since :**显示某个开始时间的所有日志</li>
<li><strong>-t :</strong> 显示时间戳</li>
<li>**–tail :**仅列出最新N条容器日志</li>
</ul>
<h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><p>跟踪查看容器 mynginx 的日志输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker logs -f mynginx</span><br><span class="line">/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class="line">/docker-entrypoint.sh: Looking <span class="keyword">for</span> shell scripts <span class="keyword">in</span> /docker-entrypoint.d/</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class="line">10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class="line">10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 <span class="keyword">in</span> /etc/nginx/conf.d/default.conf</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class="line">/docker-entrypoint.sh: Configuration complete; ready <span class="keyword">for</span> start up</span><br><span class="line">172.17.0.1 - - [29/Aug/2020:14:38:22 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>

<p>查看容器 mynginx 的最新 3 条日志。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker logs --tail=3 mynginx</span><br><span class="line">172.17.0.1 - - [29/Aug/2020:14:38:22 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br><span class="line">172.17.0.1 - - [29/Aug/2020:14:38:23 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br><span class="line">172.17.0.1 - - [29/Aug/2020:14:38:23 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="列出指定的容器的端口映射-docker-port"><a href="#列出指定的容器的端口映射-docker-port" class="headerlink" title="列出指定的容器的端口映射 docker port"></a>列出指定的容器的端口映射 docker port</h3><p>**docker port :**列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。</p>
<h4 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</span><br></pre></td></tr></table></figure>

<h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><p>查看容器 mynginx 的端口映射情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker port mynginx</span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br></pre></td></tr></table></figure>

<h3 id="查看容器中运行的进程信息-docker-top"><a href="#查看容器中运行的进程信息-docker-top" class="headerlink" title="查看容器中运行的进程信息 docker top"></a>查看容器中运行的进程信息 docker top</h3><p>**docker top :**查看容器中运行的进程信息，支持 ps 命令参数。</p>
<h4 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br></pre></td></tr></table></figure>

<p>容器运行时不一定有/bin/bash 终端来交互执行 top 命令，而且容器还不一定有 top 命令，可以使用 docker top 来实现查看 container 中正在运行的进程。</p>
<h4 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h4><p>查看容器 mynginx 的进程信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker top mynginx</span><br><span class="line">PID                 USER                TIME                COMMAND</span><br><span class="line">4571                root                0:00                nginx: master process nginx -g daemon off;</span><br><span class="line">4626                101                 0:00                nginx: worker process</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>原创</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-compose 常用命令</title>
    <url>/2020/08/30/docker/docker-compose-command/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>

<p>Options 说明</p>
<ul>
<li>-f –file FILE指定Compose模板文件，默认为docker-compose.yml</li>
<li>-p –project-name NAME 指定项目名称，默认使用当前所在目录为项目名</li>
<li>–verbose 输出更多调试信息</li>
<li>-v，-version 打印版本并退出</li>
<li>–log-level LEVEL 定义日志等级(DEBUG, INFO, WARNING, ERROR, CRITICAL)</li>
</ul>
<h2 id="查看安装的版本-docker-compose-–version"><a href="#查看安装的版本-docker-compose-–version" class="headerlink" title="查看安装的版本 docker-compose –version"></a>查看安装的版本 docker-compose –version</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="运行容器-docker-compose-up"><a href="#运行容器-docker-compose-up" class="headerlink" title="运行容器 docker-compose up"></a>运行容器 docker-compose up</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]</span><br></pre></td></tr></table></figure>
<p>options 说明</p>
<ul>
<li>-d 在后台运行服务容器</li>
<li>-no-color 不是有颜色来区分不同的服务的控制输出</li>
<li>-no-deps 不启动服务所链接的容器</li>
<li>–force-recreate 强制重新创建容器，不能与-no-recreate同时使用</li>
<li>–no-recreate 如果容器已经存在，则不重新创建，不能与–force-recreate同时使用</li>
<li>–no-build 不自动构建缺失的服务镜像</li>
<li>–build 在启动容器前构建服务镜像</li>
<li>–abort-on-container-exit 停止所有容器，如果任何一个容器被停止，不能与-d同时使用</li>
<li>-t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒）</li>
<li>–remove-orphans 删除服务中没有在compose文件中定义的容器</li>
</ul>
<h2 id="列出所有的容器-docker-compose-ps"><a href="#列出所有的容器-docker-compose-ps" class="headerlink" title="列出所有的容器 docker-compose ps"></a>列出所有的容器 docker-compose ps</h2><h2 id="停止正在运行的容器-docker-compose-stop"><a href="#停止正在运行的容器-docker-compose-stop" class="headerlink" title="停止正在运行的容器 docker-compose stop"></a>停止正在运行的容器 docker-compose stop</h2><h2 id="查看帮助-docker-compose-h"><a href="#查看帮助-docker-compose-h" class="headerlink" title="查看帮助 docker-compose -h"></a>查看帮助 docker-compose -h</h2><h2 id="停止和删除容器-docker-compose-down"><a href="#停止和删除容器-docker-compose-down" class="headerlink" title="停止和删除容器 docker-compose down"></a>停止和删除容器 docker-compose down</h2><p>docker-compose down： 停止和删除容器、网络、卷、镜像</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down [options]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<ul>
<li>–rmi type，删除镜像，类型必须是：all，删除compose文件中定义的所有镜像；local，删除镜像名为空的镜像</li>
<li>-v, –volumes，删除已经在compose文件中定义的和匿名的附在容器上的数据卷</li>
<li>–remove-orphans，删除服务中没有在compose中定义的容器</li>
</ul>
<h2 id="查看服务容器的输出-docker-compose-logs"><a href="#查看服务容器的输出-docker-compose-logs" class="headerlink" title="查看服务容器的输出 docker-compose logs"></a>查看服务容器的输出 docker-compose logs</h2><p>查看服务容器的输出。默认情况下，docker-compose将对不同的服务输出使用不同的颜色来区分。可以通过–no-color来关闭颜色。</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose logs [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<ul>
<li>-f 跟踪日志输出</li>
</ul>
<h2 id="构建项目中的服务容器-docker-compose-bulid"><a href="#构建项目中的服务容器-docker-compose-bulid" class="headerlink" title="构建项目中的服务容器 docker-compose bulid"></a>构建项目中的服务容器 docker-compose bulid</h2><p>docker-compose bulid：构建（重新构建）项目中的服务容器</p>
<p>服务容器一旦构建后，将会带上一个标记名。可以随时在项目目录下运行docker-compose build来重新构建服务。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build [options] [--build-arg key=val...] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<ul>
<li>–compress 通过 gzip 压缩构建上下环境</li>
<li>–force-rm 删除构建过程中的临时容器</li>
<li>–no-cache 构建镜像过程中不使用缓存</li>
<li>–pull 始终尝试通过拉取操作来获取更新版本的镜像</li>
<li>-m, –memory MEM为构建的容器设置内存大小</li>
<li>–build-arg key=val为服务设置 build-time 变量</li>
</ul>
<h2 id="拉取服务依赖的镜像-docker-compose-pull"><a href="#拉取服务依赖的镜像-docker-compose-pull" class="headerlink" title="拉取服务依赖的镜像 docker-compose pull"></a>拉取服务依赖的镜像 docker-compose pull</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose pull [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<p>–ignore-pull-failures，忽略拉取镜像过程中的错误<br>–parallel，多个镜像同时拉取<br>–quiet，拉取镜像过程中不打印进度信息</p>
<h2 id="重启项目中的服务-docker-compose-restart"><a href="#重启项目中的服务-docker-compose-restart" class="headerlink" title="重启项目中的服务 docker-compose restart"></a>重启项目中的服务 docker-compose restart</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose restart [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<ul>
<li>-t, –timeout TIMEOUT，指定重启前停止容器的超时（默认为10秒）</li>
</ul>
<h2 id="删除服务容器-docker-compose-rm"><a href="#删除服务容器-docker-compose-rm" class="headerlink" title="删除服务容器 docker-compose rm"></a>删除服务容器 docker-compose rm</h2><p>docker-compose rm: 删除所有（停止状态的）服务容器。</p>
<h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose rm [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<p>–f, –force，强制直接删除，包括非停止状态的容器<br>-v，删除容器所挂载的数据卷</p>
<h2 id="启动已经存在的服务容器-docker-compose-start"><a href="#启动已经存在的服务容器-docker-compose-start" class="headerlink" title="启动已经存在的服务容器 docker-compose start"></a>启动已经存在的服务容器 docker-compose start</h2><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose start [SERVICE...]</span><br></pre></td></tr></table></figure>

<h2 id="在指定服务上执行一个命令-docker-compose-run"><a href="#在指定服务上执行一个命令-docker-compose-run" class="headerlink" title="在指定服务上执行一个命令 docker-compose run"></a>在指定服务上执行一个命令 docker-compose run</h2><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在指定容器上执行一个<code>ping</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run ubuntu ping www.baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="验证并查看-compose-文件配置-docker-compose-config"><a href="#验证并查看-compose-文件配置-docker-compose-config" class="headerlink" title="验证并查看 compose 文件配置 docker-compose config"></a>验证并查看 compose 文件配置 docker-compose config</h2><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose config [options]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<p>–resolve-image-digests 将镜像标签标记为摘要<br>-q, –quiet 只验证配置，不输出。 当配置正确时，不输出任何内容，当文件配置错误，输出错误信息<br>–services 打印服务名，一行一个<br>–volumes 打印数据卷名，一行一个</p>
<h2 id="为服务创建容器-docker-compose-create"><a href="#为服务创建容器-docker-compose-create" class="headerlink" title="为服务创建容器 docker-compose create"></a>为服务创建容器 docker-compose create</h2><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose create [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<p>–force-recreate：重新创建容器，即使配置和镜像没有改变，不兼容–no-recreate参数<br>–no-recreate：如果容器已经存在，不需要重新创建，不兼容–force-recreate参数<br>–no-build：不创建镜像，即使缺失<br>–build：创建容器前，生成镜像</p>
<h2 id="显示某个容器端口所映射的公共端口-docker-compose-port"><a href="#显示某个容器端口所映射的公共端口-docker-compose-port" class="headerlink" title="显示某个容器端口所映射的公共端口 docker-compose port"></a>显示某个容器端口所映射的公共端口 docker-compose port</h2><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose port [options] SERVICE PRIVATE_PORT</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<p>–protocol=proto，指定端口协议，TCP（默认值）或者UDP<br>–index=index，如果同意服务存在多个容器，指定命令对象容器的序号（默认为1）</p>
<h2 id="推送镜像-docker-compose-push"><a href="#推送镜像-docker-compose-push" class="headerlink" title="推送镜像 docker-compose push"></a>推送镜像 docker-compose push</h2><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose push [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

<p>options 说明</p>
<p>–ignore-push-failures 忽略推送镜像过程中的错误</p>
<h2 id="停止运行的容器-docker-compose-stop"><a href="#停止运行的容器-docker-compose-stop" class="headerlink" title="停止运行的容器 docker-compose stop"></a>停止运行的容器 docker-compose stop</h2><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose stop [options] [SERVICE...]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>原创</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-compose 模板文件简介</title>
    <url>/2020/08/30/docker/docker-compose-yml/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker-compose-模板文件简介"><a href="#Docker-compose-模板文件简介" class="headerlink" title="Docker-compose 模板文件简介"></a>Docker-compose 模板文件简介</h2><p>Compose 允许用户通过一个 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。<br>Compose 模板文件是一个定义服务、网络和卷的 YAML 文件。Compose 模板文件默认路径是当前目录下的 docker-compose.yml，可以使用 .yml 或 .yaml 作为文件扩展名。<br>Docker-Compose 标准模板文件应该包含 version、services、networks 三大部分，最关键的是 services 和 networks 两个部分。</p>
<blockquote>
<p>Compose 目前有三个版本分别为 Version 1，Version 2，Version 3，Compose 区分 Version 1 和 Version 2（Compose 1.6.0+，Docker Engine 1.10.0+）。Version 2 支持更多的指令。Version 1 将来会被弃用。</p>
</blockquote>
<span id="more"></span>

<h2 id="Docker-compose-文件示例"><a href="#Docker-compose-文件示例" class="headerlink" title="Docker-compose 文件示例"></a>Docker-compose 文件示例</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hello-world:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.gitlab.com/test/hello-world:c0c7f67f</span></span><br><span class="line">    <span class="comment"># HOST:CONTAINER</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="comment">#当容器退出后自动重启(譬如1:docker服务重启后,容器自动启动.2:宿主机重启后docker服务起来后,容器自动启动)</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment">#数据共享卷,宿主机目录:容器目录</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/zhuo/hello-world/config/:/home/config</span></span><br><span class="line">    <span class="comment">#环境变量,可以配置语言,java环境变量,时区等</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=&#x27;-Xms512m</span> <span class="string">-Xmx512m&#x27;</span></span><br><span class="line">    <span class="comment"># 设置容器名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hello-world</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">hello-world</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hello-world</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">front-tier:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>image是指定服务的镜像名称或镜像ID。如果镜像在本地不存在，Compose将会尝试拉取镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">hello-world:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hello-world</span></span><br></pre></td></tr></table></figure>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>服务除了可以基于指定的镜像，还可以基于 Dockerfile，在使用 up 启动时执行构建任务，构建标签是 build，可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用 Dockerfile 自动构建镜像，然后使用镜像启动服务容器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build:</span> <span class="string">/path/to/build/dir</span></span><br></pre></td></tr></table></figure>

<p>也可以是相对路径，只要上下文确定就可以读取到Dockerfile。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure>

<p>build 都是一个目录，如果要指定 Dockerfile 文件需要在 build 标签的子级标签中使用 dockerfile 标签指定</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">../</span></span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">path/of/Dockerfile</span></span><br></pre></td></tr></table></figure>

<h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h3><p>Compose 的容器名称格式是：&lt;项目名称&gt;&lt;服务名称&gt;&lt;序号&gt;<br>可以自定义项目名称、服务名称，但如果想完全控制容器的命名，可以使用 container_name 标签指定：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure>

<h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>在使用 Compose 时，最大的好处就是少打启动命令，但一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候启动应用容器，应用容器会因为找不到数据库而退出。depends_on 标签用于解决容器的依赖、启动先后的问题。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>先启动 redis 和 db 两个服务，最后才启动 web 服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>

<h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><p>ports 用于映射端口的标签。<br>使用 HOST:CONTAINER 格式或者只是指定容器的端口，宿主机会随机映射端口。</p>
<blockquote>
<p>当使用 HOST:CONTAINER 格式来映射端口时，如果使用的容器端口小于 60 可能会得到错误得结果，因为 YAML 将会解析 xx:yy 这种数字格式为 60 进制。所以建议采用字符串格式。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><p>挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 格式，或者使用[HOST:CONTAINER:ro] 格式，后者对于容器来说，数据卷是只读的，可以有效保护宿主机的文件系统。<br>Compose 的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。<br>数据卷的格式可以是下面多种形式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="comment"># 仅指定一个路径，Docker 会自动在容器内部创建一个数据卷。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">  <span class="comment"># 使用绝对路径挂载数据卷</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/data:/var/lib/mysql</span></span><br><span class="line">  <span class="comment"># 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./cache:/tmp/cache</span></span><br><span class="line">  <span class="comment"># 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure>

<h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p>链接到其它服务中的容器。使用服务名称（同时作为别名），或者“服务名称:服务别名”（如 SERVICE:ALIAS），例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">database:db</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>原创</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何仅将一个 Git 仓库的一部分(子集，文件夹)迁移到另一个仓库并保留提交记录</title>
    <url>/2020/08/12/git/detach-move-subdirectory-into-separate-git-repository/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我有一个 <code>Git</code> 存储库，其中包含许多子目录。现在，我发现一个子目录与另一个子目录无关，应该将其分离到单独的存储库中。</p>
<p>如何在保留子目录中文件历史记录的同时执行此操作？</p>
<p>为了清楚起见，假如项目结构为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XYZ/</span><br><span class="line">    .git/</span><br><span class="line">    XY1/</span><br><span class="line">    ABC/</span><br><span class="line">    XY2/</span><br></pre></td></tr></table></figure>

<p>分离后的项目结构为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XYZ/</span><br><span class="line">    .git/</span><br><span class="line">    XY1/</span><br><span class="line">    XY2/ </span><br><span class="line">ABC/</span><br><span class="line">    .git/</span><br><span class="line">    ABC/</span><br></pre></td></tr></table></figure>

<p>下面将介绍一种简单的方式来实现分离。</p>
<span id="more"></span>

<p>其实这种情况非常普遍，以至于 <code>Git</code> 团队提供了一个新的命令 <code>git subtree</code> 来处理这种情况。需 Git 版本 &gt;= 1.7.11。</p>
<h3 id="第一步-原存储库"><a href="#第一步-原存储库" class="headerlink" title="第一步 原存储库"></a>第一步 原存储库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;big-repo&gt;</span><br><span class="line">git subtree split -P &lt;name-of-folder&gt; -b &lt;name-of-new-branch&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> <code>&lt;name-of-folder&gt;</code> 不得包含前导或尾随字符。例如，<code>subproject</code> 的参数必须为 <code>subproject</code>，而不是<code>./subproject/</code></p>
<p><strong>Windows 用户注意事项</strong>：当文件夹深度&gt; 1时，<code>&lt;name-of-folder&gt;</code> 必须使用文件夹分隔符（/）。例如，名为<code>path1\path2\subproject</code> 的文件夹则参数必须为 <code>path1/path2/subproject</code></p>
<h3 id="第二步-创建新的仓库"><a href="#第二步-创建新的仓库" class="headerlink" title="第二步 创建新的仓库"></a>第二步 创建新的仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/&lt;new-repo&gt; &amp;&amp; <span class="built_in">cd</span> ~/&lt;new-repo&gt;</span><br><span class="line">git init</span><br><span class="line">git pull &lt;/path/to/big-repo&gt; &lt;name-of-new-branch&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第三步-将新仓库链接到-GitHub-或任何地方"><a href="#第三步-将新仓库链接到-GitHub-或任何地方" class="headerlink" title="第三步 将新仓库链接到 GitHub 或任何地方"></a>第三步 将新仓库链接到 GitHub 或任何地方</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;git@github.com:user/new-repo.git&gt;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>如果需要删除 <code>&lt;big-repo&gt;</code> 中的目录，可以执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -rf &lt;name-of-folder&gt;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>项目目录如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree ~/node-browser-compat</span><br><span class="line"></span><br><span class="line">node-browser-compat</span><br><span class="line">├── ArrayBuffer</span><br><span class="line">├── Audio</span><br><span class="line">├── Blob</span><br><span class="line">├── FormData</span><br><span class="line">├── atob</span><br><span class="line">├── btoa</span><br><span class="line">├── location</span><br><span class="line">└── navigator</span><br></pre></td></tr></table></figure>

<p>我想将 <code>btoa</code> 目录拆分为单独的 Git 存储库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/node-browser-compat/</span><br><span class="line">git subtree split -P btoa -b btoa-only</span><br></pre></td></tr></table></figure>

<p>现在，我有了一个新分支，<code>btoa-only</code> 该分支仅具有提交功能，并且我想创建一个新的存储库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/btoa/ &amp;&amp; <span class="built_in">cd</span> ~/btoa/</span><br><span class="line">git init</span><br><span class="line">git pull ~/node-browser-compat btoa-only</span><br></pre></td></tr></table></figure>

<p>接下来，我在 GitHub 或 Gitlab 上创建一个新的仓库，或将其添加为 <code>origin</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:node-browser-compat/btoa.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>最后，我要从原仓库中删除文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -rf btoa</span><br></pre></td></tr></table></figure>



<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU5NDI0L2RldGFjaC1tb3ZlLXN1YmRpcmVjdG9yeS1pbnRvLXNlcGFyYXRlLWdpdC1yZXBvc2l0b3J5">https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 模板文件简介</title>
    <url>/2020/09/08/docker/docker-yml/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Docker 通过从一个 <code>Dockerfile</code> 文本文件中读取指令来自动构建镜像，该文本文件按顺序包含构建给定镜像所需的所有命令。<code>Dockerfile</code> 遵循特定的格式和指令集。</p>
<p>Docker 镜像由只读层组成，每个只读层代表一个 Dockerfile 指令。这些层是堆叠的，每个层都是与上一层相比变化的增量。</p>
<p>例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> python /app/app.py</span></span><br></pre></td></tr></table></figure>

<p>每条指令创建一层：</p>
<ul>
<li><code>FROM</code> 从<code>ubuntu:18.04</code>Docker 镜像创建一个图层。</li>
<li><code>COPY</code> 从 Docker 客户端的当前目录添加文件。</li>
<li><code>RUN</code> 使用 <code>make</code> 构建您的应用程序。</li>
<li><code>CMD</code> 指定在容器中运行什么命令。</li>
</ul>
<p>运行图像并生成容器时，可以 在基础层之上添加一个新的<em>可写层</em>（“容器层”）。对运行中的容器所做的所有更改（例如写入新文件，修改现有文件和删除文件）都将写入此可写容器层。</p>
<span id="more"></span>

<h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>初始化一个新的构建阶段，并为后续指令设置 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZ2xvc3NhcnkvI2Jhc2VfaW1hZ2U=">基本镜像<i class="fa fa-external-link-alt"></i></span>。</p>
<p>有效的 <code>Dockerfile</code> 必须从 <code>FROM</code> 指令开始。</p>
<blockquote>
<p>在一个 Dockerfile 中，ARG 指令是唯一可以早于 FROM 指令的指令。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> [--platform=&lt;platform&gt;] &lt;image&gt; [AS &lt;name&gt;]</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> [--platform=&lt;platform&gt;] &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>FROM 使用 ARG 指令定义的变量</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span>  CODE_VERSION=latest</span><br><span class="line"><span class="keyword">FROM</span> base:$&#123;CODE_VERSION&#125;</span><br><span class="line"><span class="keyword">CMD</span><span class="bash">  /code/run-app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> extras:$&#123;CODE_VERSION&#125;</span><br><span class="line"><span class="keyword">CMD</span><span class="bash">  /code/run-extras</span></span><br></pre></td></tr></table></figure>

<h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>运行指令</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>shell 形式，命令在 shell 中运行,默认情况下在 <code>Linux</code> 上是 <code>/bin/sh -c</code> 或 <code>Windows</code> 上使用 <code>cmd /S /C</code> 运行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<p>exec 方式执行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>在 <em>shell</em> 形式中，您可以使用<code>\</code>（反斜杠）将一条 RUN 指令继续到下一行。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN /bin/bash -c &#x27;source $HOME/.bashrc; \</span><br><span class="line">echo $HOME&#x27;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN /bin/bash -c &#x27;source $HOME/.bashrc; echo $HOME&#x27;</span><br></pre></td></tr></table></figure>

<p>使用’/ bin / sh’以外的其他 shell，请使用 <em>exec</em> 形式传入所需的shell。例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><em>EXEC</em> 形式被解析为一个  JSON array，这意味着必须使用双引号（“）而不是单引号（’）。</p>
</blockquote>
<p>与 shell 形式不同， exec 方式不会替换变量，例如 <code>RUN [ &quot;echo&quot;, &quot;$HOME&quot; ]</code>将不会对变量 <code>$HOME</code> 进行替换。</p>
<p>如果要进行 shell 处理，则可以使用 shell 形式或直接执行 shelll，例如：<code>RUN [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code>。当使用 exec 表单并直接执行 shell 时（例如在 shell 表单中），是由 shell 进行环境变量扩展，而不是 docker。</p>
<blockquote>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>在 JSON 格式中，必须转义反斜杠。在 Windows 中，反斜杠是路径分隔符，这一点尤其重要。以下 shell 形式将被视为无效的 JSON ，并以意外的方式失败：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN [&quot;c:\windows\system32\tasklist.exe&quot;]</span><br></pre></td></tr></table></figure>

<p>此示例的正确语法为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN [&quot;c:\\windows\\system32\\tasklist.exe&quot;]</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD命令设置容器启动后默认执行的命令及其参数，但 CMD 设置的命令能够被 <code>docker run</code> 命令后面的命令行参数替换。一个 Dockerfile 只能有一条 CMD 指令。如果存在多个，则只有最后一个 CMD 指令生效</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>exec 形式，这是首选形式</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure>

<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/usr/bin/wc&quot;</span>,<span class="string">&quot;--help&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h2><p>标签。 <code>LABEL</code> 指令将元数据添加到 image</p>
<p>标签是键值对</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br></pre></td></tr></table></figure>

<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>以下用法都可以：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">&quot;com.example.vendor&quot;</span>=<span class="string">&quot;ACME Incorporated&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.label-with-value=<span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&quot;This text illustrates \</span></span></span><br><span class="line"><span class="string"><span class="bash">that label-values can span multiple lines.&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>查看 <code>LABER</code> 设置的元数据</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker inspect &lt;container&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MAINTAINER-已过时"><a href="#MAINTAINER-已过时" class="headerlink" title="MAINTAINER [已过时]"></a>MAINTAINER [已过时]</h2><p>设置生成图像的作者.</p>
<p><code>LABEL</code> 指令比此版本的灵活得多，您应该改用它，因为它可以设置所需的任何元数据，并且可以轻松查看，例如使用 <code>docker inspect</code>。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>使用 Laber 标签的等效语法如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;&lt;name&gt;&quot;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p><code>EXPOSE</code> 指令通知 Docker 容器在运行时监听指定的网络端口。您可以指定端口是侦听 TCP 还是 UDP，如果未指定协议，则默认值为TCP。<code>EXPOSE</code> 指令实际上并未发布端口。它充当构建镜像的人员和运行容器的人员之间的一种文档类型，有关打算发布哪些端口的信息。要在运行容器时实际发布端口，请使用 <code>docker run -p</code> 映射端口。</p>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p>默认情况下，<code>EXPOSE</code> 假定为TCP。您还可以指定UDP：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure>

<p>要同时在 TCP 和 UDP 上公开，请包括以下两行：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure>

<p>无论 <code>EXPOSE</code> 设置如何，都可以在运行时使用该 <code>-p</code> 标志覆盖它们。例如</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 80:80/tcp -p 80:80/udp ...</span></span><br></pre></td></tr></table></figure>

<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p><code>ENV</code> 指令将环境变量<code>&lt;key&gt;</code>设置为 value <code>&lt;value&gt;</code>，此值将在构建阶段中所有后续指令的环境中使用。</p>
<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>

<p>第一种形式，<code>ENV &lt;key&gt; &lt;value&gt;</code>会将一个变量设置为一个值。第一个空格之后的整个字符串将被视为<code>&lt;value&gt;</code>-包括空格字符。</p>
<p>第二种形式<code>ENV &lt;key&gt;=&lt;value&gt; ...</code>允许一次设置多个变量。请注意，第二种形式在语法中使用等号（=），而第一种形式则不使用等号（=）。像命令行解析一样，引号和反斜杠可用于在值中包含空格。</p>
<h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p>多个环境变量，包含空格</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> myName=<span class="string">&quot;John Doe&quot;</span> myDog=Rex\ The\ Dog \</span><br><span class="line">    myCat=fluffy</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENV myName John Doe</span><br><span class="line">ENV myDog Rex The Dog</span><br><span class="line">ENV myCat fluffy</span><br></pre></td></tr></table></figure>

<h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>ADD 指令从 <code>&lt;src&gt;</code> 中复制新文件，目录或远程文件 URL  ，并将它们添加到路径 <code>&lt;dest&gt;</code> 的镜像文件系统中。</p>
<p><code>&lt;src&gt;</code> 可以指定多个资源，但是如果它们是文件或目录，则将其路径解释为相对于构建上下文源的路径。</p>
<h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>包含空格的路径需要后一种形式。</p>
<blockquote>
<h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><p>该 <code>--chown</code> 功能仅在用于构建 Linux 容器的 Dockerfiles 上受支持，而在 Windows 容器上不起作用。</p>
</blockquote>
<p>每个 <code>&lt;src&gt;</code> 都可能包含通配符，并且匹配将使用Go的 <span class="exturl" data-url="aHR0cDovL2dvbGFuZy5vcmcvcGtnL3BhdGgvZmlsZXBhdGgjTWF0Y2g=">filepath.Match<i class="fa fa-external-link-alt"></i></span> 规则完成。例如：</p>
<p>要添加所有以“ hom”开头的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD hom* /mydir/</span><br></pre></td></tr></table></figure>

<p>在下面的示例中，<code>?</code>被替换为任何单个字符，例如“ home.txt”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD hom?.txt /mydir/</span><br></pre></td></tr></table></figure>

<p><code>&lt;dest&gt;</code> 是一个绝对路径，或相对于 <code>WORKDIR</code> 的相对路径 ，将会把指定的 <code>&lt;src&gt;</code>  在目标容器内进行复制。</p>
<p>下面的示例使用相对路径，并将“ test.txt”添加到 <code>&lt;WORKDIR&gt;/relativeDir/</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD test.txt relativeDir/</span><br></pre></td></tr></table></figure>

<p>而此示例使用绝对路径，并向  <code>/absoluteDir/</code> 添加“ test.txt”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD test.txt /absoluteDir/</span><br></pre></td></tr></table></figure>

<p>如果您的 URL 文件受身份验证保护，则您需要使用<code>RUN wget</code>， <code>RUN curl</code>或从容器中使用其他工具，因为该<code>ADD</code>指令不支持身份验证。</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p><code>ADD</code> 遵守以下规则：</p>
<ul>
<li><p>该<code>&lt;src&gt;</code>路径必须在构建<em>上下文</em>内；您不能这样做 <code>ADD ../something /something</code>，因为第一步 <code>docker build </code>是将上下文目录（和子目录）发送到docker守护程序。</p>
</li>
<li><p>如果 <code>&lt;src&gt;</code> 是URL 并且 <code>&lt;dest&gt;</code> 不以斜杠结尾，则从 URL 下载文件并将其复制到 <code>&lt;dest&gt;</code>。</p>
</li>
<li><p>如果<code>&lt;src&gt;</code> 是 URL 并且 <code>&lt;dest&gt;</code> 以斜杠结尾，则从 URL 推断文件名，然后将文件下载到 <code>&lt;dest&gt;/&lt;filename&gt;</code>。例如，<code>ADD http://example.com/foobar /</code> 将创建文件 <code>/foobar</code>。该URL必须具有不平凡的路径，以便在这种情况下可以发现适当的文件名（例如 <code>http://example.com</code> 路径将不起作用）。</p>
</li>
<li><p>如果 <code>&lt;src&gt;</code> 是目录，则将复制目录的整个内容，包括文件系统元数据。</p>
<ul>
<li><blockquote>
<h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><p>目录本身不被复制，仅其内容被复制。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>如果<code>&lt;src&gt;</code>是以公认的压缩格式（身份，gzip，bzip2或xz）作为<em>本地</em> tar归档文件，则将其解压缩为目录。来自远程 URL的资源不会被解压缩。复制或解压缩目录时，其行为与 <code>tar -x</code> 相同。</p>
</li>
<li><p>如果<code>&lt;src&gt;</code>是其他类型的文件，则会将其及其元数据一起单独复制。在这种情况下，如果<code>&lt;dest&gt;</code>以斜杠结尾<code>/</code>，则将其视为目录，并将 <code>&lt;src&gt;</code> 内容写入<code>&lt;dest&gt;/base(&lt;src&gt;)</code>。</p>
</li>
<li><p>如果<code>&lt;src&gt;</code>直接或由于使用通配符而指定了多个资源，则该资源<code>&lt;dest&gt;</code>必须是目录，并且必须以斜杠结尾<code>/</code>。</p>
</li>
<li><p>如果<code>&lt;dest&gt;</code>不以斜杠结尾，则将其视为常规文件，并将其内容<code>&lt;src&gt;</code>写入<code>&lt;dest&gt;</code>。</p>
</li>
<li><p>如果<code>&lt;dest&gt;</code>不存在，它将与路径中所有缺少的目录一起创建。</p>
</li>
</ul>
<h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>包含空格的路径需要后一种形式</p>
<p><code>COPY</code> 遵守以下规则：</p>
<ul>
<li><p>该<code>&lt;src&gt;</code>路径必须在构建上下文内；您不能这样做<code>COPY ../something /something</code>，因为第一步 <code>docker build</code> 是将上下文目录（和子目录）发送到docker守护程序。</p>
</li>
<li><p>如果<code>&lt;src&gt;</code>是目录，则将复制目录的整个内容，包括文件系统元数据。</p>
<ul>
<li><blockquote>
<p><strong>注意</strong></p>
<p>目录本身不被复制，仅其内容被复制。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>如果<code>&lt;src&gt;</code>是其他类型的文件，则会将其及其元数据一起单独复制。在这种情况下，如果<code>&lt;dest&gt;</code>以斜杠结尾<code>/</code>，则将其视为目录，并将其内容<code>&lt;src&gt;</code>写入<code>&lt;dest&gt;/base(&lt;src&gt;)</code>。</p>
</li>
<li><p>如果<code>&lt;src&gt;</code>直接或由于使用通配符而指定了多个资源，则该资源<code>&lt;dest&gt;</code>必须是目录，并且必须以斜杠结尾<code>/</code>。</p>
</li>
<li><p>如果<code>&lt;dest&gt;</code>不以斜杠结尾，则将其视为常规文件，并将其内容<code>&lt;src&gt;</code>写入<code>&lt;dest&gt;</code>。</p>
</li>
<li><p>如果<code>&lt;dest&gt;</code>不存在，它将与路径中所有缺少的目录一起创建。</p>
</li>
</ul>
<h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p><code>ENTRYPOINT </code> 允许您配置将作为可执行文件运行的容器。</p>
<p>可以使用 –entrypoint 覆盖 <code>ENTRYPOINT </code>  设置，但是只能使用 exec 形式</p>
<h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>EXEC 的形式，这是优选的形式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>shell 形式</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure>

<h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h2><p><code>VOLUME</code> 指令创建具有指定名称的安装点，并将其标记为保存来自本机主机或其他容器的外部安装的卷。</p>
<h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><p>以下 Dockerfile 生成一个镜像，用 <code>docker run</code> 在 <code>/myvol</code> 处创建一个新的挂载点并将 <code>greeting</code> 文件复制到新创建的卷中。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /myvol</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt; /myvol/greeting</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /myvol</span></span><br></pre></td></tr></table></figure>

<h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p><code>WORKDIR</code> 指令定义的工作目录被 <code>Dockerfile</code> 中在它之后出现的任何 <code>RUN</code>，<code>CMD</code>， <code>ENTRYPOINT</code>，<code>COPY</code>和<code>ADD</code> 指令使用。如果<code>WORKDIR</code>不存在，那么即使以后的任何<code>Dockerfile</code>指令中都没有使用它，也将创建它。</p>
<h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span><br></pre></td></tr></table></figure>

<p>可以在 <code>Dockerfile</code> 中多次使用 <code>WORKDIR</code> 指令。 如果提供了相对路径，则它将相对于上一条<code>WORKDIR</code>指令的路径 。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure>

<p>最终 <code>pwd</code> 命令的输出将是 <code>/a/b/c</code>。</p>
<p><code>WORKDIR</code> 指令可以解析先前使用设置的环境变量 <code>ENV</code>。您只能使用在 <code>Dockerfile</code> 中明确设置的环境变量。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DIRPATH /path</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$DIRPATH</span>/<span class="variable">$DIRNAME</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure>

<p>最终 <code>pwd</code> 命令的输出将是 <code>/path/$DIRNAME</code></p>
<h2 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h2><p><code>ARG</code> 指令定义了一个变量，用户可以在构建时 <code>docker build</code> 使用带有<code>--build-arg &lt;varname&gt;=&lt;value&gt;</code> 标志的命令将变量传递给构建器。如果用户指定了未在 Dockerfile 中定义的构建参数，则构建会输出警告。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[Warning] One or more build-args [foo] were not consumed.</span><br></pre></td></tr></table></figure>

<h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br></pre></td></tr></table></figure>

<p>Dockerfile可能包含一个或多个<code>ARG</code>指令。例如，以下是有效的Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">ARG</span> user1</span><br><span class="line"><span class="keyword">ARG</span> buildno</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不建议使用构建时变量来传递诸如 github 密钥，用户凭据等秘密信息，使用 docker history 命令，任何用户都可以看到构建时变量值。</p>
</blockquote>
<p><code>ARG</code> 指令可以可选地包括一个默认值：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">ARG</span> user1=someuser</span><br><span class="line"><span class="keyword">ARG</span> buildno=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>ARG</code> 指令具有缺省值，并且在构建时未传递任何值，那么构建器将使用缺省值。</p>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>以如下 dockerFile 为例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">USER</span> $&#123;<span class="keyword">user</span>:-some_user&#125;</span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">USER</span> $<span class="keyword">user</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>用户通过调用以下命令来构建此文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build --build-arg user=what_user .</span><br></pre></td></tr></table></figure>

<p>结果是第二行的  USER  被解析为 <code>some_user</code> ，第4行的 USER 被解析为 <code>what_user</code>。</p>
<p>在通过 <code>ARG</code> 指令定义变量之前 ，对变量的任何使用都会获取一个空字符串。</p>
<p><code>ARG</code> 指令在它被定义的构建阶段结束推移的范围进行。要在多个阶段使用 <code>ARG</code> ，每个阶段都必须包含 <code>ARG</code> 指令。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">ARG</span> SETTINGS</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./run/setup <span class="variable">$SETTINGS</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">ARG</span> SETTINGS</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./run/other <span class="variable">$SETTINGS</span></span></span><br></pre></td></tr></table></figure>

<h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><p>您可以使用<code>ARG</code>或<code>ENV</code>指令来指定<code>RUN</code>指令可用的变量。使用<code>ENV</code>指令定义的环境变量始终会覆盖<code>ARG</code>同名指令。</p>
<p>以如下 dockerFIle 为例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">ARG</span> CONT_IMG_VER</span><br><span class="line"><span class="keyword">ENV</span> CONT_IMG_VER v1.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$CONT_IMG_VER</span></span></span><br></pre></td></tr></table></figure>

<p>假定使用以下命令构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build --build-arg CONT_IMG_VER=v2.0.1 .</span><br></pre></td></tr></table></figure>

<p>在这种情况下，<code>RUN</code>指令将使用<code>v1.0.0</code>而不是<code>ARG</code>用户传递的设置：<code>v2.0.1</code>。此行为类似于Shell脚本，其中局部作用域的变量从其定义的角度覆盖作为参数传递或从环境继承的变量。</p>
<p>使用上面的示例，但使用不同的<code>ENV</code>规范，可以在<code>ARG</code>和<code>ENV</code>指令之间创建更有用的交互：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">ARG</span> CONT_IMG_VER</span><br><span class="line"><span class="keyword">ENV</span> CONT_IMG_VER $&#123;CONT_IMG_VER:-v1.<span class="number">0.0</span>&#125;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$CONT_IMG_VER</span></span></span><br></pre></td></tr></table></figure>

<p>这种情况下  环境变量会获取传入变量，如果没有传入变量，则使用缺省值。</p>
<p>与<code>ARG</code>指令不同，<code>ENV</code>值始终保留在生成的镜像中。考虑不带<code>--build-arg</code>标志的Docker构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build .</span><br></pre></td></tr></table></figure>

<p>使用此 Dockerfile 示例，<code>CONT_IMG_VER</code> 仍然保留在镜像中，但其值将是指令 <code>ENV</code> 第3行中的默认设置<code>v1.0.0</code>。</p>
<h3 id="内置-ARG"><a href="#内置-ARG" class="headerlink" title="内置 ARG"></a>内置 ARG</h3><p>Docker 具有一组预定义 <code>ARG</code> 变量，您可以在 Dockerfile 中不使用 <code>ARG </code> 相应指令的情况下使用它们。</p>
<ul>
<li><code>HTTP_PROXY</code></li>
<li><code>http_proxy</code></li>
<li><code>HTTPS_PROXY</code></li>
<li><code>https_proxy</code></li>
<li><code>FTP_PROXY</code></li>
<li><code>ftp_proxy</code></li>
<li><code>NO_PROXY</code></li>
<li><code>no_proxy</code></li>
</ul>
<p>要使用这些，只需使用以下标志在命令行中传递它们：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--build-arg &lt;varname&gt;=&lt;value&gt;</span><br></pre></td></tr></table></figure>

<p>默认情况下，这些预定义变量从 <code>docker history</code> 的输出中排除。排除它们可以减少意外泄露 <code>HTTP_PROXY</code> 变量中的敏感身份验证信息的风险。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>原创</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 如何迁移项目至另一远程仓库并保留提交记录</title>
    <url>/2020/08/12/git/git-change-remote/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在 Git 使用过程中，难免会遇到仓库地址发生变更的情况，如果直接将项目拷贝到新的目录，则会丢失以往的所有提交记录，如何能既迁移了仓库又保留以往提交记录呢？</p>
<p>方法有很多，这里简单介绍几种：</p>
<span id="more"></span>

<p>以项目名为 demo 举例：</p>
<p>老地址：</p>
<ul>
<li>HTTPS: <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIueWl6aHVvLmNvbS9wcm9qZWN0L2RlbW8uZ2l0">https://gitlab.yizhuo.com/project/demo.git<i class="fa fa-external-link-alt"></i></span></li>
<li>SSH: <span class="exturl" data-url="bWFpbHRvOiYjMTAzOyYjeDY5OyYjMTE2OyYjNjQ7JiMxMDM7JiMxMDU7JiMxMTY7JiN4NmM7JiN4NjE7JiN4NjI7JiM0NjsmIzEyMTsmI3g2OTsmI3g3YTsmIzEwNDsmIzExNzsmI3g2ZjsmI3gyZTsmIzk5OyYjMTExOyYjeDZkOw==">&#103;&#x69;&#116;&#64;&#103;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#121;&#x69;&#x7a;&#104;&#117;&#x6f;&#x2e;&#99;&#111;&#x6d;<i class="fa fa-external-link-alt"></i></span>:project/demo.git</li>
</ul>
<p>新地址：</p>
<ul>
<li>HTTPS: <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIueWl6aHVvLmNvbS9wcm9qZWN0L2dpdF9kZW1vLmdpdA==">https://gitlab.yizhuo.com/project/git_demo.git<i class="fa fa-external-link-alt"></i></span></li>
<li>SSH: <span class="exturl" data-url="bWFpbHRvOiYjMTAzOyYjMTA1OyYjMTE2OyYjeDQwOyYjMTAzOyYjeDY5OyYjeDc0OyYjMTA4OyYjeDYxOyYjOTg7JiN4MmU7JiN4Nzk7JiN4Njk7JiN4N2E7JiMxMDQ7JiMxMTc7JiMxMTE7JiN4MmU7JiM5OTsmI3g2ZjsmIzEwOTs=">&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#108;&#x61;&#98;&#x2e;&#x79;&#x69;&#x7a;&#104;&#117;&#111;&#x2e;&#99;&#x6f;&#109;<i class="fa fa-external-link-alt"></i></span>:project/git_demo.git</li>
</ul>
<p>远程仓库名称： origin</p>
<h3 id="方法一-通过命令直接修改远程地址"><a href="#方法一-通过命令直接修改远程地址" class="headerlink" title="方法一 通过命令直接修改远程地址"></a>方法一 通过命令直接修改远程地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd demo</span><br><span class="line">git remote</span><br><span class="line">git remote set-url origin https://gitlab.yizhuo.com/project/git_demo.git</span><br><span class="line">或</span><br><span class="line">git remote set-url origin git@gitlab.yizhuo.com:project/git_demo.git</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="方法二-直接修改配置文件"><a href="#方法二-直接修改配置文件" class="headerlink" title="方法二 直接修改配置文件"></a>方法二 直接修改配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd demo/.git</span><br><span class="line">vi config</span><br></pre></td></tr></table></figure>

<p>config 文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = true</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">	ignorecase = true</span><br><span class="line">	precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = git@gitlab.yizhuo.com:project/demo.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br><span class="line">[branch &quot;dev&quot;]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/dev</span><br></pre></td></tr></table></figure>

<p>修改 <code>[remote &quot;origin&quot;]</code> 下面的 <code>git@gitlab.yizhuo.com:project/demo.git</code> 为 <code>git@gitlab.yizhuo.com:project/git_demo.git</code> </p>
<p>然后 <code>git push</code> 即可</p>
<h3 id="方法三-通过第三方-Git-客户端修改"><a href="#方法三-通过第三方-Git-客户端修改" class="headerlink" title="方法三 通过第三方 Git 客户端修改"></a>方法三 通过第三方 Git 客户端修改</h3><p>以 <strong>Github Desktop</strong> 为例，点击 <strong>Repository</strong> -&gt; <strong>Repository Settings</strong> ,更改 <strong>remote</strong> 为 <code>git@gitlab.yizhuo.com:project/git_demo.git</code> ，然后推送代码至远程仓库即可</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 Git 多目录下区分不同用户的提交</title>
    <url>/2018/08/03/git/different-directories-use-different-user-names/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>作为一个开发者，通常会拥有公司与 github/gitlab 等多个账户，在不同项目下开发时，commit 的用户名和邮箱是不同的，例如公司项目中，使用的是本名+公司邮箱，而 github 项目中使用的是个人邮箱和昵称。</p>
<p>首先，我们需要了解一下 Git 配置文件生效的优先级。对于一个 Git 仓库来说，配置优先级为 仓库 &gt; 全局 &gt; 系统。操作 Git 时，首先会查找<code>/etc/gitconfig</code> (系统)，然后查找用户的全局配置<code>~/.gitconfig</code>，最后查找每个仓库的 <code>.git/config</code> 配置。所有的配置项，从低优先级开始加载，出现冲突时，较高优先级的配置项会覆盖前面的配置。</p>
<span id="more"></span>

<p>使用 <code>includeif</code> 参数实现不同目录的配置<br><code>git (version &gt;= 2.13.0)</code> 版本支持 <code>includeIf </code>用于开启不同目录下匹配不同的配置文件，使用方式：</p>
<h3 id="第一步：在-gitconfig-中配置"><a href="#第一步：在-gitconfig-中配置" class="headerlink" title="第一步：在 ~/.gitconfig 中配置"></a>第一步：在 <code>~/.gitconfig</code> 中配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[includeIf &quot;gitdir:~/work/&quot;]</span><br><span class="line">   path = ~/.gitconfig-work</span><br><span class="line">[includeIf &quot;gitdir:~/github/&quot;]</span><br><span class="line">  path = ~/.gitconfig-github</span><br></pre></td></tr></table></figure>

<p>如上配置意思是在 work 目录下进行 git 操作使用 <code>.gitconfig-work</code> 中的配置信息<br>在 github 目录下进行 git 操作使用 <code>.gitconfig-github</code>中的配置信息</p>
<h3 id="第二步：-config-work-文件配置："><a href="#第二步：-config-work-文件配置：" class="headerlink" title="第二步：.config-work 文件配置："></a>第二步：<code>.config-work</code> 文件配置：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = 卓</span><br><span class="line">    email = xxx@163.com</span><br></pre></td></tr></table></figure>

<p>在不同的 config 文件中配置不同的个人信息即可实现区分不同用户的提交。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令整理</title>
    <url>/2018/08/01/git/git-command/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>一般来说，下图这些命令已经足够日常使用。但是有些时候，我们还需要使用其它的一些不太常用的命令。</p>
</blockquote>
<p><img data-src="/assets/picture/git-command/bg2015120901.png" alt="bg2015120901"></p>
<blockquote>
<p>下面是我整理的常用 Git 命令。</p>
</blockquote>
<span id="more"></span>

<h2 id="Git-配置类命令"><a href="#Git-配置类命令" class="headerlink" title="Git 配置类命令"></a>Git 配置类命令</h2><blockquote>
<p>基本上换电脑，或者需要添加/切换远程仓库的时候 才能用到</p>
</blockquote>
<h3 id="第一步：首先配置用户名和邮箱"><a href="#第一步：首先配置用户名和邮箱" class="headerlink" title="第一步：首先配置用户名和邮箱"></a>第一步：首先配置用户名和邮箱</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置或切换 git 用户名: </span><br><span class="line">git config --global user.name &quot;YOUR USERNAME&quot;</span><br><span class="line"># 配置或切换 git 邮箱:</span><br><span class="line">git config --global user.email &quot;YOUR EMAIL&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置完可以查看一下是否生效：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看用户</span><br><span class="line">git config user.name</span><br><span class="line"># 查看邮箱</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<h3 id="第二步：GIT-配置公钥"><a href="#第二步：GIT-配置公钥" class="headerlink" title="第二步：GIT 配置公钥"></a>第二步：GIT 配置公钥</h3><h4 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1. 生成密钥"></a>1. 生成密钥</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入 Git 默认密钥目录</span><br><span class="line">cd ~/.ssh</span><br><span class="line"># 列出文件</span><br><span class="line">ls </span><br><span class="line">如果有3个文件，则密钥已经生成，id_rsa.pub 就是公钥，可直接进入下面第二步；</span><br><span class="line"></span><br><span class="line">如果没有 .ssh 文件夹或者文件夹为空，则密钥没有生成，那么通过</span><br><span class="line">ssh-keygen -t rsa -C &quot;your email&quot;</span><br><span class="line">生成密钥</span><br><span class="line">会提示生成密钥的文件名及设置密码和确认密码  如果都不需设置 则直接三次回车</span><br><span class="line">tips：多账户配置此处需指定生成密钥的文件别名</span><br></pre></td></tr></table></figure>
<h4 id="2-配置公钥"><a href="#2-配置公钥" class="headerlink" title="2. 配置公钥"></a>2. 配置公钥</h4><blockquote>
<p>将公钥 <code>id_rsa.pub</code> 中的内容配置到 GitHub/GitLab/Gitee 上，一般为 Setting -&gt; SSH KEY</p>
</blockquote>
<h4 id="3-测试连接"><a href="#3-测试连接" class="headerlink" title="3. 测试连接"></a>3. 测试连接</h4><blockquote>
<p>执行命令 <code>ssh -T git@github.com</code>  测试连接  出现提示如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (xx.11.22.33)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThxxxxxxxxxxxxxxxxxxxxxxxb8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? </span><br></pre></td></tr></table></figure>

<p>输入 <code>yes</code> 继续；出现类似以下提示</p>
<blockquote>
<p>Hi xxx! you’ve successfully authenticated. Xxxxx….</p>
</blockquote>
<p>说明密钥配置成功,  <code>~/.ssh</code> 路径下会出现 <code>known_hosts</code> 文件。 </p>
<p>接下来就可以正常使用 Git 从远程仓库 <code>clone</code> 或 <code>pull</code> 项目了。</p>
<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把这个目录变成 Git 可以管理的仓库</span></span><br><span class="line">  git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有配置</span></span><br><span class="line">  git config --list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作树的状态 常用，使用此命令 Git 会显示当前 Git 仓库的状态，并给出命令建议</span></span><br><span class="line">  git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件添加到仓库</span></span><br><span class="line">  git add [filename]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 例：添加 README.md 到仓库</span></span><br><span class="line">  git add README.md </span><br><span class="line"><span class="meta">#</span><span class="bash"> 不但可以跟单一文件，还可以跟通配符，更可以跟目录。一个点就把当前目录下所有未追踪的文件全部 add</span> </span><br><span class="line">  git add . </span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消 add 的文件：如果手滑添加了不想添加的内容，例如 HelloWorld.class 文件，我们可以这样来取消暂存 HelloWorld.class 文件：</span> </span><br><span class="line">  git reset HEAD HelloWorld.class</span><br><span class="line"><span class="meta">#</span><span class="bash"> git 撤销文件修改：在工作区修改，但并未提交到暂存区（即并没有add） 注意：git chekcout 是让文件回到最近一次该文件 git commit 或 git add 时的状态。如果一次也没 commit 和 add 过的文件无法使用该命令撤销。命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令</span></span><br><span class="line">  git checkout -- &lt;file&gt;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 例：readme.txt 文件修改后还未 git add，撤销 readme.txt 的修改</span></span><br><span class="line">  git checkout -- readme.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 撤销全部文件修改</span></span><br><span class="line">  git checkout .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把文件提交到仓库 引号内是备注</span></span><br><span class="line">  git commit -m &quot;first commit&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关联远程仓库</span></span><br><span class="line">  git remote add origin https://github.com/xxx.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消远程仓库的关联</span></span><br><span class="line">  git remote remove origin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取远程仓库所有内容 并与本地内容合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把本地库的所有内容推送到远程库上</span></span><br><span class="line">  git push -u origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> git 查看远程仓库地址命令：</span></span><br><span class="line">  git remote -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从另一个存储库下载对象和引用，和 git pull 相比，该命令不会强制合并，需要手动 merge。</span></span><br><span class="line">  git fetch [remote]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令 git fetch 取回更新后，可执行以下命令查看远程所有提交日志</span></span><br><span class="line">  git log -p FETCH_HEAD</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示本地的 master 分支和 origin/master 分支 所有历史提交日志</span></span><br><span class="line">  git log -p master origin/master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比较本地的 master 分支和 origin/master 分支的差别</span></span><br><span class="line">  git diff master origin/master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">  git branch [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支</span></span><br><span class="line">  git checkout [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line">  git checkout -b [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令</span></span><br><span class="line">  git branch dev</span><br><span class="line">  git checkout dev</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 例：创建 dev 分支，然后切换到 dev 分支</span></span><br><span class="line">  git checkout -b dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支</span></span><br><span class="line">  git merge [branch]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 例：把 dev 分支的工作成果合并到 master 分支上：</span></span><br><span class="line">  1.切换到 master 分支上</span><br><span class="line">  2.执行 git merge dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line">  git branch -d [branch]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 例：git 删除本地分支</span></span><br><span class="line">  1.先切换到别的分支: git checkout dev_20180927</span><br><span class="line">  2.删除本地分支: git branch -d dev_20181018</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看分支</span></span><br><span class="line">  git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打 tag</span></span><br><span class="line">  git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用命令 git tag 查看所有标签</span></span><br><span class="line">  git tag</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 tag</span></span><br><span class="line">  git show [tag]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果要推送某个标签到远程，使用命令</span></span><br><span class="line">  git push origin &lt;tagname&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制 push 当前分支到远程仓库，即使有冲突</span></span><br><span class="line">  git push -f origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 版本回复</span></span><br><span class="line">  git reset --hard 1094a(版本号)</span><br><span class="line">版本号没必要写全，前几位就可以了，Git 会自动去找。当然也不能只写前一两位，因为 Git 可能会找到多个版本号，就无法确定是哪一个了。</span><br></pre></td></tr></table></figure>

<h3 id="新建-Git-项目命令"><a href="#新建-Git-项目命令" class="headerlink" title="新建 Git 项目命令"></a>新建 Git 项目命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# java-zookeeper&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/xxx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h2 id="Git-解决冲突"><a href="#Git-解决冲突" class="headerlink" title="Git 解决冲突"></a>Git 解决冲突</h2><blockquote>
<p>简单暴力，合并时需要注意别覆盖了远程其他人的修改</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先 commit 到本地仓库  然后 pull 远程仓库</span><br><span class="line">最后合并并提交</span><br></pre></td></tr></table></figure>

<h2 id="忽略-SSL-验证"><a href="#忽略-SSL-验证" class="headerlink" title="忽略 SSL 验证"></a>忽略 SSL 验证</h2><blockquote>
<p>当你通过 HTTPS 访问 Git 远程仓库，如果服务器的 SSL 证书未经过第三方机构签署，那么 Git 就会报错。</p>
</blockquote>
<p>解决办法：执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure>

<h2 id="CRLF-问题解决办法"><a href="#CRLF-问题解决办法" class="headerlink" title="CRLF 问题解决办法"></a>CRLF 问题解决办法</h2><blockquote>
<p>在使用 Git 时出现以下提示：</p>
<p>Warn if CRLF line separators are about to be commited</p>
</blockquote>
<p><strong>问题参考链接</strong>：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc3MzAzNTAvcGhwc3Rvcm0tZ2l0LWxpbmUtZW5kaW5ncy1jaGFuZ2luZy1mcm9tLWxmLXRvLWNybGYvMjc3MzA1NjE=">stackoverflow<i class="fa fa-external-link-alt"></i></span></p>
<p>解决办法：执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br><span class="line">git config --global core.eol lf</span><br></pre></td></tr></table></figure>

<h2 id="Git-多用户配置"><a href="#Git-多用户配置" class="headerlink" title="Git 多用户配置"></a>Git 多用户配置</h2><h3 id="第一步：生成密钥时指定别名"><a href="#第一步：生成密钥时指定别名" class="headerlink" title="第一步：生成密钥时指定别名"></a>第一步：生成密钥时指定别名</h3><blockquote>
<p>通过 <code>ssh-keygen -t rsa -C &quot;这里填秘钥的备注信息&quot;</code> 生成秘钥，如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;这里填秘钥的备注信息&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/zhuo/.ssh/id_rsa): </span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改别名</p>
<p>设置密码和确认密码  如果都不需设置 则直接回车</p>
<p>如果多个平台不想公用一套密钥，则此步需生成多个密钥</p>
</blockquote>
<h3 id="第二步：配置公钥"><a href="#第二步：配置公钥" class="headerlink" title="第二步：配置公钥"></a>第二步：配置公钥</h3><blockquote>
<p>将公钥 <code>id_rsa.pub</code> 中的内容配置到 GitHub/GitLab/Gitee 上，一般为 Setting -&gt; SSH KEY</p>
</blockquote>
<h3 id="第三步：配置-config-文件"><a href="#第三步：配置-config-文件" class="headerlink" title="第三步：配置 config 文件"></a>第三步：配置 config 文件</h3><blockquote>
<p>在 .ssh 目录新建 config 文件,内容如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置 github.com   id_rsa_github 为生成密钥的时候指定的文件名</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\Users\admin\.ssh\id_rsa_github</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User yourname</span><br><span class="line">    </span><br><span class="line"># 配置 gitee.com</span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    IdentityFile C:\Users\admin\.ssh\id_rsa_gitee</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User yourname</span><br></pre></td></tr></table></figure>

<h3 id="第四步：测试连接"><a href="#第四步：测试连接" class="headerlink" title="第四步：测试连接"></a>第四步：测试连接</h3><blockquote>
<p>执行命令 <code>ssh -T git@github.com</code>  测试连接，参考上文</p>
</blockquote>
<p>如果测试连接失败，可删除 known_hosts 文件中的历史记录，重新测试</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 提交记录的图标代码大全</title>
    <url>/2020/06/16/git/gitmoji/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>在 Github 上我们经常看到提交记录里有各种图标，如 🎨⚡️🍎 等，是如何实现的呢?</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>其实非常简单，就是在提交的时候加入以下表情代码即可</p>
</blockquote>
<h5 id="图标-表情代码-表示意义"><a href="#图标-表情代码-表示意义" class="headerlink" title="图标    表情代码   表示意义"></a>图标    表情代码   表示意义</h5><p>🎨 ：<code>:art:</code> 改进代码的结构/格式。<br>⚡️ ：<code>:zap:</code> 提高性能。<br>🔥 ：<code>:fire:</code> 删除代码或文件。<br>🐛 ：<code>:bug:</code> 修复错误。<br>🚑 ：<code>:ambulance:</code> 关键修补程序。<br>✨ ：<code>:sparkles:</code> 引入新功能。<br>📝 ：<code>:pencil:</code> 编写文档。<br>🚀 ：<code>:rocket:</code> 部署东西。<br>💄 ：<code>:lipstick:</code> 添加或更新 UI 和样式文件。<br>🎉 ：<code>:tada:</code> 初始提交。<br>✅ ：<code>:white_check_mark:</code> 添加或更新测试。<br>🔒 ：<code>:lock:</code> 解决安全问题。<br>🍎 ：<code>:apple:</code> 在 macOS 上修复问题。<br>🐧 ：<code>:penguin:</code> 在 Linux 上修复问题。<br>🏁 ：<code>:checkered_flag:</code> 在 Windows 上修复问题。<br>🤖 ：<code>:robot:</code> 在 Android 上修复问题。<br>🍏 ：<code>:green_apple:</code> 在 iOS 上修复问题。<br>🔖 ：<code>:bookmark:</code> 发布/版本标签。<br>🚨 ：<code>:rotating_light:</code> 删除棉绒警告。<br>🚧 ：<code>:construction:</code> 工作正在进行中。<br>💚 ：<code>:green_heart:</code> 修复 CI 构建。<br>⬇️ ：<code>:arrow_down:</code> 降级依赖性。<br>⬆️ ：<code>:arrow_up:</code> 升级依赖关系。<br>📌 ：<code>:pushpin:</code> 将依赖项固定到特定版本。<br>👷 ：<code>:construction_worker:</code> 添加或更新 CI 构建系统。<br>📈 ：<code>:chart_with_upwards_trend:</code> 添加或更新分析或跟踪代码。<br>♻️ ：<code>:recycle:</code> 重构代码。<br>🐳 ：<code>:whale:</code> 关于 Docker 的工作。<br>➕ ：<code>:heavy_plus_sign:</code> 添加依赖项。<br>➖ ：<code>:heavy_minus_sign:</code> 删除依赖项。<br>🔧 ：<code>:wrench:</code> 更改配置文件。<br>🌐 ：<code>:globe_with_meridians:</code> 国际化和本地化。<br>✏️ ：<code>:pencil2:</code> 修正错别字。<br>💩 ：<code>:poop:</code> 编写需要改进的错误代码。<br>⏪ ：<code>:rewind:</code> 还原更改。<br>🔀 ：<code>:twisted_rightwards_arrows:</code> 合并分支机构。<br>📦 ：<code>:package:</code> 添加或更新编译的文件或包。<br>👽 ：<code>:alien:</code> 由于外部 API 的更改而更新了代码。<br>🚚 ：<code>:truck:</code> 移动或重命名文件。<br>📄 ：<code>:page_facing_up:</code> 添加或更新许可证。<br>💥 ：<code>:boom:</code> 介绍重大更改。<br>🍱 ：<code>:bento:</code> 添加或更新资产。<br>👌 ：<code>:ok_hand:</code> 由于代码审查更改而更新代码。<br>♿️ ：<code>:wheelchair:</code> 改善可访问性。<br>💡 ：<code>:bulb:</code> 在源代码中添加或更新注释。<br>🍻 ：<code>:beers:</code> 醉酒地编写代码。<br>💬 ：<code>:speech_balloon:</code> 添加或更新文本和文字。<br>🗃 ：<code>:card_file_box:</code> 执行数据库相关的更改。<br>🔊 ：<code>:loud_sound:</code> 添加或更新日志。<br>🔇 ：<code>:mute:</code> 删除日志。<br>👥 ：<code>:busts_in_silhouette:</code> 添加或更新贡献者。<br>🚸 ：<code>:children_crossing:</code> 改善用户体验/可用性。<br>🏗 ：<code>:building_construction:</code> 进行架构更改。<br>📱 ：<code>:iphone:</code> 致力于响应式设计。<br>🤡 ：<code>:clown_face:</code> 嘲笑的东西。<br>🥚 ：<code>:egg:</code> 添加或更新复活节彩蛋。<br>🙈 ：<code>:see_no_evil:</code> 添加或更新.gitignore 文件。<br>📸 ：<code>:camera_flash:</code> 添加或更新快照。<br>⚗ ：<code>:alembic:</code> 尝试新事物。<br>🔍 ：<code>:mag:</code> 改善 SEO。<br>☸️ ：<code>:wheel_of_dharma:</code> 关于 Kubernetes 的工作。<br>🏷️ ：<code>:label:</code> 添加或更新类型（Flow，TypeScript）。<br>🌱 ：<code>:seedling:</code> 添加或更新种子文件。<br>🚩 ：<code>:triangular_flag_on_post:</code> 添加，更新或删除功能标志。<br>🥅 ：<code>:goal_net:</code> 捕捉错误。<br>💫 ：<code>:dizzy:</code> 添加或更新动画和过渡。<br>🗑 ：<code>:wastebasket:</code> 不赞成使用的代码需要清理。</p>
<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>在提交记录添加 🎉 图标，对应命令：<code>git commit -m &quot;:tada: 这是初始提交&quot;</code></p>
<p>效果： <code>🎉 这是初始提交</code></p>
<h5 id="Gitmoji-链接"><a href="#Gitmoji-链接" class="headerlink" title="Gitmoji 链接 :"></a>Gitmoji 链接 :</h5><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRtb2ppLmNhcmxvc2N1ZXN0YS5tZS8=">https://gitmoji.carloscuesta.me/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
        <category>Original</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟线程：高并发编程的新范式</title>
    <url>/2024/04/15/java/2024-virtual-threads-high-concurrency/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Java虚拟线程：高并发编程的新范式-🚀"><a href="#Java虚拟线程：高并发编程的新范式-🚀" class="headerlink" title="Java虚拟线程：高并发编程的新范式 🚀"></a>Java虚拟线程：高并发编程的新范式 🚀</h1><p>大家好！👋 今天我要和大家分享一个在Java 19中引入的革命性特性——<strong>虚拟线程</strong>（Virtual Threads）。作为一名长期从事高并发系统开发的工程师，我必须说，虚拟线程的出现，正在彻底改变我们处理高并发场景的方式。让我们一起深入探索这个令人兴奋的技术吧！</p>
<h2 id="一、虚拟线程的工作原理与实现机制-🔍"><a href="#一、虚拟线程的工作原理与实现机制-🔍" class="headerlink" title="一、虚拟线程的工作原理与实现机制 🔍"></a>一、虚拟线程的工作原理与实现机制 🔍</h2><h3 id="1-传统线程模型的局限性"><a href="#1-传统线程模型的局限性" class="headerlink" title="1. 传统线程模型的局限性"></a>1. 传统线程模型的局限性</h3><p>在Java中，传统的线程（Platform Thread）是基于操作系统线程实现的，每个Java线程都会映射到一个操作系统线程。这种模型存在几个明显的局限性：</p>
<ul>
<li><strong>资源消耗高</strong>：操作系统线程的创建、调度和销毁都需要较多的系统资源</li>
<li><strong>线程数量受限</strong>：一个系统能同时运行的操作系统线程数量有限</li>
<li><strong>阻塞操作代价大</strong>：线程阻塞会导致底层操作系统线程也被阻塞</li>
</ul>
<h3 id="2-虚拟线程的核心原理"><a href="#2-虚拟线程的核心原理" class="headerlink" title="2. 虚拟线程的核心原理"></a>2. 虚拟线程的核心原理</h3><p>虚拟线程是Java虚拟机（JVM）层面的线程实现，它不需要一对一地映射到操作系统线程。虚拟线程的核心原理包括：</p>
<ul>
<li><strong>M:N调度模型</strong>：多个虚拟线程（M）映射到少量操作系统线程（N）</li>
<li><strong>协作式调度</strong>：虚拟线程在遇到阻塞操作时，会主动让出CPU，而不是阻塞底层操作系统线程</li>
<li><strong>轻量级实现</strong>：虚拟线程的创建和销毁成本极低，内存占用也很小</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 21中的虚拟线程创建示例</span></span><br><span class="line"><span class="keyword">try</span> (<span class="keyword">var</span> executor = Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> taskId = i;</span><br><span class="line">        executor.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Task &quot;</span> + taskId + <span class="string">&quot; running on &quot;</span> + Thread.currentThread());</span><br><span class="line">            <span class="keyword">return</span> taskId;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-虚拟线程的内部实现"><a href="#3-虚拟线程的内部实现" class="headerlink" title="3. 虚拟线程的内部实现"></a>3. 虚拟线程的内部实现</h3><p>虚拟线程的实现依赖于几个关键技术：</p>
<ul>
<li><strong>载体线程（Carrier Thread）</strong>：执行虚拟线程代码的底层操作系统线程</li>
<li><strong>调度器（Scheduler）</strong>：负责将虚拟线程分配给载体线程</li>
<li><strong>Continuation</strong>：用于保存和恢复虚拟线程的执行状态</li>
<li><strong>Fiber</strong>：虚拟线程的底层实现机制</li>
</ul>
<h2 id="二、传统线程池与虚拟线程的性能对比-📊"><a href="#二、传统线程池与虚拟线程的性能对比-📊" class="headerlink" title="二、传统线程池与虚拟线程的性能对比 📊"></a>二、传统线程池与虚拟线程的性能对比 📊</h2><p>为了直观地展示虚拟线程的性能优势，我进行了一系列测试，比较了传统线程池与虚拟线程在不同场景下的表现。</p>
<h3 id="1-线程创建性能测试"><a href="#1-线程创建性能测试" class="headerlink" title="1. 线程创建性能测试"></a>1. 线程创建性能测试</h3><p><strong>测试场景</strong>：创建100,000个线程，每个线程执行一个简单任务</p>
<table>
<thead>
<tr>
<th>线程类型</th>
<th>创建时间(秒)</th>
<th>内存占用(MB)</th>
</tr>
</thead>
<tbody><tr>
<td>传统线程</td>
<td>32.7</td>
<td>895</td>
</tr>
<tr>
<td>虚拟线程</td>
<td>0.8</td>
<td>127</td>
</tr>
</tbody></table>
<h3 id="2-IO密集型任务性能测试"><a href="#2-IO密集型任务性能测试" class="headerlink" title="2. IO密集型任务性能测试"></a>2. IO密集型任务性能测试</h3><p><strong>测试场景</strong>：执行10,000个HTTP请求，每个请求需要100ms响应时间</p>
<table>
<thead>
<tr>
<th>线程类型</th>
<th>完成时间(秒)</th>
<th>CPU使用率(%)</th>
<th>峰值线程数</th>
</tr>
</thead>
<tbody><tr>
<td>线程池(100线程)</td>
<td>10.2</td>
<td>15</td>
<td>100</td>
</tr>
<tr>
<td>虚拟线程</td>
<td>1.8</td>
<td>22</td>
<td>10,000</td>
</tr>
</tbody></table>
<p>从测试结果可以看出，虚拟线程在创建速度上比传统线程快约40倍，内存占用仅为传统线程的14%。在IO密集型任务中，虚拟线程的吞吐量可以提升5-6倍。</p>
<h2 id="三、Spring-Boot项目中集成虚拟线程的最佳实践-🔧"><a href="#三、Spring-Boot项目中集成虚拟线程的最佳实践-🔧" class="headerlink" title="三、Spring Boot项目中集成虚拟线程的最佳实践 🔧"></a>三、Spring Boot项目中集成虚拟线程的最佳实践 🔧</h2><h3 id="1-Spring-Boot-3-2-中的虚拟线程支持"><a href="#1-Spring-Boot-3-2-中的虚拟线程支持" class="headerlink" title="1. Spring Boot 3.2+中的虚拟线程支持"></a>1. Spring Boot 3.2+中的虚拟线程支持</h3><p>Spring Boot 3.2及以上版本提供了对虚拟线程的原生支持，我们可以通过简单的配置启用虚拟线程。</p>
<p><strong>步骤1：升级到Java 21和Spring Boot 3.2+</strong></p>
<p>首先，确保你的项目使用Java 21和Spring Boot 3.2或更高版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>21<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤2：在application.properties中启用虚拟线程</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用虚拟线程支持</span></span><br><span class="line"><span class="meta">spring.threads.virtual.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤3：配置Web服务器使用虚拟线程</strong></p>
<p>如果你使用的是Tomcat、Jetty或Undertow，可以配置它们使用虚拟线程执行请求处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualThreadConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatProtocolHandlerCustomizer&lt;?&gt; protocolHandlerCustomizer() &#123;</span><br><span class="line">        <span class="keyword">return</span> protocolHandler -&gt; &#123;</span><br><span class="line">            protocolHandler.setExecutor(Executors.newVirtualThreadPerTaskExecutor());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-异步方法使用虚拟线程"><a href="#2-异步方法使用虚拟线程" class="headerlink" title="2. 异步方法使用虚拟线程"></a>2. 异步方法使用虚拟线程</h3><p>在Spring Boot中，我们可以使用<code>@Async</code>注解让方法异步执行，并配置它使用虚拟线程池：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;virtualThreadExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">virtualThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async(&quot;virtualThreadExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title">processTask</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行异步任务</span></span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(<span class="string">&quot;Processed: &quot;</span> + input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-数据访问层的虚拟线程优化"><a href="#3-数据访问层的虚拟线程优化" class="headerlink" title="3. 数据访问层的虚拟线程优化"></a>3. 数据访问层的虚拟线程优化</h3><p>在数据访问层，我们可以使用虚拟线程来处理数据库操作，特别是在需要执行大量独立查询的场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProductRepository productRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executor virtualThreadExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span><span class="params">(ProductRepository productRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productRepository = productRepository;</span><br><span class="line">        <span class="keyword">this</span>.virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findProductsByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ids.stream()</span><br><span class="line">            .map(id -&gt; CompletableFuture.supplyAsync(</span><br><span class="line">                () -&gt; productRepository.findById(id).orElse(<span class="keyword">null</span>), </span><br><span class="line">                virtualThreadExecutor</span><br><span class="line">            ))</span><br><span class="line">            .map(CompletableFuture::join)</span><br><span class="line">            .filter(Objects::nonNull)</span><br><span class="line">            .toList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、真实业务场景下的性能调优案例-📈"><a href="#四、真实业务场景下的性能调优案例-📈" class="headerlink" title="四、真实业务场景下的性能调优案例 📈"></a>四、真实业务场景下的性能调优案例 📈</h2><h3 id="1-电商平台订单处理系统优化"><a href="#1-电商平台订单处理系统优化" class="headerlink" title="1. 电商平台订单处理系统优化"></a>1. 电商平台订单处理系统优化</h3><p><strong>背景</strong>：某电商平台的订单处理系统在大促期间经常出现线程池满载的情况，导致响应延迟增加。</p>
<p><strong>优化方案</strong>：将订单处理逻辑迁移到虚拟线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executor virtualThreadExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderController</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">        <span class="keyword">this</span>.virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;OrderResponse&gt; <span class="title">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> OrderRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(</span><br><span class="line">            () -&gt; orderService.processOrder(request),</span><br><span class="line">            virtualThreadExecutor</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化效果</strong>：</p>
<ul>
<li>系统能够处理的并发请求数从5,000提升到50,000+</li>
<li>99%响应时间从500ms降低到120ms</li>
<li>服务器CPU和内存使用率更加平稳</li>
</ul>
<h3 id="2-数据ETL批处理任务优化"><a href="#2-数据ETL批处理任务优化" class="headerlink" title="2. 数据ETL批处理任务优化"></a>2. 数据ETL批处理任务优化</h3><p><strong>背景</strong>：某金融系统的ETL批处理任务需要处理大量数据文件，每个文件都需要进行解析、转换和加载。</p>
<p><strong>优化方案</strong>：使用虚拟线程并行处理多个文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService virtualThreadExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processDataFiles</span><span class="params">(List&lt;Path&gt; filePaths)</span> </span>&#123;</span><br><span class="line">        List&lt;CompletableFuture&lt;Void&gt;&gt; futures = filePaths.stream()</span><br><span class="line">            .map(file -&gt; CompletableFuture.runAsync(</span><br><span class="line">                () -&gt; processSingleFile(file),</span><br><span class="line">                virtualThreadExecutor</span><br><span class="line">            ))</span><br><span class="line">            .toList();</span><br><span class="line">        </span><br><span class="line">        CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[<span class="number">0</span>])).join();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSingleFile</span><span class="params">(Path file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理单个文件的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化效果</strong>：</p>
<ul>
<li>批处理任务的完成时间从4小时缩短到45分钟</li>
<li>资源利用率提高了3倍</li>
<li>系统能够同时处理的文件数量从100增加到10,000</li>
</ul>
<h2 id="五、虚拟线程的适用场景与注意事项-⚠️"><a href="#五、虚拟线程的适用场景与注意事项-⚠️" class="headerlink" title="五、虚拟线程的适用场景与注意事项 ⚠️"></a>五、虚拟线程的适用场景与注意事项 ⚠️</h2><h3 id="1-最适合的场景"><a href="#1-最适合的场景" class="headerlink" title="1. 最适合的场景"></a>1. 最适合的场景</h3><p>虚拟线程特别适合以下场景：</p>
<ul>
<li><strong>IO密集型任务</strong>：如网络请求、文件IO、数据库操作等</li>
<li><strong>大量并发任务</strong>：需要同时处理成千上万个独立任务的场景</li>
<li><strong>阻塞操作频繁的应用</strong>：包含大量等待操作的系统</li>
</ul>
<h3 id="2-不适合的场景"><a href="#2-不适合的场景" class="headerlink" title="2. 不适合的场景"></a>2. 不适合的场景</h3><p>虚拟线程在以下场景中优势不明显，甚至可能带来性能下降：</p>
<ul>
<li><strong>CPU密集型计算</strong>：长时间占用CPU的计算任务</li>
<li><strong>需要精确控制线程数量的场景</strong>：如对系统资源有严格限制的环境</li>
<li><strong>依赖线程本地存储（ThreadLocal）的代码</strong>：虚拟线程的ThreadLocal使用需要特别注意</li>
</ul>
<h3 id="3-开发注意事项"><a href="#3-开发注意事项" class="headerlink" title="3. 开发注意事项"></a>3. 开发注意事项</h3><p>在使用虚拟线程时，需要注意以下几点：</p>
<ul>
<li><strong>避免线程阻塞操作</strong>：尽量使用非阻塞IO和异步API</li>
<li><strong>谨慎使用ThreadLocal</strong>：虚拟线程数量多，可能导致内存泄漏</li>
<li><strong>调整超时设置</strong>：虚拟线程数量多，超时时间可能需要调整</li>
<li><strong>监控与诊断</strong>：使用JDK 21的新工具监控虚拟线程</li>
</ul>
<h2 id="六、总结与展望-🔮"><a href="#六、总结与展望-🔮" class="headerlink" title="六、总结与展望 🔮"></a>六、总结与展望 🔮</h2><p>Java虚拟线程的出现，标志着Java在高并发编程领域的一次重大突破。它通过M:N调度模型，极大地提高了系统的并发处理能力，同时降低了资源消耗。在Spring Boot 3.2+的支持下，我们可以很方便地在现有项目中集成虚拟线程，获得性能的显著提升。</p>
<p>随着Java 21成为长期支持版本，虚拟线程将在越来越多的生产环境中得到应用。作为开发者，我们应该积极学习和掌握这一新技术，为构建更高效、更可靠的系统做好准备。</p>
<p>最后，我想说：<strong>虚拟线程不是银弹，但它确实为高并发编程提供了一种全新的范式</strong>。让我们一起拥抱这个变革，创造更好的Java应用！</p>
<p>欢迎在评论区分享你使用虚拟线程的经验和想法！😊</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>性能优化</tag>
        <tag>虚拟线程</tag>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>@PostConstruct 与 @PreDestroy 注解</title>
    <url>/2021/01/05/java/annotation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>从 Java EE 5 规范开始，Servlet 中增加了两个影响 Servlet 生命周期的注解（Annotion）；@PostConstruct 和@PreDestroy。这两个注解被用来修饰一个非静态的 void() 方法 。写法有如下两种方式：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@PostConstruct</span> <span class="function"><span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>被@PostConstruct 修饰的方法会在服务器加载 Servle 的时候运行，并且只会被服务器执行一次。PostConstruct 在构造函数之后执行,init() 方法之前执行。PreDestroy（）方法在 destroy() 方法执行执行之后执行</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>注解</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Predicate 用法详解</title>
    <url>/2021/01/04/java/base-Predicate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文使用简单的例子来说明 Predicate 的用法。</p>
<p>本文示例使用 Stream Api :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="使用-Predicate-来过滤-list"><a href="#使用-Predicate-来过滤-list" class="headerlink" title="使用 Predicate 来过滤 list :"></a>使用 Predicate 来过滤 list :</h2><p>例如我们有个数据 List 如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;James&quot;</span>, <span class="string">&quot;Dwight Howard&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="单条件过滤："><a href="#单条件过滤：" class="headerlink" title="单条件过滤："></a>单条件过滤：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFilter</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = names.stream()</span><br><span class="line">                <span class="comment">// 此处实际使用 Predicate</span></span><br><span class="line">                .filter(name -&gt; name.startsWith(<span class="string">&quot;J&quot;</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;listFilter startsWith J :&quot;</span> + result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="多条件过滤："><a href="#多条件过滤：" class="headerlink" title="多条件过滤："></a>多条件过滤：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listMultiFilter</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = names.stream()</span><br><span class="line">                <span class="comment">// 此处实际使用 Predicate</span></span><br><span class="line">                .filter(name -&gt; name.startsWith(<span class="string">&quot;J&quot;</span>))</span><br><span class="line">                .filter(name -&gt; name.contains(<span class="string">&quot;c&quot;</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;listMultiFilter 1 startsWith J and contains c :&quot;</span> + result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; result = names.stream()</span><br><span class="line">  <span class="comment">// 此处实际使用 Predicate</span></span><br><span class="line">  .filter(name -&gt; name.startsWith(<span class="string">&quot;J&quot;</span>) &amp;&amp; name.contains(<span class="string">&quot;c&quot;</span>))</span><br><span class="line">  .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="组合使用-Predicate："><a href="#组合使用-Predicate：" class="headerlink" title="组合使用 Predicate："></a><strong>组合使用</strong> Predicate：</h3><h4 id="Predicate-and-两个条件都需要满足"><a href="#Predicate-and-两个条件都需要满足" class="headerlink" title="Predicate.and() 两个条件都需要满足"></a>Predicate.and() 两个条件都需要满足</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFilterPredicateAnd</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate1 = str -&gt; str.contains(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    Predicate&lt;String&gt; predicate2 =  str -&gt; str.length() &gt; <span class="number">5</span>;</span><br><span class="line">    List&lt;String&gt; result = names.stream()</span><br><span class="line">            .filter(predicate1.and(predicate2))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;listFilterPredicateAnd contains a and length &gt; 5 :&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Predicate-or-两个条件满足其中一个"><a href="#Predicate-or-两个条件满足其中一个" class="headerlink" title="Predicate.or() 两个条件满足其中一个"></a>Predicate.or() 两个条件满足其中一个</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">private static void listFilterPredicateOr(List&lt;String&gt; names) &#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate1 = str -&gt; str.contains(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    Predicate&lt;String&gt; predicate2 =  str -&gt; str.length() &gt; 5;</span><br><span class="line">    List&lt;String&gt; result = names.stream()</span><br><span class="line">            .filter(predicate1.or(predicate2))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;listFilterPredicateOr contains a or length &gt; 5 :&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Predicate-negate-对条件取反"><a href="#Predicate-negate-对条件取反" class="headerlink" title="Predicate.negate() 对条件取反"></a>Predicate.negate() 对条件取反</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFilterPredicateNegate</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate1 = str -&gt; str.contains(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    List&lt;String&gt; result = names.stream()</span><br><span class="line">            .filter(predicate1.negate())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;listFilterPredicateNegate Does not contains a :&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用-main-方法分别执行以上方法"><a href="#用-main-方法分别执行以上方法" class="headerlink" title="用 main 方法分别执行以上方法"></a>用 main 方法分别执行以上方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;James&quot;</span>, <span class="string">&quot;Dwight Howard&quot;</span>);</span><br><span class="line">    listFilter(names);</span><br><span class="line">    listMultiFilter(names);</span><br><span class="line">    listFilterPredicateAnd(names);</span><br><span class="line">    listFilterPredicateOr(names);</span><br><span class="line">    listFilterPredicateNegate(names);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listFilter startsWith J :[Jack, James]</span><br><span class="line">listMultiFilter <span class="number">1</span> startsWith J and contains c :[Jack]</span><br><span class="line">listMultiFilter <span class="number">2</span> startsWith J and contains c :[Jack]</span><br><span class="line">listFilterPredicateAnd contains a and length &gt; <span class="number">5</span> :[Dwight Howard]</span><br><span class="line">listFilterPredicateOr contains a or length &gt; <span class="number">5</span> :[Jack, James, Dwight Howard]</span><br><span class="line">listFilterPredicateNegate Does not contains a :[Tom]</span><br></pre></td></tr></table></figure>

<p>本文代码完整示例地址： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9qYXZhLXNhbXBsZXMvYmxvYi9tYXN0ZXIvYmFzaWMtc2FtcGxlcy9zcmMvbWFpbi9qYXZhL2NvbS9naXRodWIvemh1by9zYW1wbGVzL1ByZWRpY2F0ZVNhbXBsZS5qYXZh">Github<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>原码反码补码与位运算</title>
    <url>/2021/01/09/java/bit-operation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul>
<li><p>按位与（&amp;）  都1则1</p>
<ul>
<li>对两个数进行操作，然后返回一个新的数，这个数的每个位都需要两个输入数的同一位都为1时才为1</li>
</ul>
</li>
<li><p>按位或（|）  有1则1</p>
<ul>
<li>比较两个数，然后返回一个新的数，这个数的每一位设置1的条件是两个输入数的同一位都不为0(即任意一个为1，或都为1)</li>
</ul>
</li>
<li><p>按位异或（^）  不同为1 相同为0 两数异或 可看作是两数没有进位的加法</p>
<ul>
<li>比较两个数，然后返回一个数，这个数的每个位设为1的条件是两个输入数的同一位不同，如果相同就设为0</li>
<li>异或运算最重要的性质，就是 0 和任何一个数字（y）异或的结果，都是这个数字本身。即：0 ^ y = y</li>
<li>异或满足交换律 x ^ y = y ^ x</li>
<li>两个相同的数字做异或, 结果为 0</li>
<li>取最低位的1  n &amp; -n</li>
<li>将最低位的1移除 n &amp; (n-1)</li>
</ul>
</li>
</ul>
<span id="more"></span>

<ul>
<li>按位取反（~）<ul>
<li>对一个操作数的每一位都取反</li>
</ul>
</li>
<li>按位左移（&lt;&lt;）<ul>
<li>将操作数的所有位向左移动指定的位数。</li>
</ul>
</li>
<li>按位右移（&gt;&gt;）<ul>
<li>将操作数的所有位向又移动指定的位数。</li>
</ul>
</li>
</ul>
<h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p>原码转换为反码：符号位不变，数值位分别“按位取反” </p>
<p>反码转换为原码也是一样：符号位不变，数值位分别“按位取反” </p>
<p>原码转换为补码：符号位不变，数值位按位取反,末位再加1</p>
<p>补码转换为原码：符号位不变，数值位按位取反,末位再加1。</p>
<p>即补码的补码等于原码</p>
<p>求补(变补)，即已知[X]补，求[-X]补 。</p>
<p>符号位和数值位都取反，末位再加1</p>
<p>负数部分：</p>
<p>原码和反码的相互转换：符号位不变，数值位按位取反</p>
<p>原码和补码的相互转换：符号位不变，数值位按位取反,末位再加1</p>
<p>已知补码，求原码的负数的补码：符号位和数值位都取反，末位再加1</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Cron 表达式</title>
    <url>/2021/01/05/java/cron/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天把以前记录的 Cron 表达式的笔记整理为博客。</p>
<h2 id="Cron-表达式-由七个字段组成："><a href="#Cron-表达式-由七个字段组成：" class="headerlink" title="Cron 表达式,由七个字段组成："></a>Cron 表达式,由七个字段组成：</h2><ul>
<li>Seconds</li>
<li>Minutes</li>
<li>Hours</li>
<li>Day-of-Month</li>
<li>Month</li>
<li>Day-of-Week</li>
<li>Year (Optional field)</li>
</ul>
<span id="more"></span>

<h3 id="举例如下："><a href="#举例如下：" class="headerlink" title="举例如下："></a>举例如下：</h3><p>创建一个每三小时执行的 CronTrigger,且从每小时的整点开始执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 0 0/3  * * ?</span><br></pre></td></tr></table></figure>

<p>创建一个每十分钟执行的 CronTrigger,且从每小时的第三分钟开始执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 3/10 * * * ?</span><br></pre></td></tr></table></figure>

<p>创建一个每周一,周二,周三,周六的晚上 20:00 到 23:00,每半小时执行一次的 CronTrigger：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 0/30 20-23 ? * MON-WED,SAT</span><br></pre></td></tr></table></figure>

<p>创建一个每月最后一个周四,中午 11:30-14:30,每小时执行一次的 trigger：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 30 11-14/1 ? * 5L</span><br></pre></td></tr></table></figure>

<p>解释一下上述例子中各符号的含义：</p>
<p>首先所有字段都有自己特定的取值,例如:</p>
<ul>
<li>Seconds 和 Minutes 取值为 0 到 59,</li>
<li>Hours 取值为 0 到 23,</li>
<li>Day-of-Month 取值为 0-31, </li>
<li>Month 取值为 0-11,或者 JAN,FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC.</li>
<li>Days-of-Week 取值为 1-7 或者 SUN, MON, TUE, WED, THU, FRI, SAT.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">每个字段可以取单个值,多个值,或一个范围,</span><br><span class="line">	例如 Day-of-Week 可取值为“MON,TUE,SAT”,“MON-FRI”或者“TUE-THU,SUN”。</span><br><span class="line"></span><br><span class="line">通配符 * 表示该字段可接受任何可能取值。</span><br><span class="line">	例如 Month 字段赋值 * 表示每个月,Day-of-Week 字段赋值 * 表示一周的每天。</span><br><span class="line"></span><br><span class="line">/ 表示开始时刻与间隔时段。</span><br><span class="line">	例如 Minutes 字段赋值 2/10 表示在一个小时内每 10 分钟执行一次,从第 2 分钟开始。</span><br><span class="line"></span><br><span class="line">? 仅适用于 Day-of-Month 和 Day-of-Week。? 表示对该字段不指定特定值。</span><br><span class="line">	适用于需要对这两个字段中的其中一个指定值,而对另一个不指定值的情况。</span><br><span class="line">	一般情况下,这两个字段只需对一个赋值。</span><br><span class="line"></span><br><span class="line">L 仅适用于 Day-of-Month 和 Day-of-Week。</span><br><span class="line">	L 用于 Day-of-Month 表示该月最后一天。</span><br><span class="line">	L 单独用于 Day-of-Week 表示周六,否则表示一个月最后一个星期几,</span><br><span class="line">		例如 5L 或者 THUL 表示该月最后一个星期四。</span><br><span class="line"></span><br><span class="line">W 仅适用于 Day-of-Month,表示离指定日期最近的一个工作日,</span><br><span class="line">例如 Day-of-Month 赋值为 10W 表示该月离 10 号最近的一个工作日。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅适用于 Day-of-Week,表示该月第 XXX 个星期几。例如 Day-of-Week 赋值为 5#2 或者 THU#2,表示该月第二个星期四。</span></span><br></pre></td></tr></table></figure>


<h2 id="Cron-表达式范例："><a href="#Cron-表达式范例：" class="headerlink" title="Cron 表达式范例："></a>Cron 表达式范例：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">每隔5秒执行一次：*/5 * * * * ?</span><br><span class="line"></span><br><span class="line">每隔1分钟执行一次：0 */1 * * * ?</span><br><span class="line"></span><br><span class="line">每天23点执行一次：0 0 23 * * ?</span><br><span class="line"></span><br><span class="line">每天凌晨1点执行一次：0 0 1 * * ?</span><br><span class="line"></span><br><span class="line">每月1号凌晨1点执行一次：0 0 1 1 * ?</span><br><span class="line"></span><br><span class="line">每月最后一天23点执行一次：0 0 23 L * ?</span><br><span class="line"></span><br><span class="line">每周星期天凌晨1点实行一次：0 0 1 ? * L</span><br><span class="line"></span><br><span class="line">在26分、29分、33分执行一次：0 26,29,33 * * * ?</span><br><span class="line"></span><br><span class="line">每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Freemarker 常用命令整理</title>
    <url>/2020/07/26/java/freemarker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Freemarker-操作字符串"><a href="#Freemarker-操作字符串" class="headerlink" title="Freemarker 操作字符串"></a>Freemarker 操作字符串</h2><h3 id="substring（start-end）从一个字符串中截取子串。"><a href="#substring（start-end）从一个字符串中截取子串。" class="headerlink" title="substring（start,end）从一个字符串中截取子串。"></a>substring（start,end）从一个字符串中截取子串。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start:截取子串开始的索引，start 必须大于等于 0，小于等于 end</span><br><span class="line">end: 截取子串的长度，end 必须大于等于 0，小于等于字符串长度，如果省略该参数，默认为字符串长度。</span><br><span class="line">例子：</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(0)&#125; 结果为 str</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(1)&#125; 结果为 tr</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(2)&#125; 结果为 r</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(3)&#125; 结果为</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(0,0)&#125; 结果为</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(0,1)&#125; 结果为 s</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(0,2)&#125; 结果为 st</span><br><span class="line">$&#123;&#x27;str&#x27;?substring(0,3)&#125; 结果为 str</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="cap-first-将字符串中的第一个单词的首字母变为大写。"><a href="#cap-first-将字符串中的第一个单词的首字母变为大写。" class="headerlink" title="cap_first 将字符串中的第一个单词的首字母变为大写。"></a>cap_first 将字符串中的第一个单词的首字母变为大写。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&#x27;str&#x27;?cap_first&#125; 结果为 Str</span><br></pre></td></tr></table></figure>
<h3 id="uncap-first-将字符串中的第一个单词的首字母变为小写。"><a href="#uncap-first-将字符串中的第一个单词的首字母变为小写。" class="headerlink" title="uncap_first 将字符串中的第一个单词的首字母变为小写。"></a>uncap_first 将字符串中的第一个单词的首字母变为小写。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&#x27;Str&#x27;?uncap_first&#125; 结果为 str</span><br></pre></td></tr></table></figure>
<h3 id="capitalize-将字符串中的所有单词的首字母变为大写。"><a href="#capitalize-将字符串中的所有单词的首字母变为大写。" class="headerlink" title="capitalize 将字符串中的所有单词的首字母变为大写。"></a>capitalize 将字符串中的所有单词的首字母变为大写。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&#x27;str&#x27;?capitalize&#125; 结果为 STR</span><br></pre></td></tr></table></figure>

<h3 id="date-time，datetime-将字符串转换为日期。"><a href="#date-time，datetime-将字符串转换为日期。" class="headerlink" title="date,time，datetime 将字符串转换为日期。"></a>date,time，datetime 将字符串转换为日期。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">&lt;#assign date1=&quot;2009-10-12&quot;?date(&quot;yyyy-MM-dd&quot;)&gt;</span><br><span class="line">&lt;#assign date2=&quot;9:28:20&quot;?time(&quot;HH:mm:ss&quot;)&gt;</span><br><span class="line">&lt;#assign date3=&quot; 2009-10-12 9:28:20&quot;?time(&quot;HH:mm:ss&quot;)&gt;</span><br><span class="line">$&#123;date1&#125; 结果为 2009-10-12</span><br><span class="line">$&#123;date2&#125; 结果为 9:28:20</span><br><span class="line">$&#123;date3&#125; 结果为 2009-10-12 9:28:20</span><br><span class="line">注意：如果指定的字符串格式不正确将引发错误。</span><br></pre></td></tr></table></figure>

<h3 id="ends-with-判断某个字符串是否由某个子串结尾，返回布尔值。"><a href="#ends-with-判断某个字符串是否由某个子串结尾，返回布尔值。" class="headerlink" title="ends_with 判断某个字符串是否由某个子串结尾，返回布尔值。"></a>ends_with 判断某个字符串是否由某个子串结尾，返回布尔值。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;string&quot;?ends_with(&quot;ing&quot;)?string&#125; 返回结果为 true</span><br><span class="line">注意：布尔值必须转换为字符串才能输出</span><br></pre></td></tr></table></figure>

<h3 id="html-用于将字符串中的-lt-、-gt-、-amp-和”替换为对应字符。"><a href="#html-用于将字符串中的-lt-、-gt-、-amp-和”替换为对应字符。" class="headerlink" title="html 用于将字符串中的 &lt;、&gt;、 &amp;和”替换为对应字符。"></a>html 用于将字符串中的 &lt;、&gt;、 &amp;和”替换为对应字符。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;lt;&amp;gt;&amp;quot:&amp;amp</span><br></pre></td></tr></table></figure>

<h3 id="index-of（substring-start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。"><a href="#index-of（substring-start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。" class="headerlink" title="index_of（substring,start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。"></a>index_of（substring,start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start 参数用于指定从字符串的那个索引处开始搜索，start 为数字值。</span><br><span class="line">如果 start 大于字符串长度，则 start 取值等于字符串长度，如果 start 小于 0， 则 start 取值为 0。</span><br><span class="line">$&#123;&quot;string&quot;?index_of(&quot;in&quot;)  结果为 3</span><br><span class="line">$&#123;&quot;string&quot;?index_of(&quot;ab&quot;)  结果为-1</span><br></pre></td></tr></table></figure>

<h3 id="length-返回字符串的长度-。"><a href="#length-返回字符串的长度-。" class="headerlink" title="length 返回字符串的长度 。"></a>length 返回字符串的长度 。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;string&quot;?length&#125; 结果为 6</span><br></pre></td></tr></table></figure>

<h3 id="lower-case-将字符串转为小写。"><a href="#lower-case-将字符串转为小写。" class="headerlink" title="lower_case 将字符串转为小写。"></a>lower_case 将字符串转为小写。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;STRING&quot;?lower_case&#125; 结果为 string</span><br></pre></td></tr></table></figure>

<h3 id="upper-case-将字符串转为大写。"><a href="#upper-case-将字符串转为大写。" class="headerlink" title="upper_case 将字符串转为大写。"></a>upper_case 将字符串转为大写。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;string&quot;?upper_case&#125; 结果为 STRING</span><br></pre></td></tr></table></figure>

<h3 id="contains-判断字符中是否包含某个子串。返回布尔值。"><a href="#contains-判断字符中是否包含某个子串。返回布尔值。" class="headerlink" title="contains 判断字符中是否包含某个子串。返回布尔值。"></a>contains 判断字符中是否包含某个子串。返回布尔值。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;string&quot;?contains(&quot;ing&quot;)?string&#125;  结果为 true</span><br><span class="line">注意：布尔值必须转换为字符串才能输出</span><br></pre></td></tr></table></figure>

<h3 id="number-将字符串转换为数字。"><a href="#number-将字符串转换为数字。" class="headerlink" title="number 将字符串转换为数字。"></a>number 将字符串转换为数字。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;111.11&quot;?number&#125; 结果为 111.11</span><br></pre></td></tr></table></figure>

<h3 id="replace-用于将字符串中的一部分从左到右替换为另外的字符串。"><a href="#replace-用于将字符串中的一部分从左到右替换为另外的字符串。" class="headerlink" title="replace 用于将字符串中的一部分从左到右替换为另外的字符串。"></a>replace 用于将字符串中的一部分从左到右替换为另外的字符串。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;strabg&quot;?replace(&quot;ab&quot;,&quot;in&quot;)&#125;  结果为 string</span><br></pre></td></tr></table></figure>

<h3 id="split-使用指定的分隔符将一个字符串拆分为一组字符串。"><a href="#split-使用指定的分隔符将一个字符串拆分为一组字符串。" class="headerlink" title="split 使用指定的分隔符将一个字符串拆分为一组字符串。"></a>split 使用指定的分隔符将一个字符串拆分为一组字符串。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#list &quot;This|is|split&quot;?split(&quot;|&quot;) as s&gt;</span><br><span class="line">$&#123;s&#125;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line">结果为:</span><br><span class="line">This</span><br><span class="line">is</span><br><span class="line">split</span><br></pre></td></tr></table></figure>

<h3 id="trim-删除字符串首尾空格。"><a href="#trim-删除字符串首尾空格。" class="headerlink" title="trim 删除字符串首尾空格。"></a>trim 删除字符串首尾空格。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;&quot; String &quot;?trim&#125;  结果为 String</span><br></pre></td></tr></table></figure>

<h3 id="if-else-分支。"><a href="#if-else-分支。" class="headerlink" title="if else 分支。"></a>if else 分支。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#if x == 1&gt;</span><br><span class="line">  x is 1</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">  x is not 1</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">&lt;#if x == 1&gt;</span><br><span class="line">  x is 1</span><br><span class="line">&lt;#elseif x == 2&gt;</span><br><span class="line">  x is 2</span><br><span class="line">&lt;#elseif x == 3&gt;</span><br><span class="line">  x is 3</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure>

<h3 id="lt-if-colm-gt-判断字符串不为空或空串。"><a href="#lt-if-colm-gt-判断字符串不为空或空串。" class="headerlink" title="&lt;#if colm??&gt; 判断字符串不为空或空串。"></a>&lt;#if colm??&gt; 判断字符串不为空或空串。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#if colm??&gt;&lt;/#if&gt; 判断字符串不为 null</span><br><span class="line">&lt;#if letVo.manageScore!=&quot;&quot;&gt;&lt;/#if&gt; 判断字符串不为空串</span><br><span class="line">&lt;#if letVo.manageScore??  &amp;&amp; letVo.manageScore != &quot;&quot;&gt; </span><br><span class="line"> letVo.manageScore 存在,并且不是空串,输出</span><br><span class="line">&lt;#else&gt;</span><br><span class="line"> 否则输出</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure>

<h3 id="freemarker-中对-null-值问题的处理"><a href="#freemarker-中对-null-值问题的处理" class="headerlink" title="freemarker 中对 null 值问题的处理"></a>freemarker 中对 null 值问题的处理</h3><p>freemarker 不支持 null，如果值为 null 会报错。可使用如下方法处理：</p>
<ul>
<li>${name!} 在属性后面加感叹号即可过滤null和空字符串</li>
<li>${age!’0’} 如果 age 为 null，默认给’0’</li>
<li>${tableInfo.tableComment!’${tableInfo.tableName}’}  如果 tableInfo.tableComment 为 null，默认给 tableInfo.tableName</li>
</ul>
<h2 id="循环-List"><a href="#循环-List" class="headerlink" title="循环 List"></a>循环 List</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#list tableInfo.columnLists as colm&gt;</span><br><span class="line">	private $&#123;colm.javaDataType&#125; $&#123;colm.javaColumnName&#125;;</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>

<h2 id="include-引入模板"><a href="#include-引入模板" class="headerlink" title="include 引入模板"></a>include 引入模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#include &quot;common.ftl&quot;/&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Freemarker</category>
      </categories>
      <tags>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title>好的代码应如何分层?</title>
    <url>/2020/07/18/java/how-should-the-code-be-layered/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在项目的开发中，代码分层经常简单划分为 <code>Controller</code>、<code>Service</code>、<code>Mapper</code>三层，但是并没有把职责边界划分清晰。经常会出现以下情况：</p>
<ul>
<li><code>Controller</code> 层出现业务逻辑。</li>
<li><code>Service</code> 层大而笨重，甚至有可能在 <code>Service</code> 层出现 <code>Mapper</code> 层应关心的 <code>Sql</code> 拼接等问题。</li>
</ul>
<p>这样往往造成代码无法复用，并且各分层的职责边界不清晰，后续代码维护起来会非常麻烦。</p>
<p>在真正的团队开发中，每个人的习惯、代码风格都不同，写出来的代码必然带着自己的标签，后续其他人维护的时候，是按着自己的习惯修改还是遵循编码者的风格，又是个艰难的选择，如果都随心所欲，长久以此势必造成代码晦涩难懂，难以维护。</p>
<span id="more"></span>

<p>所以一个好的应用分层需要具备以下几点: </p>
<ul>
<li>方便后续代码进行维护扩展；</li>
<li>分层的效果需要让整个团队都接受；</li>
<li>各个层职责边界清晰。</li>
</ul>
<h2 id="如何分层"><a href="#如何分层" class="headerlink" title="如何分层"></a>如何分层</h2><p>从我们的业务开发中总结了一个较为理想的模型,如下图:</p>
<p><img data-src="/assets/picture/how-should-the-code-be-layered/layer-5080451.png" alt="layer"></p>
<p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：<code>Controller</code>层可以依赖于 <code>Service</code> 层，也可以直接依赖于 <code>Domain</code> 层，依此类推。</p>
<ul>
<li><code>Controller</code> ：最上层 <code>Controller</code> 是分层模型的第一层：<strong>轻业务逻辑，参数校验，异常兜底</strong>。</li>
<li><code>Service</code> ：业务层，复用性较低，这里推荐每一个 <code>Controller</code> 方法都得对应一个 <code>Service</code>，不要把业务逻辑放在 <code>Controller</code> 中去做。</li>
<li><code>Domain</code> ：通用业务处理层（可复用逻辑层）。<ul>
<li>这里的 <code>Domain</code> 可以是单个服务的，比如 <code>RedisDomain</code>、字典 <code>DictDomain</code>、短信发送 <code>SmsDomain</code>；也可以是复合的，比如逻辑上的连表查询等。</li>
<li>它有如下特征：<ul>
<li> 1） 对第三方平台封装的层，预处理返回结果及转化异常信息；</li>
<li> 2） 对 <code>Service</code> 层通用能力的下沉，如缓存方案、中间件通用处理；</li>
<li> 3） 与 <code>Repository</code> 层交互，对多个 <code>Repository</code> 的组合复用。</li>
</ul>
</li>
</ul>
</li>
<li><code>Repository</code> ：数据访问层，与底层数据源进行交互。</li>
<li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>
</ul>
<h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><ul>
<li>VO（View Object）：显示层对象，通常是 <code>Web</code> 向模板渲染引擎层传输的对象。</li>
<li>DTO（Data Transfer Object）：数据传输对象，<code>Service</code> 或 <code>Domain</code> 向外传输的对象。 </li>
<li>DO（Data Object）：与数据库表结构一一对应，通过 <code>Repository</code> 层向上传输数据源对象。 </li>
</ul>
<table>
<thead>
<tr>
<th>分层</th>
<th>领域模型</th>
</tr>
</thead>
<tbody><tr>
<td>Controller</td>
<td>VO</td>
</tr>
<tr>
<td>Service/Domain</td>
<td>VO/DTO/DO</td>
</tr>
<tr>
<td>Repository</td>
<td>DO</td>
</tr>
</tbody></table>
<p>各分层操作自己分层对应的领域模型，不允许该分层的领域模型出现在其他的分层中，不然就会使职责边界不清晰。</p>
<p>禁止使用 <strong>Map</strong> 来传输参数。</p>
<p>这里摘取他人的回答：</p>
<blockquote>
<p>1、Map 参数数量大时不易维护。要通过识别字符串形式的 key，可能哪个字母没加程序就出错了。<br>2、Map 转成实体，耗费资源。或者不转实体，直接将 Map 传到 sql 层，但要判断空值（传没传这个参数？），参数数量一多要加一堆判断（sql 效率下降，也不易维护）<br>3、创建 Map 再 put 进参数值，比创建一个实体类的时间要长（Map 数量少时创建的时间差距很小，但是数量较大时差距会非常大）<br>4、参数类型的控制。sql 中不是字符串类型的参数还要转成数值。<br>5、不利于他人共同开发和后期维护。<br>6、Map.put(key,value) 乱传的问题不能在编译阶段发现，用 Javabean 可以精确定义参数类型和限制</p>
<p>Map 的优点：<br>1、灵活性强于 Javabean，易扩展，耦合度低。<br>2、写起来简单，代码量少。</p>
</blockquote>
<p>看一看 Javabean 的优点：</p>
<blockquote>
<p>1、面向对象的良好诠释。<br>2、数据结构清晰，便于团队开发 &amp; 后期维护。<br>3、代码足够健壮，可以排除掉编译期错误。</p>
</blockquote>
<p>权衡利弊，如果团队开发还是 Javabean 比较好。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个好的分层会使代码的职责边界更加清晰，后续更容易扩展维护，以及更容易复用。</p>
<p>其实分层也需要根据不同的项目来具体分析，并没有一个标准的准则，一个好的分层只要能使代码职责清晰，便于扩展维护，就是一个好的分层。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>规范</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>咱们从头到尾说一次 Java 垃圾回收</title>
    <url>/2019/07/11/java/java-gc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="/assets/picture/java-gc/1562835150704.png" alt="1562835150704"></p>
<p>之前上学的时候有这个一个梗，说在食堂里吃饭，吃完把餐盘端走清理的，是 C++ 程序员，吃完直接就走的，是 Java 程序员。</p>
<p>确实，在 Java 的世界里，似乎我们不用对垃圾回收那么的专注，很多初学者不懂 GC，也依然能写出一个能用甚至还不错的程序或系统。但其实这并不代表 Java 的 GC 就不重要。相反，它是那么的重要和复杂，以至于出了问题，那些初学者除了打开 GC 日志，看着一堆 0101 的天文，啥也做不了。</p>
<p>今天我们就从头到尾完整地聊一聊 Java 的垃圾回收。</p>
<span id="more"></span>

<h2 id="什么是垃圾回收"><a href="#什么是垃圾回收" class="headerlink" title="什么是垃圾回收"></a><strong>什么是垃圾回收</strong></h2><p>垃圾回收（Garbage Collection，GC），顾名思义就是释放垃圾占用的空间，防止内存泄露。有效的使用可以使用的内存，对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收。</p>
<p>Java 语言出来之前，大家都在拼命的写 C 或者 C++ 的程序，而此时存在一个很大的矛盾，C++ 等语言创建对象要不断的去开辟空间，不用的时候又需要不断的去释放控件，既要写构造函数，又要写析构函数，很多时候都在重复的 allocated，然后不停的析构。于是，有人就提出，能不能写一段程序实现这块功能，每次创建，释放控件的时候复用这段代码，而无需重复的书写呢？</p>
<p>1960年，基于 MIT 的 Lisp 首先提出了垃圾回收的概念，用于处理C语言等不停的析构操作，而这时 Java 还没有出世呢！<strong>所以实际上 GC 并不是Java的专利，GC 的历史远远大于 Java 的历史！</strong></p>
<h2 id="怎么定义垃圾"><a href="#怎么定义垃圾" class="headerlink" title="怎么定义垃圾"></a><strong>怎么定义垃圾</strong></h2><p>既然我们要做垃圾回收，首先我们得搞清楚垃圾的定义是什么，哪些内存是需要回收的。</p>
<h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a><strong>引用计数算法</strong></h3><p>引用计数算法（Reachability Counting）是通过在对象头中分配一个空间来保存该对象被引用的次数（Reference Count）。如果该对象被其它对象引用，则它的引用计数加1，如果删除对该对象的引用，那么它的引用计数就减1，当该对象的引用计数为0时，那么该对象就会被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String m = <span class="keyword">new</span> String(<span class="string">&quot;jack&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>先创建一个字符串，这时候 <code>&quot;jack&quot;</code> 有一个引用，就是 m。<br><img data-src="/assets/picture/java-gc/1562835335078.png" alt="1562835335078"></p>
<p>然后将 m 设置为 null，这时候 <code>&quot;jack&quot;</code> 的引用次数就等于0了，在引用计数算法中，意味着这块内容就需要被回收了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">m = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/picture/java-gc/1562835347155.png" alt="1562835347155"></p>
<p>引用计数算法是将垃圾回收分摊到整个应用程序的运行当中了，而不是在进行垃圾收集时，要挂起整个应用的运行，直到对堆中所有对象的处理都结束。因此，采用引用计数的垃圾收集不属于严格意义上的<code>Stop-The-World</code>的垃圾收集机制。</p>
<p>看似很美好，但我们知道 <code>JVM</code> 的垃圾回收就是 <code>Stop-The-World</code> 的，那是什么原因导致我们最终放弃了引用计数算法呢？看下面的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReferenceCountingGC</span><span class="params">(String name)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ReferenceCountingGC a = <span class="keyword">new</span> ReferenceCountingGC(<span class="string">&quot;objA&quot;</span>);</span><br><span class="line">    ReferenceCountingGC b = <span class="keyword">new</span> ReferenceCountingGC(<span class="string">&quot;objB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a.instance = b;</span><br><span class="line">    b.instance = a;</span><br><span class="line"></span><br><span class="line">    a = <span class="keyword">null</span>;</span><br><span class="line">    b = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>定义2个对象</li>
<li>相互引用</li>
<li>置空各自的声明引用</li>
</ol>
</blockquote>
<p><img data-src="/assets/picture/java-gc/1562835285237.png" alt="1562835285237"></p>
<p>我们可以看到，最后这2个对象已经不可能再被访问了，但由于他们相互引用着对方，导致它们的引用计数永远都不会为0，通过引用计数算法，也就永远无法通知 GC 收集器回收它们。</p>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a><strong>可达性分析算法</strong></h3><p>可达性分析算法（Reachability Analysis）的基本思路是，通过一些被称为引用链（GC Roots）的对象作为起点，从这些节点开始向下搜索，搜索走过的路径被称为（Reference Chain)，当一个对象到 GC Roots 没有任何引用链相连时（即从 GC Roots 节点到该节点不可达），则证明该对象是不可用的。</p>
<p><img data-src="/assets/picture/java-gc/1562835381956.png" alt="1562835381956"></p>
<p>通过可达性算法，成功解决了引用计数所无法解决的问题-“循环依赖”，只要你无法与 GC Root 建立直接或间接的连接，系统就会判定你为可回收对象。那这样就引申出了另一个问题，什么是 GC Root 呢？</p>
<h2 id="Java-内存区域"><a href="#Java-内存区域" class="headerlink" title="Java 内存区域"></a><strong>Java 内存区域</strong></h2><p>在 Java 语言中，可作为 GC Root 的对象包括以下4种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中 JNI（即一般说的 Native 方法）引用的对象</li>
</ul>
<p><img data-src="/assets/picture/java-gc/1562835845758.png" alt="1562835845758"></p>
<h3 id="虚拟机栈（栈帧中的本地变量表）中引用的对象"><a href="#虚拟机栈（栈帧中的本地变量表）中引用的对象" class="headerlink" title="虚拟机栈（栈帧中的本地变量表）中引用的对象"></a><strong>虚拟机栈（栈帧中的本地变量表）中引用的对象</strong></h3><p>以下代码中的 <code>localParameter</code>，即为 GC Root，当 <code>localParameter</code> 置空时，<code>localParameter</code> 对象也断掉了与 GC Root 的引用链，将被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackLocalParameter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackLocalParameter</span><span class="params">(String name)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StackLocalParameter localParameter = <span class="keyword">new</span> StackLocalParameter(<span class="string">&quot;localParameter&quot;</span>);</span><br><span class="line">    localParameter = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法区中类静态属性引用的对象"><a href="#方法区中类静态属性引用的对象" class="headerlink" title="方法区中类静态属性引用的对象"></a><strong>方法区中类静态属性引用的对象</strong></h3><p>以下代码中 <code>properties</code> 为 GC Root，<code>properties</code> 置为 null，经过 GC 后，<code>properties</code> 所指向的 <code>MethodAreaStaicProperties</code> 对象由于无法与 GC Root 建立关系被回收。</p>
<p>而 m 作为类的静态属性，也属于 GC Root，<code>parameter</code> 对象依然与 GC root 建立着连接，所以此时 <code>parameter</code> 对象并不会被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaStaicProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MethodAreaStaicProperties m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodAreaStaicProperties</span><span class="params">(String name)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MethodAreaStaicProperties properties = <span class="keyword">new</span> MethodAreaStaicProperties(<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">    properties.m = <span class="keyword">new</span> MethodAreaStaicProperties(<span class="string">&quot;parameter&quot;</span>);</span><br><span class="line">    properties = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法区中常量引用的对象"><a href="#方法区中常量引用的对象" class="headerlink" title="方法区中常量引用的对象"></a><strong>方法区中常量引用的对象</strong></h3><p>以下代码中 <code>m</code> 即为方法区中的常量引用，也为 GC Root，<code>properties</code> 置为 null 后，final 对象也不会因没有与 GC Root 建立联系而被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaStaicProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodAreaStaicProperties m = MethodAreaStaicProperties(<span class="string">&quot;final&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodAreaStaicProperties</span><span class="params">(String name)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MethodAreaStaicProperties properties = <span class="keyword">new</span> MethodAreaStaicProperties(<span class="string">&quot;staticProperties&quot;</span>);</span><br><span class="line">    properties = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="本地方法栈中引用的对象"><a href="#本地方法栈中引用的对象" class="headerlink" title="本地方法栈中引用的对象"></a><strong>本地方法栈中引用的对象</strong></h3><p>任何 native 接口都会使用某种本地方法栈，实现的本地方法接口是使用 C 连接模型的话，那么它的本地方法栈就是 C 栈。当线程调用 Java 方法时，虚拟机会创建一个新的栈帧并压入 Java 栈。然而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不再在线程的 Java 栈中压入新的帧，虚拟机只是简单地动态连接并直接调用指定的本地方法。</p>
<p><img data-src="/assets/picture/java-gc/1562835460475.png" alt="1562835460475"></p>
<h2 id="怎么回收垃圾"><a href="#怎么回收垃圾" class="headerlink" title="怎么回收垃圾"></a><strong>怎么回收垃圾</strong></h2><p>在确定了哪些垃圾可以被回收后，垃圾收集器要做的事情就是开始进行垃圾回收，但是这里面涉及到一个问题是：如何高效地进行垃圾回收。由于Java虚拟机规范并没有对如何实现垃圾收集器做出明确的规定，因此各个厂商的虚拟机可以采用不同的方式来实现垃圾收集器，这里我们讨论几种常见的垃圾收集算法的核心思想。</p>
<h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记 - 清除算法"></a><strong>标记 - 清除算法</strong></h3><p><img data-src="/assets/picture/java-gc/1562835512668.png" alt="1562835512668"></p>
<p>标记清除算法（Mark-Sweep）是最基础的一种垃圾回收算法，它分为2部分，先把内存区域中的这些对象进行标记，哪些属于可回收标记出来，然后把这些垃圾拎出来清理掉。就像上图一样，清理掉的垃圾就变成未使用的内存区域，等待被再次使用。</p>
<p>这逻辑再清晰不过了，并且也很好操作，但它存在一个很大的问题，那就是内存碎片。</p>
<p>上图中等方块的假设是 2M，小一些的是 1M，大一些的是 4M。等我们回收完，内存就会切成了很多段。我们知道开辟内存空间时，需要的是连续的内存区域，这时候我们需要一个 2M的内存区域，其中有2个 1M 是没法用的。这样就导致，其实我们本身还有这么多的内存的，但却用不了。</p>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a><strong>复制算法</strong></h3><p><img data-src="/assets/picture/java-gc/1562835594986.png" alt="1562835594986"></p>
<p>复制算法（Copying）是在标记清除算法上演化而来，解决标记清除算法的内存碎片问题。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。保证了内存的连续可用，内存分配时也就不用考虑内存碎片等复杂情况，逻辑清晰，运行高效。</p>
<p>上面的图很清楚，也很明显的暴露了另一个问题，合着我这140平的大三房，只能当70平米的小两房来使？代价实在太高。</p>
<h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a><strong>标记整理算法</strong></h3><p><img data-src="/assets/picture/java-gc/1562835613747.png" alt="1562835613747"></p>
<p>标记整理算法（Mark-Compact）标记过程仍然与标记 — 清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，再清理掉端边界以外的内存区域。</p>
<p>标记整理算法一方面在标记-清除算法上做了升级，解决了内存碎片的问题，也规避了复制算法只能利用一半内存区域的弊端。看起来很美好，但从上图可以看到，它对内存变动更频繁，需要整理所有存活对象的引用地址，在效率上比复制算法要差很多。</p>
<p>分代收集算法分代收集算法（Generational Collection）严格来说并不是一种思想或理论，而是融合上述3种基础的算法思想，而产生的针对不同情况所采用不同算法的一套组合拳。对象存活周期的不同将内存划分为几块。一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记-清理或者标记 — 整理算法来进行回收。so，另一个问题来了，那内存区域到底被分为哪几块，每一块又有什么特别适合什么算法呢？</p>
<h2 id="内存模型与回收策略"><a href="#内存模型与回收策略" class="headerlink" title="内存模型与回收策略"></a><strong>内存模型与回收策略</strong></h2><p><img data-src="/assets/picture/java-gc/1562835637332.png" alt="1562835637332"></p>
<p>Java 堆（Java Heap）是JVM所管理的内存中最大的一块，堆又是垃圾收集器管理的主要区域，这里我们主要分析一下 Java 堆的结构。</p>
<p>Java 堆主要分为2个区域-年轻代与老年代，其中年轻代又分 Eden 区和 Survivor 区，其中 Survivor 区又分 From 和 To 2个区。可能这时候大家会有疑问，为什么需要 Survivor 区，为什么Survivor 还要分2个区。不着急，我们从头到尾，看看对象到底是怎么来的，而它又是怎么没的。</p>
<h3 id="Eden-区"><a href="#Eden-区" class="headerlink" title="Eden 区"></a><strong>Eden 区</strong></h3><p>IBM 公司的专业研究表明，有将近98%的对象是朝生夕死，所以针对这一现状，大多数情况下，对象会在新生代 Eden 区中进行分配，当 Eden 区没有足够空间进行分配时，虚拟机会发起一次 Minor GC，Minor GC 相比 Major GC 更频繁，回收速度也更快。</p>
<p>通过 Minor GC 之后，Eden 会被清空，Eden 区中绝大部分对象会被回收，而那些无需回收的存活对象，将会进到 Survivor 的 From 区（若 From 区不够，则直接进入 Old 区）。</p>
<h3 id="Survivor-区"><a href="#Survivor-区" class="headerlink" title="Survivor 区"></a><strong>Survivor 区</strong></h3><p>Survivor 区相当于是 Eden 区和 Old 区的一个缓冲，类似于我们交通灯中的黄灯。Survivor 又分为2个区，一个是 From 区，一个是 To 区。每次执行 Minor GC，会将 Eden 区和 From 存活的对象放到 Survivor 的 To 区（如果 To 区不够，则直接进入 Old 区）。</p>
<h4 id="为啥需要？"><a href="#为啥需要？" class="headerlink" title="为啥需要？"></a><strong>为啥需要？</strong></h4><p>不就是新生代到老年代么，直接 Eden 到 Old 不好了吗，为啥要这么复杂。想想如果没有 Survivor 区，Eden 区每进行一次 Minor GC，存活的对象就会被送到老年代，老年代很快就会被填满。而有很多对象虽然一次 Minor GC 没有消灭，但其实也并不会蹦跶多久，或许第二次，第三次就需要被清除。这时候移入老年区，很明显不是一个明智的决定。</p>
<p>所以，Survivor 的存在意义就是减少被送到老年代的对象，进而减少 Major GC 的发生。Survivor 的预筛选保证，只有经历16次 Minor GC 还能在新生代中存活的对象，才会被送到老年代。</p>
<h4 id="为啥需要俩？"><a href="#为啥需要俩？" class="headerlink" title="为啥需要俩？"></a><strong>为啥需要俩？</strong></h4><p>设置两个 Survivor 区最大的好处就是解决内存碎片化。</p>
<p>我们先假设一下，Survivor 如果只有一个区域会怎样。Minor GC 执行后，Eden 区被清空了，存活的对象放到了 Survivor 区，而之前 Survivor 区中的对象，可能也有一些是需要被清除的。问题来了，这时候我们怎么清除它们？在这种场景下，我们只能标记清除，而我们知道标记清除最大的问题就是内存碎片，在新生代这种经常会消亡的区域，采用标记清除必然会让内存产生严重的碎片化。因为 Survivor 有2个区域，所以每次 Minor GC，会将之前 Eden 区和 From 区中的存活对象复制到 To 区域。第二次 Minor GC 时，From 与 To 职责兑换，这时候会将 Eden 区和 To 区中的存活对象再复制到 From 区域，以此反复。</p>
<p>这种机制最大的好处就是，整个过程中，永远有一个 Survivor space 是空的，另一个非空的 Survivor space 是无碎片的。那么，Survivor 为什么不分更多块呢？比方说分成三个、四个、五个?显然，如果 Survivor 区再细分下去，每一块的空间就会比较小，容易导致 Survivor 区满，两块 Survivor 区可能是经过权衡之后的最佳方案。</p>
<h3 id="Old-区"><a href="#Old-区" class="headerlink" title="Old 区"></a><strong>Old 区</strong></h3><p>老年代占据着2/3的堆内存空间，只有在 Major GC 的时候才会进行清理，每次 GC 都会触发“Stop-The-World”。内存越大，STW 的时间也越长，所以内存也不仅仅是越大就越好。由于复制算法在对象存活率较高的老年代会进行很多次的复制操作，效率很低，所以老年代这里采用的是标记 — 整理算法。</p>
<p>除了上述所说，在内存担保机制下，无法安置的对象会直接进到老年代，以下几种情况也会进入老年代。</p>
<h4 id="大对象"><a href="#大对象" class="headerlink" title="大对象"></a><strong>大对象</strong></h4><p>大对象指需要大量连续内存空间的对象，这部分对象不管是不是“朝生夕死”，都会直接进到老年代。这样做主要是为了避免在 Eden 区及2个 Survivor 区之间发生大量的内存复制。当你的系统有非常多“朝生夕死”的大对象时，得注意了。</p>
<h4 id="长期存活对象"><a href="#长期存活对象" class="headerlink" title="长期存活对象"></a><strong>长期存活对象</strong></h4><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器。正常情况下对象会不断的在 Survivor 的 From 区与 To 区之间移动，对象在 Survivor 区中没经历一次 Minor GC，年龄就增加1岁。当年龄增加到15岁时，这时候就会被转移到老年代。当然，这里的15，JVM 也支持进行特殊设置。</p>
<h4 id="动态对象年龄"><a href="#动态对象年龄" class="headerlink" title="动态对象年龄"></a><strong>动态对象年龄</strong></h4><p>虚拟机并不重视要求对象年龄必须到15岁，才会放入老年区，如果 Survivor 空间中相同年龄所有对象大小的综合大于 Survivor 空间的一般，年龄大于等于该年龄的对象就可以直接进去老年区，无需等你“成年”。</p>
<p>这其实有点类似于负载均衡，轮询是负载均衡的一种，保证每台机器都分得同样的请求。看似很均衡，但每台机的硬件不通，健康状况不同，我们还可以基于每台机接受的请求数，或每台机的响应时间等，来调整我们的负载均衡算法。</p>
<blockquote>
<p>转载自：阿里巴巴中间件</p>
<p>标题：咱们从头到尾说一次 Java 垃圾回收</p>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYUExZURZSVVIdUlmaWdUdzJmZm91dw==">https://mp.weixin.qq.com/s/aA1eDYIUHuIfigTw2ffouw<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 对象头</title>
    <url>/2019/08/02/java/java-object-header/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在 <code>Hotspot</code> 虚拟机中，对象在内存中的布局分为三块区域：<strong>对象头</strong>（Header）、<strong>实例数据</strong>（Instance Data）和<strong>对齐填充</strong>（Padding）；</p>
<p><img data-src="/assets/picture/java/object-header/1564927152784.png" alt="1564927152784"></p>
<p>从上面的这张图里面可以看出，对象在内存中的结构主要包含以下几个部分：</p>
<ul>
<li>Mark Word(标记字段)：对象的Mark Word部分占4个字节，其内容是一系列的标记位，比如轻量级锁的标记位，偏向锁标记位等等。</li>
<li>Klass Pointer（Class对象指针）：Class对象指针的大小也是4个字节，其指向的位置是对象对应的Class对象（其对应的元数据对象）的内存地址</li>
<li>对象实际数据：这里面包括了对象的所有成员变量，其大小由各个成员变量的大小决定，比如：byte和boolean是1个字节，short和char是2个字节，int和float是4个字节，long和double是8个字节，reference是4个字节</li>
<li>对齐：最后一部分是对齐填充的字节，按8个字节填充。</li>
</ul>
<span id="more"></span>

<p>Java 对象头是实现 <code>synchronized</code> 的锁对象的基础，一般而言，<code>synchronized</code> 使用的锁对象是存储在 Java 对象头里。它是<strong>轻量级锁</strong>和<strong>偏向锁</strong>的关键</p>
<p>JVM 中每个对象都有一个<strong>对象头</strong>（Objectheader），普通对象头的长度为两个机器码，数组对象头的长度为三个机器码</p>
<blockquote>
<p>在32位虚拟机中，1个机器码等于4字节，也就是32 bit</p>
</blockquote>
<h3 id="对象头的形式"><a href="#对象头的形式" class="headerlink" title="对象头的形式"></a>对象头的形式</h3><p>普通对象头：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|--------------------------------------------------------------|</span><br><span class="line">|                     Object Header (64 bits)                  |</span><br><span class="line">|------------------------------------|-------------------------|</span><br><span class="line">|        Mark Word (32 bits)         |    Klass Word (32 bits) |</span><br><span class="line">|------------------------------------|-------------------------|</span><br></pre></td></tr></table></figure>

<p>数组对象头：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|---------------------------------------------------------------------------------|</span><br><span class="line">|                                 Object Header (96 bits)                         |</span><br><span class="line">|--------------------------------|-----------------------|------------------------|</span><br><span class="line">|        Mark Word(32bits)       |    Klass Word(32bits) |  array length(32bits)  |</span><br><span class="line">|--------------------------------|-----------------------|------------------------|</span><br></pre></td></tr></table></figure>

<h3 id="对象头的组成"><a href="#对象头的组成" class="headerlink" title="对象头的组成"></a>对象头的组成</h3><h5 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h5><p>Mark Word 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的<br>锁、偏向线程 ID、偏向时间戳等等；Mark Word 的位长度为 JVM 的一个 Word 大小，也就是说32位 JVM 的 Mark Word 为32位，64位 JVM 为64位。</p>
<p>对象需要存储的运行时数据很多，考虑到虚拟机的空间效率，Mark Word 被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间；JVM 将字的最低两个位设置为标记位，不同标记位下的 Mark Word 示意如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">|                  Mark Word (32 bits)                  |       State        |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| identity_hashcode:25 | age:4 | biased_lock:1 | lock:2 |       Normal       |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">|  thread:23 | epoch:2 | age:4 | biased_lock:1 | lock:2 |       Biased       |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">|               ptr_to_lock_record:30          | lock:2 | Lightweight Locked |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">|               ptr_to_heavyweight_monitor:30  | lock:2 | Heavyweight Locked |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">|                                              | lock:2 |    Marked for GC   |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/picture/java/object-header/1564924765902.png" alt="1564924765902"></p>
<p>其中各部分的含义如下：<br><strong>lock</strong>:2位的锁状态标记位，由于希望用尽可能少的二进制位表示尽可能多的信息，所以设置了 lock 标记。该标记的值不同，整个 Mark Word 表示的含义不同。</p>
<table>
<thead>
<tr>
<th align="center">biased_lock</th>
<th align="center">lock</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">01</td>
<td align="center">无锁</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">01</td>
<td align="center">偏向锁</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">00</td>
<td align="center">轻量级锁</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">10</td>
<td align="center">重量级锁</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">11</td>
<td align="center">GC标记</td>
</tr>
</tbody></table>
<p><strong>biased_lock</strong>：对象是否启用偏向锁标记，只占1个二进制位。为1时表示对象启用偏向锁，为0时表示对象没有偏向锁。<br> <strong>age</strong>：4位的Java对象年龄。在GC中，如果对象在Survivor区复制一次，年龄增加1。当对象达到设定的阈值时，将会晋升到老年代。默认情况下，并行GC的年龄阈值为15，并发GC的年龄阈值为6。由于age只有4位，所以最大值为15，这就是<code>-XX:MaxTenuringThreshold</code>选项最大值为15的原因。<br> <strong>identity_hashcode</strong>：25位的对象标识Hash码，采用延迟加载技术。调用方法<code>System.identityHashCode()</code>计算，并会将结果写到该对象头中。当对象被锁定时，该值会移动到管程Monitor中。<br> <strong>thread</strong>：持有偏向锁的线程ID。<br> <strong>epoch</strong>：偏向时间戳。<br> <strong>ptr_to_lock_record</strong>：指向栈中锁记录的指针。<br> <strong>ptr_to_heavyweight_monitor</strong>：指向管程Monitor的指针。</p>
<p>64位下的标记字与32位的相似，不再赘述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br><span class="line">|                                  Mark Word (64 bits)                         |       State        |</span><br><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br><span class="line">| unused:25 | identity_hashcode:31 | unused:1 | age:4 | biased_lock:1 | lock:2 |       Normal       |</span><br><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br><span class="line">| thread:54 |       epoch:2        | unused:1 | age:4 | biased_lock:1 | lock:2 |       Biased       |</span><br><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br><span class="line">|                       ptr_to_lock_record:62                         | lock:2 | Lightweight Locked |</span><br><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br><span class="line">|                     ptr_to_heavyweight_monitor:62                   | lock:2 | Heavyweight Locked |</span><br><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br><span class="line">|                                                                     | lock:2 |    Marked for GC   |</span><br><span class="line">|------------------------------------------------------------------------------|--------------------|</span><br></pre></td></tr></table></figure>

<h4 id="Klass-Pointer（Class对象指针）"><a href="#Klass-Pointer（Class对象指针）" class="headerlink" title="Klass Pointer（Class对象指针）"></a>Klass Pointer（Class对象指针）</h4><p>这一部分用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。该指针的位长度为JVM的一个字大小，即32位的JVM为32位，64位的JVM为64位。<br> 如果应用的对象过多，使用64位的指针将浪费大量内存，统计而言，64位的JVM将会比32位的JVM多耗费50%的内存。为了节约内存可以使用选项<code>+UseCompressedOops</code>开启指针压缩，其中，oop即ordinary object pointer普通对象指针。开启该选项后，下列指针将压缩至32位：</p>
<ol>
<li>每个Class的属性指针（即静态变量）</li>
<li>每个对象的属性指针（即对象变量）</li>
<li>普通对象数组的每个元素指针</li>
</ol>
<p>当然，也不是所有的指针都会压缩，一些特殊类型的指针JVM不会优化，比如指向PermGen的Class对象指针(JDK8中指向元空间的Class对象指针)、本地变量、堆栈元素、入参、返回值和NULL指针等。</p>
<h4 id="array-length"><a href="#array-length" class="headerlink" title="array length"></a>array length</h4><p>如果对象是一个数组，那么对象头还需要有额外的空间用于存储数组的长度，这部分数据的长度也随着JVM架构的不同而不同：32位的JVM上，长度为32位；64位JVM则为64位。64位JVM如果开启<code>+UseCompressedOops</code>选项，<strong>该区域长度也将由64位压缩至32位</strong>。</p>
<blockquote>
<p>参考文章： <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob3VmYW55YW5nX2NoaW5hL2FydGljbGUvZGV0YWlscy81NDYwMTMxMQ==">https://blog.csdn.net/zhoufanyang_china/article/details/54601311<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>对象头</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 虚拟机字节码指令表</title>
    <url>/2020/07/25/java/jvm-bytecode-instruction-table/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>JVM 字节码指令大全，用到的时候来这查阅即可。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x00</td>
<td>nop</td>
<td>None</td>
</tr>
<tr>
<td>0x01</td>
<td>aconst_null</td>
<td>将null推送至栈顶</td>
</tr>
<tr>
<td>0x02</td>
<td>iconst_m1</td>
<td>将int型-1推送至栈顶</td>
</tr>
<tr>
<td>0x03</td>
<td>iconst_0</td>
<td>将int型0推送至栈顶</td>
</tr>
<tr>
<td>0x04</td>
<td>iconst_1</td>
<td>将int型1推送至栈顶</td>
</tr>
<tr>
<td>0x05</td>
<td>iconst_2</td>
<td>将int型2推送至栈顶</td>
</tr>
<tr>
<td>0x06</td>
<td>iconst_3</td>
<td>将int型3推送至栈顶</td>
</tr>
<tr>
<td>0x07</td>
<td>iconst_4</td>
<td>将int型4推送至栈顶</td>
</tr>
<tr>
<td>0x08</td>
<td>iconst_5</td>
<td>将int型5推送至栈顶</td>
</tr>
<tr>
<td>0x09</td>
<td>lconst_0</td>
<td>将long型0推送至栈顶</td>
</tr>
<tr>
<td>0x0a</td>
<td>lconst_1</td>
<td>将long型1推送至栈顶</td>
</tr>
<tr>
<td>0x0b</td>
<td>fconst_0</td>
<td>将float型0推送至栈顶</td>
</tr>
<tr>
<td>0x0c</td>
<td>fconst_1</td>
<td>将float型1推送至栈顶</td>
</tr>
<tr>
<td>0x0d</td>
<td>fconst_2</td>
<td>将float型2推送至栈顶</td>
</tr>
<tr>
<td>0x0e</td>
<td>dconst_0</td>
<td>将double型0推送至栈顶</td>
</tr>
<tr>
<td>0x0f</td>
<td>dconst_1</td>
<td>将double型1推送至栈顶</td>
</tr>
<tr>
<td>0x10</td>
<td>bipush</td>
<td>将单字节的常量值(-128~127)推送至栈顶</td>
</tr>
<tr>
<td>0x11</td>
<td>sipush</td>
<td>将一个短整型常量(-32768~32767)推送至栈顶</td>
</tr>
<tr>
<td>0x12</td>
<td>ldc</td>
<td>将int,float或String型常量值从常量池中推送至栈顶</td>
</tr>
<tr>
<td>0x13</td>
<td>ldc_w</td>
<td>将int,float或String型常量值从常量池中推送至栈顶(宽索引)</td>
</tr>
<tr>
<td>0x14</td>
<td>ldc2_w</td>
<td>将long或double型常量值从常量池中推送至栈顶(宽索引)</td>
</tr>
<tr>
<td>0x15</td>
<td>iload</td>
<td>将指定的int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x16</td>
<td>lload</td>
<td>将指定的long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x17</td>
<td>fload</td>
<td>将指定的float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x18</td>
<td>dload</td>
<td>将指定的double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x19</td>
<td>aload</td>
<td>将指定的引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1a</td>
<td>iload_0</td>
<td>将第一个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1b</td>
<td>iload_1</td>
<td>将第二个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1c</td>
<td>iload_2</td>
<td>将第三个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1d</td>
<td>iload_3</td>
<td>将第四个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1e</td>
<td>lload_0</td>
<td>将第一个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1f</td>
<td>lload_1</td>
<td>将第二个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x20</td>
<td>lload_2</td>
<td>将第三个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x21</td>
<td>lload_3</td>
<td>将第四个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x22</td>
<td>fload_0</td>
<td>将第一个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x23</td>
<td>fload_1</td>
<td>将第二个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x24</td>
<td>fload_2</td>
<td>将第三个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x25</td>
<td>fload_3</td>
<td>将第四个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x26</td>
<td>dload_0</td>
<td>将第一个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x27</td>
<td>dload_1</td>
<td>将第二个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x28</td>
<td>dload_2</td>
<td>将第三个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x29</td>
<td>dload_3</td>
<td>将第四个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2a</td>
<td>aload_0</td>
<td>将第一个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2b</td>
<td>aload_1</td>
<td>将第二个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2c</td>
<td>aload_2</td>
<td>将第三个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2d</td>
<td>aload_3</td>
<td>将第四个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2e</td>
<td>iaload</td>
<td>将int型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x2f</td>
<td>laload</td>
<td>将long型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x30</td>
<td>faload</td>
<td>将float型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x31</td>
<td>daload</td>
<td>将double型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x32</td>
<td>aaload</td>
<td>将引用类型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x33</td>
<td>baload</td>
<td>将boolean或byte型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x34</td>
<td>caload</td>
<td>将char型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x35</td>
<td>saload</td>
<td>将short型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x36</td>
<td>istore</td>
<td>将栈顶int型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x37</td>
<td>lstore</td>
<td>将栈顶long型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x38</td>
<td>fstore</td>
<td>将栈顶float型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x39</td>
<td>dstore</td>
<td>将栈顶double型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x3a</td>
<td>astore</td>
<td>将栈顶引用类型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x3b</td>
<td>istore_0</td>
<td>将栈顶int型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x3c</td>
<td>istore_1</td>
<td>将栈顶int型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x3d</td>
<td>istore_2</td>
<td>将栈顶int型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x3e</td>
<td>istore_3</td>
<td>将栈顶int型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x3f</td>
<td>lstore_0</td>
<td>将栈顶long型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x40</td>
<td>lstore_1</td>
<td>将栈顶long型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x41</td>
<td>lstore_2</td>
<td>将栈顶long型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x42</td>
<td>lstore_3</td>
<td>将栈顶long型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x43</td>
<td>fstore_0</td>
<td>将栈顶float型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x44</td>
<td>fstore_1</td>
<td>将栈顶float型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x45</td>
<td>fstore_2</td>
<td>将栈顶float型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x46</td>
<td>fstore_3</td>
<td>将栈顶float型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x47</td>
<td>dstore_0</td>
<td>将栈顶double型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x48</td>
<td>dstore_1</td>
<td>将栈顶double型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x49</td>
<td>dstore_2</td>
<td>将栈顶double型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x4a</td>
<td>dstore_3</td>
<td>将栈顶double型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x4b</td>
<td>astore_0</td>
<td>将栈顶引用型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x4c</td>
<td>astore_1</td>
<td>将栈顶引用型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x4d</td>
<td>astore_2</td>
<td>将栈顶引用型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x4e</td>
<td>astore_3</td>
<td>将栈顶引用型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x4f</td>
<td>iastore</td>
<td>将栈顶int型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x50</td>
<td>lastore</td>
<td>将栈顶long型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x51</td>
<td>fastore</td>
<td>将栈顶float型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x52</td>
<td>dastore</td>
<td>将栈顶double型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x53</td>
<td>aastore</td>
<td>将栈顶引用型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x54</td>
<td>bastore</td>
<td>将栈顶boolean或byte型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x55</td>
<td>castore</td>
<td>将栈顶char型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x56</td>
<td>sastore</td>
<td>将栈顶short型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x57</td>
<td>pop</td>
<td></td>
</tr>
<tr>
<td>0x58</td>
<td>pop2</td>
<td>将栈顶的一个(对于非long或double类型)或两个数值(对于非long或double的其他类型)弹出</td>
</tr>
<tr>
<td>0x59</td>
<td>dup</td>
<td>复制栈顶数值并将复制值压入栈顶</td>
</tr>
<tr>
<td>0x5a</td>
<td>dup_x1</td>
<td>复制栈顶数值并将两个复制值压入栈顶</td>
</tr>
<tr>
<td>0x5b</td>
<td>dup_x2</td>
<td>复制栈顶数值并将三个(或两个)复制值压入栈顶</td>
</tr>
<tr>
<td>0x5c</td>
<td>dup2</td>
<td>复制栈顶一个(对于long或double类型)或两个(对于非long或double的其他类型)数值并将复制值压入栈顶</td>
</tr>
<tr>
<td>0x5d</td>
<td>dup2_x1</td>
<td>dup_x1指令的双倍版本</td>
</tr>
<tr>
<td>0x5e</td>
<td>dup2_x2</td>
<td>dup_x2指令的双倍版本</td>
</tr>
<tr>
<td>0x5f</td>
<td>swap</td>
<td>将栈顶最顶端的两个数值互换(数值不能是long或double类型)</td>
</tr>
<tr>
<td>0x60</td>
<td>iadd</td>
<td>将栈顶两int型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x61</td>
<td>ladd</td>
<td>将栈顶两long型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x62</td>
<td>fadd</td>
<td>将栈顶两float型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x63</td>
<td>dadd</td>
<td>将栈顶两double型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x64</td>
<td>isub</td>
<td>将栈顶两int型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x65</td>
<td>lsub</td>
<td>将栈顶两long型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x66</td>
<td>fsub</td>
<td>将栈顶两float型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x67</td>
<td>dsub</td>
<td>将栈顶两double型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x68</td>
<td>imul</td>
<td>将栈顶两int型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x69</td>
<td>lmul</td>
<td>将栈顶两long型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6a</td>
<td>fmul</td>
<td>将栈顶两float型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6b</td>
<td>dmul</td>
<td>将栈顶两double型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6c</td>
<td>idiv</td>
<td>将栈顶两int型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6d</td>
<td>ldiv</td>
<td>将栈顶两long型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6e</td>
<td>fdiv</td>
<td>将栈顶两float型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6f</td>
<td>ddiv</td>
<td>将栈顶两double型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x70</td>
<td>irem</td>
<td>将栈顶两int型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x71</td>
<td>lrem</td>
<td>将栈顶两long型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x72</td>
<td>frem</td>
<td>将栈顶两float型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x73</td>
<td>drem</td>
<td>将栈顶两double型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x74</td>
<td>ineg</td>
<td>将栈顶int型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x75</td>
<td>lneg</td>
<td>将栈顶long型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x76</td>
<td>fneg</td>
<td>将栈顶float型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x77</td>
<td>dneg</td>
<td>将栈顶double型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x78</td>
<td>ishl</td>
<td>将int型数值左移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x79</td>
<td>lshl</td>
<td>将long型数值左移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7a</td>
<td>ishr</td>
<td>将int型数值右(带符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7b</td>
<td>lshr</td>
<td>将long型数值右(带符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7c</td>
<td>iushr</td>
<td>将int型数值右(无符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7d</td>
<td>lushr</td>
<td>将long型数值右(无符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7e</td>
<td>iand</td>
<td>将栈顶两int型数值”按位与”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7f</td>
<td>land</td>
<td>将栈顶两long型数值”按位与”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x80</td>
<td>ior</td>
<td>将栈顶两int型数值”按位或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x81</td>
<td>lor</td>
<td>将栈顶两long型数值”按位或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x82</td>
<td>ixor</td>
<td>将栈顶两int型数值”按位异或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x83</td>
<td>lxor</td>
<td>将栈顶两long型数值”按位异或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x84</td>
<td>iinc</td>
<td>将指定int型变量增加指定值(如i++, i–, i+=2等)</td>
</tr>
<tr>
<td>0x85</td>
<td>i2l</td>
<td>将栈顶int型数值强制转换为long型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x86</td>
<td>i2f</td>
<td>将栈顶int型数值强制转换为float型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x87</td>
<td>i2d</td>
<td>将栈顶int型数值强制转换为double型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x88</td>
<td>l2i</td>
<td>将栈顶long型数值强制转换为int型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x89</td>
<td>l2f</td>
<td>将栈顶long型数值强制转换为float型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8a</td>
<td>l2d</td>
<td>将栈顶long型数值强制转换为double型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8b</td>
<td>f2i</td>
<td>将栈顶float型数值强制转换为int型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8c</td>
<td>f2l</td>
<td>将栈顶float型数值强制转换为long型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8d</td>
<td>f2d</td>
<td>将栈顶float型数值强制转换为double型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8e</td>
<td>d2i</td>
<td>将栈顶double型数值强制转换为int型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8f</td>
<td>d2l</td>
<td>将栈顶double型数值强制转换为long型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x90</td>
<td>d2f</td>
<td>将栈顶double型数值强制转换为float型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x91</td>
<td>i2b</td>
<td>将栈顶int型数值强制转换为byte型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x92</td>
<td>i2c</td>
<td>将栈顶int型数值强制转换为char型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x93</td>
<td>i2s</td>
<td>将栈顶int型数值强制转换为short型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x94</td>
<td>lcmp</td>
<td>比较栈顶两long型数值大小, 并将结果(1, 0或-1)压入栈顶</td>
</tr>
<tr>
<td>0x95</td>
<td>fcmpl</td>
<td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶</td>
</tr>
<tr>
<td>0x96</td>
<td>fcmpg</td>
<td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶</td>
</tr>
<tr>
<td>0x97</td>
<td>dcmpl</td>
<td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶</td>
</tr>
<tr>
<td>0x98</td>
<td>dcmpg</td>
<td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶</td>
</tr>
<tr>
<td>0x99</td>
<td>ifeq</td>
<td>当栈顶int型数值等于0时跳转</td>
</tr>
<tr>
<td>0x9a</td>
<td>ifne</td>
<td>当栈顶int型数值不等于0时跳转</td>
</tr>
<tr>
<td>0x9b</td>
<td>iflt</td>
<td>当栈顶int型数值小于0时跳转</td>
</tr>
<tr>
<td>0x9c</td>
<td>ifge</td>
<td>当栈顶int型数值大于等于0时跳转</td>
</tr>
<tr>
<td>0x9d</td>
<td>ifgt</td>
<td>当栈顶int型数值大于0时跳转</td>
</tr>
<tr>
<td>0x9e</td>
<td>ifle</td>
<td>当栈顶int型数值小于等于0时跳转</td>
</tr>
<tr>
<td>0x9f</td>
<td>if_icmpeq</td>
<td>比较栈顶两int型数值大小, 当结果等于0时跳转</td>
</tr>
<tr>
<td>0xa0</td>
<td>if_icmpne</td>
<td>比较栈顶两int型数值大小, 当结果不等于0时跳转</td>
</tr>
<tr>
<td>0xa1</td>
<td>if_icmplt</td>
<td>比较栈顶两int型数值大小, 当结果小于0时跳转</td>
</tr>
<tr>
<td>0xa2</td>
<td>if_icmpge</td>
<td>比较栈顶两int型数值大小, 当结果大于等于0时跳转</td>
</tr>
<tr>
<td>0xa3</td>
<td>if_icmpgt</td>
<td>比较栈顶两int型数值大小, 当结果大于0时跳转</td>
</tr>
<tr>
<td>0xa4</td>
<td>if_icmple</td>
<td>比较栈顶两int型数值大小, 当结果小于等于0时跳转</td>
</tr>
<tr>
<td>0xa5</td>
<td>if_acmpeq</td>
<td>比较栈顶两引用型数值, 当结果相等时跳转</td>
</tr>
<tr>
<td>0xa6</td>
<td>if_acmpne</td>
<td>比较栈顶两引用型数值, 当结果不相等时跳转</td>
</tr>
<tr>
<td>0xa7</td>
<td>goto</td>
<td>无条件跳转</td>
</tr>
<tr>
<td>0xa8</td>
<td>jsr</td>
<td>跳转至指定的16位offset位置, 并将jsr的下一条指令地址压入栈顶</td>
</tr>
<tr>
<td>0xa9</td>
<td>ret</td>
<td>返回至本地变量指定的index的指令位置(一般与jsr或jsr_w联合使用)</td>
</tr>
<tr>
<td>0xaa</td>
<td>tableswitch</td>
<td>用于switch条件跳转, case值连续(可变长度指令)</td>
</tr>
<tr>
<td>0xab</td>
<td>lookupswitch</td>
<td>用于switch条件跳转, case值不连续(可变长度指令)</td>
</tr>
<tr>
<td>0xac</td>
<td>ireturn</td>
<td>从当前方法返回int</td>
</tr>
<tr>
<td>0xad</td>
<td>lreturn</td>
<td>从当前方法返回long</td>
</tr>
<tr>
<td>0xae</td>
<td>freturn</td>
<td>从当前方法返回float</td>
</tr>
<tr>
<td>0xaf</td>
<td>dreturn</td>
<td>从当前方法返回double</td>
</tr>
<tr>
<td>0xb0</td>
<td>areturn</td>
<td>从当前方法返回对象引用</td>
</tr>
<tr>
<td>0xb1</td>
<td>return</td>
<td>从当前方法返回void</td>
</tr>
<tr>
<td>0xb2</td>
<td>getstatic</td>
<td>获取指定类的静态域, 并将其压入栈顶</td>
</tr>
<tr>
<td>0xb3</td>
<td>putstatic</td>
<td>为指定类的静态域赋值</td>
</tr>
<tr>
<td>0xb4</td>
<td>getfield</td>
<td>获取指定类的实例域, 并将其压入栈顶</td>
</tr>
<tr>
<td>0xb5</td>
<td>putfield</td>
<td>为指定类的实例域赋值</td>
</tr>
<tr>
<td>0xb6</td>
<td>invokevirtual</td>
<td>调用实例方法</td>
</tr>
<tr>
<td>0xb7</td>
<td>invokespecial</td>
<td>调用超类构建方法, 实例初始化方法, 私有方法</td>
</tr>
<tr>
<td>0xb8</td>
<td>invokestatic</td>
<td>调用静态方法</td>
</tr>
<tr>
<td>0xb9</td>
<td>invokeinterface</td>
<td>调用接口方法</td>
</tr>
<tr>
<td>0xba</td>
<td>invokedynamic</td>
<td>调用动态方法</td>
</tr>
<tr>
<td>0xbb</td>
<td>new</td>
<td>创建一个对象, 并将其引用引用值压入栈顶</td>
</tr>
<tr>
<td>0xbc</td>
<td>newarray</td>
<td>创建一个指定的原始类型(如int, float, char等)的数组, 并将其引用值压入栈顶</td>
</tr>
<tr>
<td>0xbd</td>
<td>anewarray</td>
<td>创建一个引用型(如类, 接口, 数组)的数组, 并将其引用值压入栈顶</td>
</tr>
<tr>
<td>0xbe</td>
<td>arraylength</td>
<td>获取数组的长度值并压入栈顶</td>
</tr>
<tr>
<td>0xbf</td>
<td>athrow</td>
<td>将栈顶的异常抛出</td>
</tr>
<tr>
<td>0xc0</td>
<td>checkcast</td>
<td>检验类型转换, 检验未通过将抛出 ClassCastException</td>
</tr>
<tr>
<td>0xc1</td>
<td>instanceof</td>
<td>检验对象是否是指定类的实际, 如果是将1压入栈顶, 否则将0压入栈顶</td>
</tr>
<tr>
<td>0xc2</td>
<td>monitorenter</td>
<td>获得对象的锁, 用于同步方法或同步块</td>
</tr>
<tr>
<td>0xc3</td>
<td>monitorexit</td>
<td>释放对象的锁, 用于同步方法或同步块</td>
</tr>
<tr>
<td>0xc4</td>
<td>wide</td>
<td>扩展本地变量的宽度</td>
</tr>
<tr>
<td>0xc5</td>
<td>multianewarray</td>
<td>创建指定类型和指定维度的多维数组(执行该指令时, 操作栈中必须包含各维度的长度值), 并将其引用压入栈顶</td>
</tr>
<tr>
<td>0xc6</td>
<td>ifnull</td>
<td>为null时跳转</td>
</tr>
<tr>
<td>0xc7</td>
<td>ifnonnull</td>
<td>不为null时跳转</td>
</tr>
<tr>
<td>0xc8</td>
<td>goto_w</td>
<td>无条件跳转(宽索引)</td>
</tr>
<tr>
<td>0xc9</td>
<td>jsr_w</td>
<td>跳转至指定的32位offset位置, 并将jsr_w的下一条指令地址压入栈顶</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>版本号命名规则</title>
    <url>/2018/07/27/java/semantic-versionning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="版本号命名规则"><a href="#版本号命名规则" class="headerlink" title="版本号命名规则"></a>版本号命名规则</h2><blockquote>
<p>本文根据 Semantic Versionning 2.0.0 和 Semantic Versioning 3.0.0 选择性的整理出版本号命名规则指南。</p>
</blockquote>
<h3 id="版本号的格式为-X-Y-Z-又称-Major-Minor-Patch-，递增的规则为："><a href="#版本号的格式为-X-Y-Z-又称-Major-Minor-Patch-，递增的规则为：" class="headerlink" title="版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为："></a>版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X 表示主版本号，当 API 的兼容性变化时，X 需递增，Y 和 Z 同时设置为 0。</span><br><span class="line">Y 表示次版本号，当增加功能(不影响 API 的兼容性) 或者 API 被标记为 Deprecated 时，Y 需递增，同时 Z 设置为 0。</span><br><span class="line">Z 表示修订号，当做 Bug 修复时(不影响 API 的兼容性)，Z 需递增。</span><br></pre></td></tr></table></figure>
<h3 id="详细的规则如下："><a href="#详细的规则如下：" class="headerlink" title="详细的规则如下："></a>详细的规则如下：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X, Y, Z 必须为非负整数，且不得包含前导零，必须按数值递增，如 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0</span><br><span class="line">0.Y.Z 的版本号表明软件处于初始开发阶段，意味着 API 可能不稳定；1.0.0 表明版本已有稳定的 API。</span><br><span class="line">先行版本号(Pre-release)意味该版本不稳定，可能存在兼容性问题，其格式为：X.Y.Z.[a-c][正整数]，如1.0.0.a1，1.0.0.b99，1.0.0.c1000。</span><br><span class="line">开发版本号常用于 CI-CD，格式为 X.Y.Z.dev[正整数]，如 1.0.1.dev4。</span><br><span class="line">版本号的排序规则为依次比较主版本号、次版本号和修订号的数值，如 1.0.0 &lt; 1.0.1 &lt; 1.1.1 &lt; 2.0.0；</span><br><span class="line">对于先行版本号和开发版本号，有：1.0.0.a100 &lt; 1.0.0， 2.1.0.dev3 &lt; 2.1.0；</span><br><span class="line">当存在字母时，以 ASCII 的排序来比较，如 1.0.0.a1 &lt; 1.0.0.b1。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！</p>
</blockquote>
<span id="more"></span>

<h3 id="一些修饰的词"><a href="#一些修饰的词" class="headerlink" title="一些修饰的词"></a>一些修饰的词</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Snapshot: 版本代表不稳定、尚处于开发中的版本</span><br><span class="line">Alpha: 内部版本</span><br><span class="line">Beta: 测试版</span><br><span class="line">Demo: 演示版</span><br><span class="line">Enhance: 增强版</span><br><span class="line">Free: 自由版</span><br><span class="line">Full Version: 完整版，即正式版</span><br><span class="line">LTS: 长期维护版本</span><br><span class="line">Release: 发行版</span><br><span class="line">RC: 即将作为正式版发布(Release Candidat) 用在软件上就是候选版本。系统平台上就是发行候选版本。RC 版不会再加入新的功能了，主要着重于除错。</span><br><span class="line">GA: General Availability,正式发布的版本，在国外都是用 GA 来说明 release 版本的。</span><br><span class="line">Standard: 标准版</span><br><span class="line">Ultimate: 旗舰版</span><br><span class="line">Upgrade: 升级版</span><br></pre></td></tr></table></figure>

<h3 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h3><blockquote>
<p>奇数的发展中版本(develop)，如 2.5 ，及偶数的稳定版本，如 2.6 。</p>
</blockquote>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><blockquote>
<ul>
<li><p><strong>在 0.y.z 初始开发阶段，我该如何进行版本控制？</strong><br>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p>
</li>
<li><p><strong>如何判断发布 1.0.0 版本的时机？</strong><br>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p>
</li>
<li><p><strong>这不会阻碍快速开发和迭代吗？</strong><br>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p>
</li>
<li><p><strong>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</strong><br>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p>
</li>
<li><p><strong>为整个公共 API 写文件太费事了！</strong><br>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p>
</li>
<li><p><strong>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</strong><br>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p>
</li>
<li><p><strong>如果我更新了自己的依赖但没有改变公共 API 该怎么办？</strong><br>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的包有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p>
</li>
<li><p><strong>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</strong><br>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p>
</li>
<li><p><strong>我该如何处理即将弃用的功能？</strong><br>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p>
</li>
<li><p><strong>语义化版本对于版本的字串长度是否有限制呢？</strong><br>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p>
</li>
</ul>
</blockquote>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZW12ZXIub3JnL2xhbmcvemgtQ04v">Semantic Versioning 2.0.0<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9wZW5zdGFjay5vcmcvcGJyL2xhdGVzdC91c2VyL3NlbXZlci5odG1s">Semantic Versioning 3.0.0<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>规范</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronized 关键字详解</title>
    <url>/2019/08/04/java/synchronize/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="轻量级锁的加锁过程"><a href="#轻量级锁的加锁过程" class="headerlink" title="轻量级锁的加锁过程"></a>轻量级锁的加锁过程</h2><p>（1）在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。这时候线程堆栈与对象头的状态如图2.1所示。<br>（2）拷贝对象头中的Mark Word复制到锁记录中。<br>（3）拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock record里的owner指针指向object mark word。如果更新成功，则执行步骤（4），否则执行步骤（5）。<br>（4）如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图2.2所示。<br>（5）如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。 而当前线程便尝试使用自旋来获取锁，自旋就是为了不让线程阻塞，而采用循环去获取锁的过程。</p>
<span id="more"></span>

<h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>　　引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销操作的性能损耗必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</p>
<h3 id="偏向锁获取过程："><a href="#偏向锁获取过程：" class="headerlink" title="偏向锁获取过程："></a>偏向锁获取过程：</h3><p>　　（1）访问Mark Word中偏向锁的标识是否设置成1，锁标志位是否为01——确认为可偏向状态。<br>　　（2）如果为可偏向状态，则测试线程ID是否指向当前线程，如果是，进入步骤（5），否则进入步骤（3）。<br>　　（3）如果线程ID并未指向当前线程，则通过CAS操作竞争锁。如果竞争成功，则将Mark Word中线程ID设置为当前线程ID，然后执行（5）；如果竞争失败，执行（4）。<br>　　（4）如果CAS获取偏向锁失败，则表示有竞争。当到达全局安全点（safepoint）时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码。<br>　　（5）执行同步代码。</p>
<h3 id="偏向锁的释放："><a href="#偏向锁的释放：" class="headerlink" title="偏向锁的释放："></a>偏向锁的释放：</h3><p>　　偏向锁的撤销在上述第四步骤中有提到。偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动去释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态，撤销偏向锁后恢复到未锁定（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
<p>JVM一般是这样使用锁和Mark Word的：</p>
<p>1，当没有被当成锁时，这就是一个普通的对象，Mark Word记录对象的HashCode，锁标志位是01，是否偏向锁那一位是0。</p>
<p>2，当对象被当做同步锁并有一个线程A抢到了锁时，锁标志位还是01，但是否偏向锁那一位改成1，前23bit记录抢到锁的线程id，表示进入偏向锁状态。</p>
<p>3，当线程A再次试图来获得锁时，JVM发现同步锁对象的标志位是01，是否偏向锁是1，也就是偏向状态，Mark Word中记录的线程id就是线程A自己的id，表示线程A已经获得了这个偏向锁，可以执行同步锁的代码。</p>
<p>4，当线程B试图获得这个锁时，JVM发现同步锁处于偏向状态，但是Mark Word中的线程id记录的不是B，那么线程B会先用CAS操作试图获得锁，这里的获得锁操作是有可能成功的，因为线程A一般不会自动释放偏向锁。如果抢锁成功，就把Mark Word里的线程id改为线程B的id，代表线程B获得了这个偏向锁，可以执行同步锁代码。如果抢锁失败，则继续执行步骤5。</p>
<p>5，偏向锁状态抢锁失败，代表当前锁有一定的竞争，偏向锁将升级为轻量级锁。JVM会在当前线程的线程栈中开辟一块单独的空间，里面保存指向对象锁Mark Word的指针，同时在对象锁Mark Word中保存指向这片空间的指针。上述两个保存操作都是CAS操作，如果保存成功，代表线程抢到了同步锁，就把Mark Word中的锁标志位改成00，可以执行同步锁代码。如果保存失败，表示抢锁失败，竞争太激烈，继续执行步骤6。</p>
<p>6，轻量级锁抢锁失败，JVM会使用自旋锁，自旋锁不是一个锁状态，只是代表不断的重试，尝试抢锁。从JDK1.7开始，自旋锁默认启用，自旋次数由JVM决定。如果抢锁成功则执行同步锁代码，如果失败则继续执行步骤7。</p>
<p>7，自旋锁重试之后如果抢锁依然失败，同步锁会升级至重量级锁，锁标志位改为10。在这个状态下，未抢到锁的线程都会被阻塞。</p>
<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xrZm9yY2UvYXJ0aWNsZS9kZXRhaWxzLzgxMTI4MTE1">https://blog.csdn.net/lkforce/article/details/81128115<i class="fa fa-external-link-alt"></i></span> </p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Repost</tag>
        <tag>Synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>UML 类图几种关系的总结</title>
    <url>/2020/07/28/java/uml/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>最近整理书签，将部分文章转载至自己博客防止 404。</p>
</blockquote>
<p>   在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p>
<span id="more"></span>

<p> <strong>1.</strong> <strong>泛化（Generalization）</strong></p>
<p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p>
<p>【箭头指向】：带三角箭头的实线，箭头指向父类</p>
<p><img data-src="/assets/picture/uml/900108d926dabbb3bfca68a6aa88b95d.png" alt="UML"> </p>
<p><strong>2.</strong> <strong>实现（Realization）</strong></p>
<p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p>
<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>
<p><img data-src="/assets/picture/uml/1b1985740c8e6c1690c11177de137226.png" alt="UML"> </p>
<p><strong>3.</strong> <strong>关联（Association)</strong></p>
<p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>
<p><img data-src="/assets/picture/uml/3934bfda9de5f29d1bded35127d178eb.png" alt="UML"> </p>
<p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 </p>
<p>下图为自身关联： </p>
<p><img data-src="/assets/picture/uml/f3d24b1f32bd7b7156e6f24bad64d84f.png" alt="UML"></p>
<p><strong>4.</strong> <strong>聚合（Aggregation）</strong></p>
<p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p>
<p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>
<p><img data-src="/assets/picture/uml/8ea319b2fb1b2c5c045ad4eb355044f3.png" alt="UML"> </p>
<p><strong>5.</strong> <strong>组合(Composition)</strong></p>
<p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p>
<p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>
<p><img data-src="/assets/picture/uml/150c52602095d9e9ec86dc9b543d4e86.png" alt="UML"></p>
<p><strong>6.</strong> <strong>依赖(Dependency)</strong></p>
<p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p>
<p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p>
<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>
<p><img data-src="/assets/picture/uml/f1dcd7b4a1f2eeee05673b0d326815cf.png" alt="UML"> </p>
<p>各种关系的强弱顺序：</p>
<p><strong>泛化</strong> <strong>=</strong> <strong>实现</strong> <strong>&gt;</strong> <strong>组合</strong> <strong>&gt;</strong> <strong>聚合</strong> <strong>&gt;</strong> <strong>关联</strong> <strong>&gt;</strong> <strong>依赖</strong> </p>
<p>下面这张UML图，比较形象地展示了各种类图关系：</p>
<p><img data-src="/assets/picture/uml/cf62a8399306b370875cfbcb51b92fb3.png" alt="UML"></p>
<p>转自：<span class="exturl" data-url="aHR0cHM6Ly93d3cub3Blbi1vcGVuLmNvbS9saWIvdmlldy9vcGVuMTMyODA1OTcwMDMxMS5odG1s">https://www.open-open.com/lib/view/open1328059700311.html<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>转载</category>
        <category>UML</category>
      </categories>
      <tags>
        <tag>Repost</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>web.xml 头</title>
    <url>/2016/10/21/java/web-xml/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>以前记录的笔记，当年还是需要拷贝 xml 文件的时代。留做纪念。</p>
<p><code>web.xml</code> 头</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> <span class="attr">xmlns:javaee</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:web</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xmlns:web</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>var、let、const 区别</title>
    <url>/2020/11/26/javascript/var-let-const/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>前言：随着2015年6月 ECMAScript 6.0 发布以来，有几个新的变量声明方式进入前端开发者的视线，即 let、const、import 和 class 命令，而这些新的声明方式之中有两个容易和 var 混淆，那就是 let 和 const。那这两个新的声明方式和我们之前使用的 var 声明方式有什么不同呢，那么是什么原因导致 ES6 推崇新的声明方式摒弃传统的声明方式呢，让我们通过这篇文章一探究竟。</p>
</blockquote>
<span id="more"></span>

<h3 id="简单介绍："><a href="#简单介绍：" class="headerlink" title="简单介绍："></a>简单介绍：</h3><p><code>let</code> 的用法类似于 <code>var</code>，但是 <code>let</code> 只在所在的代码块内有效，所以我们一般使用 <code>let</code> 替代 <code>var</code>。而 <code>const</code> 用来声明常量。</p>
<p>让我们先看一看这张表：</p>
<table>
<thead>
<tr>
<th align="center">声明方式</th>
<th align="center">变量提升</th>
<th align="center">暂时性死区</th>
<th align="center">重复声明</th>
<th align="center">初始值</th>
<th align="center">作用域</th>
</tr>
</thead>
<tbody><tr>
<td align="center">var</td>
<td align="center">允许</td>
<td align="center">不存在</td>
<td align="center">允许</td>
<td align="center">不需要</td>
<td align="center">除块级</td>
</tr>
<tr>
<td align="center">let</td>
<td align="center">不允许</td>
<td align="center">存在</td>
<td align="center">不允许</td>
<td align="center">不需要</td>
<td align="center">块级</td>
</tr>
<tr>
<td align="center">const</td>
<td align="center">不允许</td>
<td align="center">存在</td>
<td align="center">不允许</td>
<td align="center">需要</td>
<td align="center">块级</td>
</tr>
</tbody></table>
<p>接下来我们根据这几个方面来介绍 var、let和const的区别：变量提升、暂时性死区、重复声明、初始值和作用域。</p>
<h3 id="一、变量提升"><a href="#一、变量提升" class="headerlink" title="一、变量提升"></a>一、变量提升</h3><p>概述：变量可在声明之前使用。</p>
<p>首先看这三段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//正常运行，控制台输出 undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">复制代码</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//报错，Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">复制代码</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//报错，Uncaught ReferenceError: c is not defined</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>var</code> 命令经常会发生<strong>变量提升</strong>现象，按照一般逻辑，变量应该在声明之后使用才对。为了纠正这个现象，ES6 规定 <code>let</code> 和 <code>const</code> 命令<strong>不发生变量提升</strong>，使用 <code>let</code> 和 <code>const</code> 命令声明变量之前，该变量是不可用的。主要是为了减少运行时错误，防止变量声明前就使用这个变量，从而导致意料之外的行为。</p>
<h3 id="二、暂时性死区"><a href="#二、暂时性死区" class="headerlink" title="二、暂时性死区"></a>二、暂时性死区</h3><p>概述：如果在代码块中存在 <code>let</code> 或 <code>const</code> 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	tmp = <span class="string">&#x27;abc&#x27;</span>;<span class="comment">//报错，Uncaught ReferenceError: tmp is not defined</span></span><br><span class="line">	<span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>这段代码的原意是在 if 内定义外部的 <code>tmp</code> 为 ‘abc’。</p>
<p>但现实是，存在全局变量 <code>tmp</code>，但是块级作用域内 <code>let</code> 又声明了一个 <code>tmp</code>变量，导致后者被绑定在这个块级作用域中，所以在 <code>let</code> 声明变量前，对 <code>tmp</code> 赋值就报错了。</p>
<h3 id="三、重复声明"><a href="#三、重复声明" class="headerlink" title="三、重复声明"></a>三、重复声明</h3><p>概述：指在相同作用域内，重复声明同一个变量。</p>
<p><code>let</code> 和 <code>const</code> 命令声明的变量不允许重复声明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">// 报错，Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line">  <span class="keyword">var</span> PI = <span class="number">3</span>;<span class="comment">// 报错，Uncaught SyntaxError: Identifier &#x27;PI&#x27; has already been declared</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当调用func()时报错，Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;<span class="comment">// 报错，Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line">  <span class="keyword">const</span> PI = <span class="number">3</span>;<span class="comment">// 报错，Uncaught SyntaxError: Identifier &#x27;PI&#x27; has already been declared</span></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>var</code> 是允许重复定义的，而这又会给我们带来什么麻烦呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">// 输出 5</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>对于学习过静态（类型）语言的人知道，这段代码要是替换成 c 语言或其他静态语言，输出的结果应该是 10。然而对于 javascript 来说，这段代码的输出结果是 5。因为 <code>var</code> 命令没有块级作用域，所以 for 循环括号内的变量 <code>i</code> 会覆盖外层 <code>i</code>，而且 <code>var</code> 允许重复声明，所以这段代码中 <code>i</code> 被声明了两次,<code>i</code> 的最终结果就被 for 循环的 i 给覆盖了。</p>
<h3 id="四、初始值"><a href="#四、初始值" class="headerlink" title="四、初始值"></a>四、初始值</h3><p>由于 <code>const</code> 声明的是只读的常量，一旦声明，就必须立即初始化，声明之后值不能改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI = <span class="number">3</span>;<span class="comment">// 报错，Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="五、作用域"><a href="#五、作用域" class="headerlink" title="五、作用域"></a>五、作用域</h3><p>在 ES5 中只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p>
<p>第一种场景，内层变量可能会覆盖外层变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//处于全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp);<span class="comment">//处于函数作用域</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// undefined</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。</p>
<p>然而现实是在这段代码中，function 内部的2个 <code>tmp</code> 变量处在同一函数作用域，由于变量提升，导致函数作用域中的 <code>tmp</code> 覆盖全局作用域中的 <code>tmp</code>，所以，f()输出结果为undefined。</p>
<p>第二种场景，用来计数的循环变量泄露为全局变量（前面在重复声明中提到的）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">// 输出 5</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>
<h3 id="tip"><a href="#tip" class="headerlink" title="tip:"></a>tip:</h3><blockquote>
<p>对于复合类型的变量，如数组和对象，变量名不指向数据，而是指向数据所在的地址。const 命令只是保证变量名指向的地址不变，并不保证该地址的数据不变。</p>
<p>例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">a</span>:<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//重新赋值当然是行不通的了</span></span><br><span class="line">a = &#123;<span class="attr">a</span>:<span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//可以这么赋值，不推荐</span></span><br><span class="line">a.a = <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzA0MTg5OTkyOTcz">https://juejin.cn/post/6844903704189992973<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>转载</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>/bin/bash和/bin/sh的区别</title>
    <url>/2020/08/26/linux/bin-bash-bin-sh-different/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>脚本test.sh内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">source</span> pcy.sh <span class="comment">#pcy.sh并不存在</span></span><br><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure>

<p>执行./test.sh，屏幕输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./test.sh: line 2: pcy.sh: No such file or directory</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>由此可见，在<code>#!/bin/sh</code>的情况下，source不成功，<strong>不会运行</strong>source后面的代码。<br> 修改test.sh脚本的第一行，变为<code>#!/bin/bash</code>，再次执行./test.sh，屏幕输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./test.sh: line 2: pcy.sh: No such file or directory</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>由此可见，在<code>#!/bin/bash</code>的情况下，虽然source不成功，但是还是运行了source后面的echo语句。<br> 但是紧接着我又试着运行了一下<code>sh ./test.sh</code>，这次屏幕输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./test.sh: line 2: pcy.sh: No such file or directory</span><br></pre></td></tr></table></figure>

<p>表示虽然脚本中指定了#!/bin/bash，但是如果使用sh 方式运行，如果source不成功，也不会运行source后面的代码。</p>
<p>为什么会有这样的区别呢？</p>
<ol>
<li>sh一般设成bash的软链</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[work<span class="variable">@zjm</span>-testing-app46 cy]<span class="variable">$ </span>ll /bin/sh</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">4</span> Nov <span class="number">13</span> <span class="number">2006</span> /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure>

<ol>
<li>在一般的linux系统当中（如redhat），使用sh调用执行脚本相当于打开了bash的POSIX标准模式</li>
<li>也就是说 /bin/sh 相当于 /bin/bash –posix</li>
</ol>
<p>所以，sh跟bash的区别，实际上就是bash有没有开启posix模式的区别</p>
<p>so，可以预想的是，如果第一行写成 #!/bin/bash –posix，那么脚本执行效果跟#!/bin/sh是一样的（遵循posix的特定规范，有可能就包括这样的规范：“当某行代码出错时，不继续往下解释”）</p>
<p>其它解释</p>
<p>等等,  这里就完了吗? 这里有更明确的说法</p>
<p>在<code>CentOS</code>里，/bin/sh是一个指向/bin/bash的符号链接: (只是在 CentOS 里哦)</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@centosraw ~</span>]<span class="meta"># ls -l /bin/*sh</span></span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">903272</span> Feb <span class="number">22</span> <span class="number">05</span>:<span class="number">09</span> /bin/bash</span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">106216</span> Oct <span class="number">17</span>  <span class="number">2012</span> /bin/dash</span><br><span class="line">lrwxrwxrwx. <span class="number">1</span> root root      <span class="number">4</span> Mar <span class="number">22</span> <span class="number">10</span>:<span class="number">22</span> /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure>

<p><strong>但在Mac OS上不是</strong>，/bin/sh和/bin/bash是两个<strong>不同</strong>的文件，尽管它们的大小只相差100字节左右:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">iMac:</span>~ wuxiao<span class="variable">$ </span>ls -l /bin/*sh</span><br><span class="line">-r-xr-xr-x  <span class="number">1</span> root  wheel  <span class="number">1371648</span>  <span class="number">6</span> Nov <span class="number">16</span><span class="symbol">:</span><span class="number">52</span> /bin/bash</span><br><span class="line">-rwxr-xr-x  <span class="number">2</span> root  wheel   <span class="number">772992</span>  <span class="number">6</span> Nov <span class="number">16</span><span class="symbol">:</span><span class="number">52</span> /bin/csh</span><br><span class="line">-r-xr-xr-x  <span class="number">1</span> root  wheel  <span class="number">2180736</span>  <span class="number">6</span> Nov <span class="number">16</span><span class="symbol">:</span><span class="number">52</span> /bin/ksh</span><br><span class="line">-r-xr-xr-x  <span class="number">1</span> root  wheel  <span class="number">1371712</span>  <span class="number">6</span> Nov <span class="number">16</span><span class="symbol">:</span><span class="number">52</span> /bin/sh</span><br><span class="line">-rwxr-xr-x  <span class="number">2</span> root  wheel   <span class="number">772992</span>  <span class="number">6</span> Nov <span class="number">16</span><span class="symbol">:</span><span class="number">52</span> /bin/tcsh</span><br><span class="line">-rwxr-xr-x  <span class="number">1</span> root  wheel  <span class="number">1103984</span>  <span class="number">6</span> Nov <span class="number">16</span><span class="symbol">:</span><span class="number">52</span> /bin/zsh</span><br></pre></td></tr></table></figure>



<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zNjUyYmEzNjJmZTM=">https://www.jianshu.com/p/3652ba362fe3<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>转载</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 acme 生成免费的 Https 证书</title>
    <url>/2020/12/31/linux/https-acme/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天介绍一个能自动从 Let’s Encrypt 颁发和续订免费证书的工具。</p>
<p>项目 Gitlab 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FjbWVzaC1vZmZpY2lhbC9hY21lLnNo">https://github.com/acmesh-official/acme.sh<i class="fa fa-external-link-alt"></i></span></p>
<p>首先需要有一个可访问的域名，并且将域名解析至对应的服务器地址。</p>
<span id="more"></span>

<h2 id="第一步：安装"><a href="#第一步：安装" class="headerlink" title="第一步：安装"></a>第一步：安装</h2><p>在 Linux 服务器上执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O -  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p>或者从 github 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/acmesh-official/acme.sh.git</span><br><span class="line"><span class="built_in">cd</span> ./acme.sh</span><br><span class="line">./acme.sh --install</span><br></pre></td></tr></table></figure>

<h2 id="第二步：生成证书。"><a href="#第二步：生成证书。" class="headerlink" title="第二步：生成证书。"></a>第二步：生成证书。</h2><p>如果提示端口占用，可以先停掉占用端口的服务。</p>
<p>单域名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue -d example.com --standalone</span><br></pre></td></tr></table></figure>

<p>多域名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d example.com -d www.example.com --standalone</span><br></pre></td></tr></table></figure>

<p>如果输出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@zhuo:~# acme.sh  --issue -d example.com --standalone</span><br><span class="line">[Mon 09 Nov 2020 07:00:28 PM CST] Using CA: https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">[Mon 09 Nov 2020 07:00:28 PM CST] Please install socat tools first.</span><br><span class="line">[Mon 09 Nov 2020 07:00:28 PM CST] _on_before_issue.</span><br></pre></td></tr></table></figure>

<p>则需要先安装 Socat</p>
<p>Socat 是 Linux 下的一个多功能的网络工具，名字来由是 「Socket CAT」。其功能与有瑞士军刀之称的 Netcat 类似，可以看做是 Netcat 的加强版。</p>
<p>Socat 的主要特点就是在两个数据流之间建立通道，且支持众多协议和链接方式。如 IP、TCP、 UDP、IPv6、PIPE、EXEC、System、Open、Proxy、Openssl、Socket等。</p>
<p>Socat 的官方网站：<span class="exturl" data-url="aHR0cDovL3d3dy5kZXN0LXVucmVhY2gub3JnL3NvY2F0Lw==">http://www.dest-unreach.org/socat/<i class="fa fa-external-link-alt"></i></span></p>
<p>安装命令：</p>
<p>Centos</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y socat</span><br></pre></td></tr></table></figure>

<p>Debian/Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install -y socat</span><br></pre></td></tr></table></figure>

<p>安装完 Socat，再次执行命令生成证书</p>
<p>生成成功，输出内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@zhuo:~/.acme.sh<span class="comment"># acme.sh --issue -d example.com -d www.example.com --standalone</span></span><br><span class="line">[Mon 28 Dec 2020 02:37:29 PM CST] Using CA: https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">[Mon 28 Dec 2020 02:37:29 PM CST] Standalone mode.</span><br><span class="line">[Mon 28 Dec 2020 02:37:29 PM CST] Standalone mode.</span><br><span class="line">[Mon 28 Dec 2020 02:37:29 PM CST] Multi domain=<span class="string">&#x27;DNS:example.com,DNS:www.example.com&#x27;</span></span><br><span class="line">[Mon 28 Dec 2020 02:37:29 PM CST] Getting domain auth token <span class="keyword">for</span> each domain</span><br><span class="line">[Mon 28 Dec 2020 02:37:38 PM CST] Getting webroot <span class="keyword">for</span> domain=<span class="string">&#x27;example.com&#x27;</span></span><br><span class="line">[Mon 28 Dec 2020 02:37:38 PM CST] Getting webroot <span class="keyword">for</span> domain=<span class="string">&#x27;www.example.com&#x27;</span></span><br><span class="line">[Mon 28 Dec 2020 02:37:38 PM CST] Verifying: example.com</span><br><span class="line">[Mon 28 Dec 2020 02:37:38 PM CST] Standalone mode server</span><br><span class="line">[Mon 28 Dec 2020 02:37:44 PM CST] Success</span><br><span class="line">[Mon 28 Dec 2020 02:37:44 PM CST] Verifying: www.example.com</span><br><span class="line">[Mon 28 Dec 2020 02:37:44 PM CST] Standalone mode server</span><br><span class="line">[Mon 28 Dec 2020 02:37:50 PM CST] Success</span><br><span class="line">[Mon 28 Dec 2020 02:37:50 PM CST] Verify finished, start to sign.</span><br><span class="line">[Mon 28 Dec 2020 02:37:50 PM CST] Lets finalize the order.</span><br><span class="line">[Mon 28 Dec 2020 02:37:50 PM CST] Le_OrderFinalize=<span class="string">&#x27;https://acme-v02.api.letsencrypt.org/acme/finalize/96543253/2321987136&#x27;</span></span><br><span class="line">[Mon 28 Dec 2020 02:37:53 PM CST] Downloading cert.</span><br><span class="line">[Mon 28 Dec 2020 02:37:53 PM CST] Le_LinkCert=<span class="string">&#x27;https://acme-v02.api.letsencrypt.org/acme/cert/036a2607576c7cb654f34601cc2285245d38&#x27;</span></span><br><span class="line">[Mon 28 Dec 2020 02:37:55 PM CST] Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIFTzCCBDegAwIBAgISA2omB1dsfLVi9icBzCKFJF04MA0GCSqGSIb3DQEBCwUA</span><br><span class="line">...</span><br><span class="line">WoM6llNhcgSwsCy+8SMLJy6XuysA4g8MV+nv5oaxBUgXDbGCiAZrSdWRwPai+vi4</span><br><span class="line">vYG+xYjCq7tgswkLAz6uukTSPw==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[Mon 28 Dec 2020 02:37:55 PM CST] Your cert is <span class="keyword">in</span>  /root/.acme.sh/example.com/example.com.cer</span><br><span class="line">[Mon 28 Dec 2020 02:37:55 PM CST] Your cert key is <span class="keyword">in</span>  /root/.acme.sh/example.com/example.com.key</span><br><span class="line">[Mon 28 Dec 2020 02:37:55 PM CST] The intermediate CA cert is <span class="keyword">in</span>  /root/.acme.sh/example.com/ca.cer</span><br><span class="line">[Mon 28 Dec 2020 02:37:55 PM CST] And the full chain certs is there:  /root/.acme.sh/example.com/fullchain.cer</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出信息中包含了证书路径。</p>
<h2 id="第三步：配置-nginx"><a href="#第三步：配置-nginx" class="headerlink" title="第三步：配置 nginx"></a>第三步：配置 nginx</h2><p>将证书拷贝至 nginx 对应的目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /root/.acme.sh/example.com/example.com.key /usr/<span class="built_in">local</span>/nginx/ssl/example.com.key</span><br><span class="line">cp /root/.acme.sh/example.com/fullchain.cer /usr/<span class="built_in">local</span>/nginx/ssl/fullchain.cer</span><br></pre></td></tr></table></figure>

<p>在配置文件 nginx.conf  中的 server 节点新增如下配置，证书路径需改为你自己的证书路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ssl on;</span><br><span class="line"> ssl_certificate /usr/local/nginx/ssl/fullchain.cer;</span><br><span class="line"> ssl_certificate_key /usr/local/nginx/ssl/example.com.key;</span><br></pre></td></tr></table></figure>

<p>如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 443;</span><br><span class="line">     server_name example.com;</span><br><span class="line">	   ssl on;</span><br><span class="line">     ssl_certificate /usr/local/nginx/ssl/fullchain.cer;</span><br><span class="line">     ssl_certificate_key /usr/local/nginx/ssl/example.com.key;</span><br><span class="line">	   charset utf-8;</span><br><span class="line">     location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;  #访问路径，相当于 Tomcat 的 ROOT，这里自己配</span><br><span class="line">        index  index.html index.htm;   #访问 index</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四步：执行命令使配置生效"><a href="#第四步：执行命令使配置生效" class="headerlink" title="第四步：执行命令使配置生效"></a>第四步：执行命令使配置生效</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure>

<p>或直接重启 nginx 即可。</p>
<p>Https 证书到此配置完毕。</p>
<h2 id="证书过期-重新生成证书"><a href="#证书过期-重新生成证书" class="headerlink" title="证书过期,重新生成证书"></a>证书过期,重新生成证书</h2><p>如果提示端口占用，可以先停掉占用端口的服务。</p>
<p>单域名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh  --renew -d example.com</span><br></pre></td></tr></table></figure>

<p>多域名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d example.com -d www.example.com -d xxx.com</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@zhuo:/home/zhuo/nginx/ssl<span class="comment"># acme.sh --renew -d example.com -d www.example.com -d xxx.com</span></span><br><span class="line">[Thu 28 Jan 2021 12:16:29 PM CST] Renew: <span class="string">&#x27;example.com&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:16:31 PM CST] Using CA: https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">[Thu 28 Jan 2021 12:16:31 PM CST] Standalone mode.</span><br><span class="line">[Thu 28 Jan 2021 12:16:31 PM CST] Standalone mode.</span><br><span class="line">[Thu 28 Jan 2021 12:16:31 PM CST] Standalone mode.</span><br><span class="line">[Thu 28 Jan 2021 12:16:31 PM CST] Multi domain=<span class="string">&#x27;DNS:example.com,DNS:www.example.com,DNS:xxx.com&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:16:31 PM CST] Getting domain auth token <span class="keyword">for</span> each domain</span><br><span class="line">[Thu 28 Jan 2021 12:16:40 PM CST] Getting webroot <span class="keyword">for</span> domain=<span class="string">&#x27;example.com&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:16:40 PM CST] Getting webroot <span class="keyword">for</span> domain=<span class="string">&#x27;www.example.com&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:16:40 PM CST] Getting webroot <span class="keyword">for</span> domain=<span class="string">&#x27;xxx.com&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:16:40 PM CST] Verifying: example.com</span><br><span class="line">[Thu 28 Jan 2021 12:16:40 PM CST] Standalone mode server</span><br><span class="line">[Thu 28 Jan 2021 12:16:48 PM CST] Success</span><br><span class="line">[Thu 28 Jan 2021 12:16:48 PM CST] Verifying: www.example.com</span><br><span class="line">[Thu 28 Jan 2021 12:16:48 PM CST] Standalone mode server</span><br><span class="line">[Thu 28 Jan 2021 12:16:53 PM CST] Success</span><br><span class="line">[Thu 28 Jan 2021 12:16:53 PM CST] Verifying: xxx.com</span><br><span class="line">[Thu 28 Jan 2021 12:16:53 PM CST] Standalone mode server</span><br><span class="line">[Thu 28 Jan 2021 12:16:58 PM CST] Success</span><br><span class="line">[Thu 28 Jan 2021 12:16:58 PM CST] Verify finished, start to sign.</span><br><span class="line">[Thu 28 Jan 2021 12:16:58 PM CST] Lets finalize the order.</span><br><span class="line">[Thu 28 Jan 2021 12:16:58 PM CST] Le_OrderFinalize=<span class="string">&#x27;https://acme-v02.api.letsencrypt.org/acme/finalize/101291916/7567203492&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:17:00 PM CST] Downloading cert.</span><br><span class="line">[Thu 28 Jan 2021 12:17:00 PM CST] Le_LinkCert=<span class="string">&#x27;https://acme-v02.api.letsencrypt.org/acme/cert/030c0a4b859281221354841535ab7314ad2e&#x27;</span></span><br><span class="line">[Thu 28 Jan 2021 12:17:01 PM CST] Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIFejCCBGKgAwIBAgISAwwKS4WSgSITVIQVNatzFK0uMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">MDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD</span><br><span class="line">...</span><br><span class="line">B4kfqgGZDiAH94ffm/8mdk3pPFesqhEf0ew4ZI29WSNJaAYomoM38h9WG2OMunDN</span><br><span class="line">xGwTb6hqLB0zos29nd4VhDpgmujB+gnu+B/Dg4j4PWfi8rUx+f4PQCE98C/pfeQI</span><br><span class="line">r/JENs5VnKvTGYOD7sM=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[Thu 28 Jan 2021 12:17:01 PM CST] Your cert is <span class="keyword">in</span>  /root/.acme.sh/example.com/example.com.cer</span><br><span class="line">[Thu 28 Jan 2021 12:17:01 PM CST] Your cert key is <span class="keyword">in</span>  /root/.acme.sh/example.com/example.com.key</span><br><span class="line">[Thu 28 Jan 2021 12:17:01 PM CST] The intermediate CA cert is <span class="keyword">in</span>  /root/.acme.sh/example.com/ca.cer</span><br><span class="line">[Thu 28 Jan 2021 12:17:01 PM CST] And the full chain certs is there:  /root/.acme.sh/example.com/fullchain.cer</span><br><span class="line">root@zhuo:/home/zhuo/nginx/ssl<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h2 id="Acme-更新"><a href="#Acme-更新" class="headerlink" title="Acme 更新"></a>Acme 更新</h2><p>升级 acme.sh 到最新版 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Original</category>
        <category>https</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>HTTPS</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 上设置终端输出内容的颜色</title>
    <url>/2020/06/10/linux/terminal-linux-font-color/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>在 Linux 系统上，打开终端，一般默认的颜色是黑白。这样颜色比较单调，有时我们需要在终端上打印出一些提示语，需要使用不同的颜色，那怎么设置终端输出内容的颜色呢？本文将详细讲解</p>
</blockquote>
<h2 id="颜色控制原理-ANSI-转义序列"><a href="#颜色控制原理-ANSI-转义序列" class="headerlink" title="颜色控制原理 ANSI 转义序列"></a>颜色控制原理 ANSI 转义序列</h2><p>ANSI 转义序列是一种带内信号的转义序列标准，用于控制视频文本终端上的光标位置、颜色和其他选项。在文本中嵌入确定的字节序列，大部分以 **<code>ESC 转义字符</code><strong>和</strong><code>[</code>**字符开始，终端会把这些字节序列解释为相应的指令，而不是普通的字符编码。</p>
<p>终端颜色就是 ANSI 转义序列应用中的一个。</p>
<span id="more"></span>

<h3 id="ANSI-控制序列的组成"><a href="#ANSI-控制序列的组成" class="headerlink" title="ANSI 控制序列的组成"></a>ANSI 控制序列的组成</h3><p>ANSI 控制序列 三部分构成：前置引导， CSI 控制序列，结束符号<br><img data-src="/assets/picture/linux/ansi.png" alt="ansi"></p>
<h4 id="前置引导"><a href="#前置引导" class="headerlink" title="前置引导"></a>前置引导</h4><p>前置引导器就是由 <code>ESC</code> 的 ASCII 码值， 如**<code>\033</code>**，这告诉终端，这是个控制命令，终端就不会把这个引导符号后面的文本当字符串来解释。</p>
<p><code>ESC</code> 的转义符号有下面3个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">\033  // 推荐 八进制 ASCII</span><br><span class="line">\0x1b  // 推荐 十六进制 ASCII</span><br><span class="line">\e    // 有些shell下可以使用</span><br></pre></td></tr></table></figure>
<h4 id="CSI-控制序列"><a href="#CSI-控制序列" class="headerlink" title="CSI 控制序列"></a>CSI 控制序列</h4><p>这个 CSI 序列主要是控制输出样式的，比如颜色， 光标等……<br>这个控制命令是个 CSI 序列， 通常由 <code>;</code> 分割的指令， 通常指令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[&lt;PREFIX&gt;];[&lt;FONT COLOR&gt;];[&lt;BACKGROUND COLOR&gt;]</span><br><span class="line">PREFIX 可选参数：</span><br><span class="line">0 终端默认设置（黑底白字）</span><br><span class="line">1 高亮显示</span><br><span class="line">4 使用下划线</span><br><span class="line">5 闪烁</span><br><span class="line">7 反白显示</span><br><span class="line">8 不可见</span><br><span class="line"></span><br><span class="line">FONT COLOR 和 BACKGROUND COLOR 可选参数:</span><br><span class="line">字色 FONT COLOR  背景色 BACKGROUND COLOR   颜色</span><br><span class="line">------------------------------------------------</span><br><span class="line">   30                    40              黑色</span><br><span class="line">   31                    41              红色</span><br><span class="line">   32                    42              绿色</span><br><span class="line">   33                    43              黄色</span><br><span class="line">   34                    44              蓝色</span><br><span class="line">   35                    45              紫红色</span><br><span class="line">   36                    46              青蓝色</span><br><span class="line">   37                    47              白色</span><br></pre></td></tr></table></figure>
<h4 id="结束符号"><a href="#结束符号" class="headerlink" title="结束符号"></a>结束符号</h4><p>最后，<code>m</code> 表示控制序列的结尾，因此终端知道在 <code>m</code> 之后文本将不会解释为颜色。</p>
<p> Linux 终端打印一般使用 shell 命令中的 echo 和 printf。我们这里就使用 echo 来设置颜色</p>
<p> 来看一个例子：<br> <img data-src="/assets/picture/linux/echo.png" alt="echo"></p>
<p> 上图 <code>\033[0;31m 未输入操作名 \033[0m</code> 就是一个 ANSI 控制序列 ，将会呈现黑底红字的效果，在 CSI 与 其他组件之间并不需要空格,这 里的空格仅仅是为了方便阅读。<br> 末尾的<code>\033[0m</code> 将会清空样式, 由于 CSI 将会影响之后的所有输出, 如果不清空的话, 会导致之后的所有输出都具有此样式。<br> 第二条命令为末尾未添加 <code>\033[0m</code> 的效果</p>
<p> <code>&quot;\e[1;31;47m Hello World \e[0m&quot;</code>将会呈现为白底红字的效果如下：</p>
<p> <img data-src="/assets/picture/linux/1591843409714.png" alt="echo"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p>维基百科：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZQ==">https://en.wikipedia.org/wiki/ANSI_escape_code<i class="fa fa-external-link-alt"></i></span><br>简书：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83OTBmYzYxMmFhYTU=">https://www.jianshu.com/p/790fc612aaa5<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>Original</tag>
        <tag>Linux</tag>
        <tag>ANSI 转义序列</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 订制自己的项目模板</title>
    <url>/2019/05/31/maven/maven-archetype/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>Maven</code> 可以根据已有的项目模板来快速构建项目，避免重复的搭建相同的项目开发环境。</p>
<p>首先确保本地正确安装了 <code>JDK</code> 及 <code>Maven</code> </p>
<h5 id="自定义-archetype"><a href="#自定义-archetype" class="headerlink" title="自定义 archetype"></a>自定义 <code>archetype</code></h5><p>1、首先需要创建一个 <code>Maven</code> 项目，或者使用现有 <code>Maven</code> 项目，在项目根目录下执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn archetype:create-from-project</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>2、执行成功后，可以看到在项目多了一个 <code>target</code> 文件夹，目录如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">target</span></span><br><span class="line"><span class="string">|--</span> <span class="string">generated-sources</span></span><br><span class="line">    <span class="string">|--</span> <span class="string">archetype</span></span><br><span class="line">        <span class="string">|--</span> <span class="string">src</span></span><br><span class="line">            <span class="string">|--</span> <span class="string">main</span></span><br><span class="line">                <span class="string">|--</span> <span class="string">resources</span></span><br><span class="line">                    <span class="string">|--</span> <span class="string">archetype-resources</span></span><br><span class="line">                        <span class="string">|--</span> <span class="string">....</span></span><br><span class="line">                    <span class="string">|--</span> <span class="string">META-INF</span></span><br><span class="line">                        <span class="string">|--</span> <span class="string">maven</span></span><br><span class="line">                            <span class="string">|--</span> <span class="string">archetype-metadata.xml</span></span><br><span class="line">        <span class="string">|--</span> <span class="string">target</span></span><br><span class="line">                <span class="string">...</span></span><br><span class="line">        <span class="string">|--</span> <span class="string">pom.xml</span></span><br></pre></td></tr></table></figure>

<p>如果想生成干净的项目骨架，可进入 <code>src</code> 目录下删除不需要的文件及文件夹，并打开 <code>target\generated-sources\archetype\src\main\resources\META-INF\maven</code> 目录下的 <code>archetype-metadata.xml</code> 文件，将不需要的 <code>fileSet</code> 标签删除，文件内容大概长这个样子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">archetype-descriptor</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0 http://maven.apache.org/xsd/archetype-descriptor-1.1.0.xsd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;archetype-demo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;https://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">&quot;true&quot;</span> <span class="attr">packaged</span>=<span class="string">&quot;true&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">&quot;true&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archetype-descriptor</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、进入 <code>archetype</code> 目录下，执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>

<p>项目将会被安装到你所使用的 <code>maven</code> 的 <code>settings.xml</code> 中所指定的仓库下，自定义的 <code>archetype</code> 生成成功</p>
<h5 id="使用自定义-archetype-生成项目："><a href="#使用自定义-archetype-生成项目：" class="headerlink" title="使用自定义 archetype 生成项目："></a>使用自定义 <code>archetype</code> 生成项目：</h5><p>1、进入想将项目生成的目录位置， 打开 <code>cmd</code> 窗口，输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DarchetypeCatalog=local</span><br></pre></td></tr></table></figure>

<p>2、根据提示输入 <code>groupId</code> 、<code>artifactId</code>、<code>version</code>、<code>package</code> ， 回车，会再次提示确认，输入 <code>Y</code> 回车</p>
<p>大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Choose archetype:</span><br><span class="line">1: local -&gt; com.github.archetype:archetype-demo-archetype (archetype-d</span><br><span class="line">emo-archetype)</span><br><span class="line">Choose a number or apply filter (format: [groupId:]artifactId, case sensitive co</span><br><span class="line">ntains): : 1</span><br><span class="line">Define value for property &#x27;groupId&#x27;: com.baidu.io</span><br><span class="line">Define value for property &#x27;artifactId&#x27;: test-archetype</span><br><span class="line">Define value for property &#x27;version&#x27; 1.0-SNAPSHOT: : 0.0.1-SNAPSHOT</span><br><span class="line">Define value for property &#x27;package&#x27; com.baidu.io: :</span><br><span class="line">Confirm properties configuration:</span><br><span class="line">groupId: com.baidu.io</span><br><span class="line">artifactId: test-archetype</span><br><span class="line">version: 0.0.1-SNAPSHOT</span><br><span class="line">package: com.baidu.io</span><br><span class="line"> Y: : Y</span><br></pre></td></tr></table></figure>

<p>3、成功生成项目。</p>
]]></content>
      <categories>
        <category>原创</category>
        <category>教程</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 命令整理</title>
    <url>/2020/08/12/maven/maven-command/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="显示版本信息"><a href="#显示版本信息" class="headerlink" title="显示版本信息"></a>显示版本信息</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure>

<h3 id="打包-package"><a href="#打包-package" class="headerlink" title="打包 package"></a>打包 package</h3><p>根据项目生成 jar -&gt; 生成 target 目录,编译、测试代码,生成测试报告,生成 jar/war 文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="清除项目目录中的生成结果-clean"><a href="#清除项目目录中的生成结果-clean" class="headerlink" title="清除项目目录中的生成结果  clean"></a>清除项目目录中的生成结果  clean</h3><p>清除以前的包后重新打包 -&gt; 删除 target 目录</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure>

<h3 id="跳过单元测试-Dmaven-test-skip-true"><a href="#跳过单元测试-Dmaven-test-skip-true" class="headerlink" title="跳过单元测试 -Dmaven.test.skip=true"></a>跳过单元测试 -Dmaven.test.skip=true</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h3 id="实现多环境打包"><a href="#实现多环境打包" class="headerlink" title="实现多环境打包"></a>实现多环境打包</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn -P [profier] </span><br></pre></td></tr></table></figure>

<h3 id="清除以前的包后重新打包-跳过测试类"><a href="#清除以前的包后重新打包-跳过测试类" class="headerlink" title="清除以前的包后重新打包,跳过测试类"></a>清除以前的包后重新打包,跳过测试类</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h3 id="发包-deploy"><a href="#发包-deploy" class="headerlink" title="发包 deploy"></a>发包 deploy</h3><p>发布项目包 不执行单元测试</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean:clean deploy -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<p>发布项目包  使用 <code>new_test</code> 环境配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean:clean deploy -Pnew<span class="emphasis">_test -Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure>

<h3 id="打包后放入本地仓库-Install"><a href="#打包后放入本地仓库-Install" class="headerlink" title="打包后放入本地仓库 Install"></a>打包后放入本地仓库 Install</h3><p>mvn install 在本地 Repository 中安装 jar -&gt; 打包后放入本地仓库</p>
<p>项目发布到本地仓库  跳过单元测试</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean install -DskipTest=true</span><br></pre></td></tr></table></figure>

<p>安装本地 jar 同时发布源码及文档</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn source:jar javadoc:jar install</span><br></pre></td></tr></table></figure>

<p>项目发布到本地仓库，使用 new_test 环境，跳过单元测试</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn clean install -P new<span class="emphasis">_test -Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure>

<p>Install  Jar 到本地仓库</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=18.3 -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true -Dfile=/Users/zhuo/workspace/ojdbc8.jar</span><br></pre></td></tr></table></figure>

<p>Deploy  Jar 到私服</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=org.apache.thrift -DartifactId=libthrift -Dversion=1.12 -Dpackaging=jar -Dfile=D:\thrift-0.9.2.jar -Durl=http://ip:port/nexus/content/repositories/thirdparty/ -DrepositoryId=thirdparty</span><br></pre></td></tr></table></figure>

<h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn dependency:sources -DincludeArtifactIds=spring-boot</span><br></pre></td></tr></table></figure>

<h3 id="自动更新多模块项目子项目的版本"><a href="#自动更新多模块项目子项目的版本" class="headerlink" title="自动更新多模块项目子项目的版本"></a>自动更新多模块项目子项目的版本</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn -N versions:update-child-modules  </span><br></pre></td></tr></table></figure>

<p>或 </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn versions:set -DnewVersion=1.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure>

<h3 id="启动-jetty-服务"><a href="#启动-jetty-服务" class="headerlink" title="启动 jetty 服务"></a>启动 jetty 服务</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn jetty:run</span><br></pre></td></tr></table></figure>

<h3 id="启动-tomcat-服务"><a href="#启动-tomcat-服务" class="headerlink" title="启动 tomcat 服务"></a>启动 tomcat 服务</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn tomcat:run</span><br></pre></td></tr></table></figure>

<h3 id="验证工程是否正确-所有需要的资源是否可用。"><a href="#验证工程是否正确-所有需要的资源是否可用。" class="headerlink" title="验证工程是否正确,所有需要的资源是否可用。"></a>验证工程是否正确,所有需要的资源是否可用。</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn validate</span><br></pre></td></tr></table></figure>

<h3 id="打印出所有的-Java-系统属性和环境变量"><a href="#打印出所有的-Java-系统属性和环境变量" class="headerlink" title="打印出所有的 Java 系统属性和环境变量"></a>打印出所有的 Java 系统属性和环境变量</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn help:system</span><br></pre></td></tr></table></figure>
<h3 id="依赖关系查询"><a href="#依赖关系查询" class="headerlink" title="依赖关系查询"></a>依赖关系查询</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn dependency:tree</span><br><span class="line">mvn dependency:analyze</span><br><span class="line">mvn dependency:list</span><br></pre></td></tr></table></figure>

<h3 id="eclipse-相关"><a href="#eclipse-相关" class="headerlink" title="eclipse 相关"></a>eclipse 相关</h3><p>生成 eclipse 项目文件 (.project, .classpath, .settings)</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn eclipse:eclipse</span><br></pre></td></tr></table></figure>

<p>删除项目信息 (.project, .classpath)</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn eclipse:clean</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 Maven 插件介绍</title>
    <url>/2019/08/08/maven/maven-plugin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="常用-Maven-插件介绍"><a href="#常用-Maven-插件介绍" class="headerlink" title="常用 Maven 插件介绍"></a>常用 Maven 插件介绍</h1><p>我们都知道 Maven 本质上是一个插件框架，它的核心并不执行任何具体的构建任务，所有 这些任务都交给插件来完成，例如编译源代码是由 <code>maven- compiler-plugin</code> 完成的。进一步说，每个任务对应了一个插件目标（goal），每个插件会有一个或者多个目标，例如 <code>maven- compiler-plugin</code> 的 compile 目标用来编译位于<code>src/main/java/</code>目录下的主源码，testCompile 目标用来编译位于<code>src/test/java/</code>目录下的测试源码。</p>
<p>用户可以通过两种方式调用 Maven 插件目标。第一种方式是将插件目标与生命周期阶段（lifecycle phase）绑定，这样用户在命令行只是输入生命周期阶段而已，例如 Maven 默认将 maven-compiler-plugin 的 compile 目标与 compile 生命周期阶段绑定，因此命令 <strong>mvn compile</strong> 实际上是先定位到 compile 这一生命周期阶段，然后再根据绑定关系调用 maven-compiler-plugin 的 compile 目标。第二种方式是直接在命令行指定要执行的插件目标，例如 <strong>mvn archetype:generate</strong> 就表示调用 maven-archetype-plugin 的 generate 目标，这种带冒号的调用方式与生命周期无关。</p>
<span id="more"></span>
<p>认识上述 Maven 插件的基本概念能帮助你理解 Maven 的工作机制，不过要想更高效率地使用 Maven，了解一些常用的插件还是很有必要的，这可 以帮助你避免一不小心重新发明轮子。多年来 Maven 社区积累了大量的经验，并随之形成了一个成熟的插件生态圈。Maven 官方有两个插件列表，第一个列 表的 GroupId 为 org.apache.maven.plugins，这里的插件最为成熟，具体地址为：<span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9pbmRleC5odG1s">http://maven.apache.org/plugins/index.html<i class="fa fa-external-link-alt"></i></span>。第二个列表的 GroupId 为 org.codehaus.mojo，这里的插件没有那么核心，但也有不少十分有用，其地址为：<span class="exturl" data-url="aHR0cDovL21vam8uY29kZWhhdXMub3JnL3BsdWdpbnMuaHRtbA==">http://mojo.codehaus.org/plugins.html<i class="fa fa-external-link-alt"></i></span>。</p>
<p>接下来笔者根据自己的经验介绍一些最常用的 Maven 插件，在不同的环境下它们各自都有其出色的表现，熟练地使用它们能让你的日常构建工作事半功倍。</p>
<h2 id="maven-antrun-plugin"><a href="#maven-antrun-plugin" class="headerlink" title="maven-antrun-plugin"></a>maven-antrun-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1hbnRydW4tcGx1Z2luLw==">http://maven.apache.org/plugins/maven-antrun-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>maven-antrun-plugin 能让用户在 Maven 项目中运行 Ant 任务。用户可以直接在该插件的配置以 Ant 的方式编写 Target， 然后交给该插件的 run 目标去执行。在一些由 Ant 往 Maven 迁移的项目中，该插件尤其有用。此外当你发现需要编写一些自定义程度很高的任务，同时又觉 得 Maven 不够灵活时，也可以以 Ant 的方式实现之。maven-antrun-plugin 的 run 目标通常与生命周期绑定运行。</p>
<h2 id="maven-archetype-plugin"><a href="#maven-archetype-plugin" class="headerlink" title="maven-archetype-plugin"></a>maven-archetype-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvYXJjaGV0eXBlL21hdmVuLWFyY2hldHlwZS1wbHVnaW4v">http://maven.apache.org/archetype/maven-archetype-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>Archtype 指项目的骨架，Maven 初学者最开始执行的 Maven 命令可能就是<strong>mvn archetype:generate</strong>，这实际上就是让 maven-archetype-plugin 生成一个很简单的项目骨架，帮助开发者快速上手。可能也有人看到一些文档写了 <strong>mvn archetype:create</strong>， 但实际上 create 目标已经被弃用了，取而代之的是 generate 目标，该目标使用交互式的方式提示用户输入必要的信息以创建项目，体验更好。 maven-archetype-plugin 还有一些其他目标帮助用户自己定义项目原型，例如你由一个产品需要交付给很多客户进行二次开发，你就可以为 他们提供一个 Archtype，帮助他们快速上手。</p>
<h2 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1hc3NlbWJseS1wbHVnaW4v">http://maven.apache.org/plugins/maven-assembly-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>maven-assembly-plugin 的用途是制作项目分发包，该分发包可能包含了项目的可执行文件、源代码、readme、平台脚本等等。 maven-assembly-plugin 支持各种主流的格式如 zip、tar.gz、jar 和 war 等，具体打包哪些文件是高度可控的，例如用户可以 按文件级别的粒度、文件集级别的粒度、模块级别的粒度、以及依赖级别的粒度控制打包，此外，包含和排除配置也是支持的。maven-assembly- plugin 要求用户使用一个名为<code>assembly.xml</code>的元数据文件来表述打包，它的 single 目标可以直接在命令行调用，也可以被绑定至生命周期。</p>
<h2 id="maven-dependency-plugin"><a href="#maven-dependency-plugin" class="headerlink" title="maven-dependency-plugin"></a>maven-dependency-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1kZXBlbmRlbmN5LXBsdWdpbi8=">http://maven.apache.org/plugins/maven-dependency-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>maven-dependency-plugin 最大的用途是帮助分析项目依赖，<strong>dependency:list</strong>能够列出项目最终解析到的依赖列表，<strong>dependency:tree</strong>能进一步的描绘项目依赖树，<strong>dependency:analyze</strong>可以告诉你项目依赖潜在的问题，如果你有直接使用到的却未声明的依赖，该目标就会发出警告。maven-dependency-plugin 还有很多目标帮助你操作依赖文件，例如<strong>dependency:copy-dependencies</strong>能将项目依赖从本地 Maven 仓库复制到某个特定的文件夹下面。</p>
<h2 id="maven-enforcer-plugin"><a href="#maven-enforcer-plugin" class="headerlink" title="maven-enforcer-plugin"></a>maven-enforcer-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1lbmZvcmNlci1wbHVnaW4v">http://maven.apache.org/plugins/maven-enforcer-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>在一个稍大一点的组织或团队中，你无法保证所有成员都熟悉 Maven，那他们做一些比较愚蠢的事情就会变得很正常，例如给项目引入了外部的 SNAPSHOT 依赖而导致构建不稳定，使用了一个与大家不一致的 Maven 版本而经常抱怨构建出现诡异问题。maven-enforcer- plugin 能够帮助你避免之类问题，它允许你创建一系列规则强制大家遵守，包括设定 Java 版本、设定 Maven 版本、禁止某些依赖、禁止 SNAPSHOT 依赖。只要在一个父 POM 配置规则，然后让大家继承，当规则遭到破坏的时候，Maven 就会报错。除了标准的规则之外，你还可以扩展该插 件，编写自己的规则。maven-enforcer-plugin 的 enforce 目标负责检查规则，它默认绑定到生命周期的 validate 阶段。</p>
<h2 id="maven-help-plugin"><a href="#maven-help-plugin" class="headerlink" title="maven-help-plugin"></a>maven-help-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1oZWxwLXBsdWdpbi8=">http://maven.apache.org/plugins/maven-help-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>maven-help-plugin 是一个小巧的辅助工具，最简单的<strong>help:system</strong>可以打印所有可用的环境变量和 Java 系统属性。<strong>help:effective-pom</strong>和<strong>help:effective-settings</strong>最 为有用，它们分别打印项目的有效 POM 和有效 settings，有效 POM 是指合并了所有父 POM（包括 Super POM）后的 XML，当你不确定 POM 的某些信息从何而来时，就可以查看有效 POM。有效 settings 同理，特别是当你发现自己配置的 settings.xml 没有生效时，就可以用<strong>help:effective-settings</strong>来验证。此外，maven-help-plugin 的 describe 目标可以帮助你描述任何一个 Maven 插件的信息，还有 all-profiles 目标和 active-profiles 目标帮助查看项目的 Profile。</p>
<h2 id="maven-release-plugin"><a href="#maven-release-plugin" class="headerlink" title="maven-release-plugin"></a>maven-release-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1yZWxlYXNlLXBsdWdpbi8=">http://maven.apache.org/plugins/maven-release-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>maven-release-plugin 的用途是帮助自动化项目版本发布，它依赖于 POM 中的 SCM 信息。<strong>release:prepare</strong>用来准备版本发布，具体的工作包括检查是否有未提交代码、检查是否有 SNAPSHOT 依赖、升级项目的 SNAPSHOT 版本至 RELEASE 版本、为项目打标签等等。<strong>release:perform</strong>则 是签出标签中的 RELEASE 源码，构建并发布。版本发布是非常琐碎的工作，它涉及了各种检查，而且由于该工作仅仅是偶尔需要，因此手动操作很容易遗漏一 些细节，maven-release-plugin 让该工作变得非常快速简便，不易出错。maven-release-plugin 的各种目标通常直接在 命令行调用，因为版本发布显然不是日常构建生命周期的一部分。</p>
<h2 id="maven-resources-plugin"><a href="#maven-resources-plugin" class="headerlink" title="maven-resources-plugin"></a>maven-resources-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1yZXNvdXJjZXMtcGx1Z2luLw==">http://maven.apache.org/plugins/maven-resources-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>为了使项目结构更为清晰，Maven 区别对待 Java 代码文件和资源文件，maven-compiler-plugin 用来编译 Java 代码，maven-resources-plugin 则用来处理资源文件。默认的主资源文件目录是<code>src/main/resources</code>，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置 maven-resources-plugin 来实现。此外，资源文件过滤也是 Maven 的一大特性，你可以在资源文件中使用*${propertyName}*形式的 Maven 属性，然后配置 maven-resources-plugin 开启对资源文件的过滤，之后就可以针对不同环境通过命令行或者 Profile 传入属性的值，以实现更为灵活的构建。</p>
<h2 id="maven-surefire-plugin"><a href="#maven-surefire-plugin" class="headerlink" title="maven-surefire-plugin"></a>maven-surefire-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvcGx1Z2lucy9tYXZlbi1zdXJlZmlyZS1wbHVnaW4v">http://maven.apache.org/plugins/maven-surefire-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>可能是由于历史的原因，Maven 2/3 中用于执行测试的插件不是 maven-test-plugin，而是 maven-surefire-plugin。其实大部分时间内，只要你的测试 类遵循通用的命令约定（以 Test 结尾、以 TestCase 结尾、或者以 Test 开头），就几乎不用知晓该插件的存在。然而在当你想要跳过测试、排除某些 测试类、或者使用一些 TestNG 特性的时候，了解 maven-surefire-plugin 的一些配置选项就很有用了。例如 <strong>mvn test -Dtest=FooTest</strong> 这样一条命令的效果是仅运行 FooTest 测试类，这是通过控制 maven-surefire-plugin 的 test 参数实现的。</p>
<h2 id="build-helper-maven-plugin"><a href="#build-helper-maven-plugin" class="headerlink" title="build-helper-maven-plugin"></a>build-helper-maven-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21vam8uY29kZWhhdXMub3JnL2J1aWxkLWhlbHBlci1tYXZlbi1wbHVnaW4v">http://mojo.codehaus.org/build-helper-maven-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>Maven 默认只允许指定一个主 Java 代码目录和一个测试 Java 代码目录，虽然这其实是个应当尽量遵守的约定，但偶尔你还是会希望能够指定多个 源码目录（例如为了应对遗留项目），build-helper-maven-plugin 的 add-source 目标就是服务于这个目的，通常它被绑定到 默认生命周期的 generate-sources 阶段以添加额外的源码目录。需要强调的是，这种做法还是不推荐的，因为它破坏了 Maven 的约定，而且可能会遇到其他严格遵守约定的插件工具无法正确识别额外的源码目录。</p>
<p>build-helper-maven-plugin 的另一个非常有用的目标是 attach-artifact，使用该目标你可以以 classifier 的形式选取部分项目文件生成附属构件，并同时 install 到本地仓库，也可以 deploy 到远程仓库。</p>
<h2 id="exec-maven-plugin"><a href="#exec-maven-plugin" class="headerlink" title="exec-maven-plugin"></a>exec-maven-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21vam8uY29kZWhhdXMub3JnL2V4ZWMtbWF2ZW4tcGx1Z2luLw==">http://mojo.codehaus.org/exec-maven-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>exec-maven-plugin 很好理解，顾名思义，它能让你运行任何本地的系统程序，在某些特定情况下，运行一个 Maven 外部的程序可能就是最简单的问题解决方案，这就是<strong>exec:exec</strong>的 用途，当然，该插件还允许你配置相关的程序运行参数。除了 exec 目标之外，exec-maven-plugin 还提供了一个 java 目标，该目标要求你 提供一个 mainClass 参数，然后它能够利用当前项目的依赖作为 classpath，在同一个 JVM 中运行该 mainClass。有时候，为了简单的 演示一个命令行 Java 程序，你可以在 POM 中配置好 exec-maven-plugin 的相关运行参数，然后直接在命令运行 <strong>mvn exec:java</strong> 以查看运行效果。</p>
<h2 id="jetty-maven-plugin"><a href="#jetty-maven-plugin" class="headerlink" title="jetty-maven-plugin"></a>jetty-maven-plugin</h2><p><span class="exturl" data-url="aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvSmV0dHkvRmVhdHVyZS9KZXR0eV9NYXZlbl9QbHVnaW4=">http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin<i class="fa fa-external-link-alt"></i></span></p>
<p>在进行 Web 开发的时候，打开浏览器对应用进行手动的测试几乎是无法避免的，这种测试方法通常就是将项目打包成 war 文件，然后部署到 Web 容器 中，再启动容器进行验证，这显然十分耗时。为了帮助开发者节省时间，jetty-maven-plugin 应运而生，它完全兼容 Maven 项目的目录结构，能够周期性地检查源文件，一旦发现变更后自动更新到内置的 Jetty Web 容器中。做一些基本配置后（例如 Web 应用的 contextPath 和自动扫描变更的时间间隔），你只要执行 <strong>mvn jetty:run</strong> ，然后在 IDE 中修改代码，代码经 IDE 自动编译后产生变更，再由 jetty-maven-plugin 侦测到后更新至 Jetty 容器，这时你就可以直接 测试 Web 页面了。需要注意的是，jetty-maven-plugin 并不是宿主于 Apache 或 Codehaus 的官方插件，因此使用的时候需要额外 的配置<code>settings.xml</code>的 pluginGroups 元素，将 org.mortbay.jetty 这个 pluginGroup 加入。</p>
<h2 id="versions-maven-plugin"><a href="#versions-maven-plugin" class="headerlink" title="versions-maven-plugin"></a>versions-maven-plugin</h2><p><span class="exturl" data-url="aHR0cDovL21vam8uY29kZWhhdXMub3JnL3ZlcnNpb25zLW1hdmVuLXBsdWdpbi8=">http://mojo.codehaus.org/versions-maven-plugin/<i class="fa fa-external-link-alt"></i></span></p>
<p>很多 Maven 用户遇到过这样一个问题，当项目包含大量模块的时候，为他们集体更新版本就变成一件烦人的事情，到底有没有自动化工具能帮助完成这件 事情呢？（当然你可以使用 sed 之类的文本操作工具，不过不在本文讨论范围）答案是肯定的，versions-maven- plugin 提供了很多目标帮助你管理 Maven 项目的各种版本信息。例如最常用的，命令 <strong>mvn versions:set -DnewVersion=1.1-SNAPSHOT</strong> 就能帮助你把所有模块的版本更新到 1.1-SNAPSHOT。该插件还提供了其他一些很有用的目标，display-dependency- updates 能告诉你项目依赖有哪些可用的更新；类似的 display-plugin-updates 能告诉你可用的插件更新；然后 use- latest-versions 能自动帮你将所有依赖升级到最新版本。最后，如果你对所做的更改满意，则可以使用 <strong>mvn versions:commit</strong> 提交，不满意的话也可以使用 <strong>mvn versions:revert</strong> 进行撤销。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文介绍了一些最常用的 Maven 插件，这里指的“常用”是指经常需要进行配置的插件，事实上我们用 Maven 的时候很多其它插件也是必须的，例如 默认的编译插件 maven-compiler-plugin 和默认的打包插件 maven-jar-plugin，但因为很少需要对它们进行配置，因此不在 本文讨论范围。了解常用的 Maven 插件能帮助你事倍功半地完成项目构建任务，反之你就可能会因为经常遇到一些难以解决的问题而感到沮丧。本文介绍的插件 基本能覆盖大部分 Maven 用户的日常使用需要，如果你真有非常特殊的需求，自行编写一个 Maven 插件也不是难事，更何况还有这么多开放源代码的插件供 你参考。</p>
<p>本文的这个插件列表并不是一个完整列表，读者有兴趣的话也可以去仔细浏览一下 Apache 和 Codehaus Mojo 的 Maven 插件列表，以的到一个更为全面的认识。最后，在线的 Maven 仓库搜索引擎如 <span class="exturl" data-url="aHR0cDovL3NlYXJjaC5tYXZlbi5vcmcv">http://search.maven.org/<i class="fa fa-external-link-alt"></i></span> 也能帮助你快速找到自己感兴趣的 Maven 插件。</p>
<blockquote>
<p>常用 Maven 插件介绍<br>转载自: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vanFtdG9ueS9wLzcyNTg1MTEuaHRtbA==">https://www.cnblogs.com/jqmtony/p/7258511.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>转载</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发布 Jar 包到 Maven 中央仓库</title>
    <url>/2019/06/17/maven/maven-publishing-to-center-repository/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文将介绍如何把自己开发出来的 <code>jar</code> 包发布到  <span class="exturl" data-url="aHR0cDovL3NlYXJjaC5tYXZlbi5vcmcv">Maven 中央仓库<i class="fa fa-external-link-alt"></i></span>，以便将好用的工具共享给其他需要的人.</p>
<h5 id="第一步-注册-jira-账号，将-jira-账号名密码-配置到-maven-的-settings-xml-文件中"><a href="#第一步-注册-jira-账号，将-jira-账号名密码-配置到-maven-的-settings-xml-文件中" class="headerlink" title="第一步 注册 jira 账号，将 jira 账号名密码 配置到 maven 的 settings.xml 文件中"></a>第一步 注册 jira 账号，将 jira 账号名密码 配置到 maven 的 settings.xml 文件中</h5><p><span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXMuc29uYXR5cGUub3JnL3NlY3VyZS9TaWdudXAhZGVmYXVsdC5qc3Bh">JIRA 注册地址<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>修改 <code>mavan</code> 配置文件 <code>settings.xml</code> ，加入以下配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>刚才注册的账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>刚才注册的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>刚才注册的账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>刚才注册的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>构件第一次发布需要创建 ISSUE，可以参考我之前创建的 <span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXMuc29uYXR5cGUub3JnL2Jyb3dzZS9PU1NSSC00MTcxOQ==">ISSUE<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>登录 <code>JIRA</code>，点击 <code>Create</code> ，如图：<br><img data-src="/assets/picture/maven-publish/jira-create-issue.png" alt="1560743125851"></p>
<span id="more"></span>

<p>弹出页面：<br><img data-src="/assets/picture/maven-publish/jira-issue.png" alt="1560743214766"></p>
<p>需要填写如下几项：</p>
<blockquote>
<p>Project：Community Support - Open Source Project Repository Hosting<br>Issue Type：New Project<br>Summary：JAR包名称，如：code-generator<br>Group Id：例如：com.github.zhuyizhuo<br>Project URL：项目站点，如：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9jb2RlLWdlbmVyYXRvcg==">https://github.com/zhuyizhuo/code-generator<i class="fa fa-external-link-alt"></i></span><br>SCM url：项目源码仓库，如：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9jb2RlLWdlbmVyYXRvci5naXQ=">https://github.com/zhuyizhuo/code-generator.git<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>提示：</p>
<blockquote>
<p>group Id 如果自己有个人网址，可填写为自己的网址，如果代码托管在 git ，则填写 com.github.xxx<br>填写个人网址的话，<code>Sonatype</code> 的工作人员会询问你那个 <code>Group Id</code> 是不是你的域名，你只需要在上面回答是就行，然后就会通过审核。</p>
</blockquote>
<p>其他内容不用填写，创建 <code>Issue</code> 后需要等待工作人员审核处理，一般一个工作日以内，审批通过后会发邮件通知，当 <code>Issue</code> 的 <code>Status</code> 变为<code>RESOLVED</code> 后，就可以进行下一步操作了，此外，在自己提交的 <code>Issue</code> 下面会看到 <code>Sonatype</code> 工作人员的回复：</p>
<p><img data-src="/assets/picture/maven-publish/issue-comments.png" alt="1560758351233"></p>
<p>如图， 工作人员提示在第一次发布构件后需要提交一下评论，</p>
<p>此处工作人员回复了项目分发位置  即 <code>pom.xml</code> 中需要配置的信息</p>
<h5 id="第二步-配置需要发布项目的-pom-xml-文件-加入如下配置-：（对应路径改为自己项目路径）"><a href="#第二步-配置需要发布项目的-pom-xml-文件-加入如下配置-：（对应路径改为自己项目路径）" class="headerlink" title="第二步 配置需要发布项目的 pom.xml 文件  加入如下配置 ：（对应路径改为自己项目路径）"></a>第二步 配置需要发布项目的 <code>pom.xml</code> 文件  加入如下配置 ：（对应路径改为自己项目路径）</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Sonatype 官方的一个通用配置 oss-parent 无需更改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 许可证 可根据需要修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目分发信息，在执行 mvn deploy 后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个 id 与第一步 setting.xml 中设置的对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的 url 就是 Issue 中回复的 snapshots 的 repository 地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个 id 与第一步 setting.xml 中设置的对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Staging Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的 url 就是 Issue 中回复的 staging 的 repository 地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 问题管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span>github<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/zhuyizhuo/code-generator/issues<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供 Maven web 站点和其它插件使用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/zhuyizhuo/code-generator<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>https://github.com/zhuyizhuo/code-generator.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目开发者列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ZhuYiZhuo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ZhuYiZhuo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>zhu.yizhuo@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>Developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>+8<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="第三步-安装-GPG-并生成秘钥，发布构件到仓库时需要用到"><a href="#第三步-安装-GPG-并生成秘钥，发布构件到仓库时需要用到" class="headerlink" title="第三步 安装 GPG 并生成秘钥，发布构件到仓库时需要用到"></a>第三步 安装 GPG 并生成秘钥，发布构件到仓库时需要用到</h5><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3BnNHdpbi5vcmcv">GPG Windows 客户端下载地址<i class="fa fa-external-link-alt"></i></span> | <span class="exturl" data-url="aHR0cHM6Ly9ncGd0b29scy5vcmcv">GPG Mac OS 客户端下载地址<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>安装 <code>GPG</code> 完毕，打开 <code>CMD</code> 窗口执行命令 <code>gpg --gen-key</code>   按提示输入个人信息，最终输出如下图：</p>
<p>提示： <strong><code>passphrase </code></strong>  需要记住，这个相当于是是密钥的密码，<strong>第四步</strong> 发布过程中进行签名操作的时候会用到</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;gpg --gen-key</span><br><span class="line">gpg (GnuPG) 2.2.15; Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Note: Use &quot;gpg --full-generate-key&quot; for a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: zhuyizhuo</span><br><span class="line">Email address: zhu.yizhuo@163.com</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    &quot;zhuyizhuo &lt;zhu.yizhuo@163.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit? O</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: key 33111BCFE53BEE51 marked as ultimately trusted</span><br><span class="line">gpg: directory &#x27;C:/Users/zhuo/AppData/Roaming/gnupg/openpgp-revocs.d&#x27; created</span><br><span class="line">gpg: revocation certificate stored as &#x27;C:/Users/zhuo/AppData/Roaming/gnupg/openpgp-revocs.d\9E2FB80F2047C634965B5F2C33111BCFE53BEE51.rev&#x27;</span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa2048 2019-06-06 [SC] [expires: 2021-06-05]</span><br><span class="line">      9E2FB80F2047C634965B5F2C33111BCFE53BEE51</span><br><span class="line">uid                zhuyizhuo &lt;zhu.yizhuo@163.com&gt;</span><br><span class="line">sub   rsa2048 2019-06-06 [E] [expires: 2021-06-05]</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/picture/maven-publish/passphrase.png" alt="1560760395431"></p>
<blockquote>
<p>上传公钥到服务器，用来发布 jar 的时候进行签名验证，执行命令：<br><code>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys [密钥]</code></p>
</blockquote>
<p>执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 9E2FB80F2047C634965B5F2C33111BCFE53BEE51</span><br><span class="line"></span><br><span class="line">gpg: sending key 9E2FB80F2047C634965B5F2C33111BCFE53BEE51 to hkp server keyserver.ubuntu.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>(此步骤为建议配置，并非必须，方便忘记 <code>passphrase</code> 后查看)</p>
<p>将 <code>passphrase</code> 配置到 <code>maven</code> 的 <code>setting.xml</code> 文件中 <profiles> 标签中</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-oss-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处根据GPG版本填写，&lt;2.0的填写GPG，2.0以上的填写gpg2 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>你的 Passphase 密码<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="第四步-发布-jar"><a href="#第四步-发布-jar" class="headerlink" title="第四步 发布 jar"></a>第四步 发布 jar</h5><blockquote>
<p>在项目根目录下打开 cmd 命令行执行以下命令  弹出密码框再次输入密码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean deploy -P sonatype-oss-release -Darguments=&quot;gpg.passphrase=你的 Passphase 密码&quot;</span><br></pre></td></tr></table></figure>

<p>发布成功后即可到 <span class="exturl" data-url="aHR0cHM6Ly9vc3Muc29uYXR5cGUub3JnLyNzdGFnaW5nUmVwb3NpdG9yaWVz">构件仓库<i class="fa fa-external-link-alt"></i></span> 中查看了。</p>
<h5 id="第五步-Release"><a href="#第五步-Release" class="headerlink" title="第五步 Release"></a>第五步 Release</h5><p>进入 <span class="exturl" data-url="aHR0cHM6Ly9vc3Muc29uYXR5cGUub3JnLyNzdGFnaW5nUmVwb3NpdG9yaWVz">构件仓库<i class="fa fa-external-link-alt"></i></span> 查看发布好的构件，构件仓库的用户名密码即 <code>JIRA</code> 的用户名 密码。</p>
<p><img data-src="/assets/picture/maven-publish/sonatype-login.png" alt="1560757741375"></p>
<p>登录后，点击左侧的<code>Staging Repositories</code>，一般最后一个就是刚刚发布的 <code>jar</code> 了，此时的构件状态为<code>open</code>。 </p>
<p>选中刚才发布的构件，并点击上方的 <code>close</code> ，弹出页面点击 <code>Confirm</code>。</p>
<p><img data-src="/assets/picture/maven-publish/close.png" alt="1560757844198"></p>
<p><img data-src="/assets/picture/maven-publish/close-confirm.png" alt="1560757894819"></p>
<p>在下边的 <code>Activity</code> 选项卡中查看状态，确保状态变成 <code>closed</code>：</p>
<p><img data-src="/assets/picture/maven-publish/activity-closed.png" alt="1560758032494"></p>
<blockquote>
<p>如果 <code>close</code> 未成功 则查看是哪项失败，处理问题后 重复  <strong>第四步 -&gt; 第五步</strong> 一直到 <code>closed</code> 为止</p>
</blockquote>
<p>选中状态为 <code>closed</code> 的构件点击 <code>Release</code>，弹出页面点击 <code>Confirm</code>。</p>
<p><img data-src="/assets/picture/maven-publish/release.png" alt="1560758083773"></p>
<p><img data-src="/assets/picture/maven-publish/release-confirm.png" alt="1560759242025"></p>
<p>如图勾选，则发布成功后构件自动从  <strong><code>Staging Repositories</code></strong> 删除。</p>
<p>在下边的 <code>Activity</code> 选项卡中查看状态，如果是第一次发布，成功后需要去 <code>JIRA</code> 回复评论。</p>
<p>全部操作成功后，构件就发布完毕了，剩下的就是耐心等待构件同步到 <code>maven</code> 的 <span class="exturl" data-url="aHR0cDovL3NlYXJjaC5tYXZlbi5vcmcv">中央仓库<i class="fa fa-external-link-alt"></i></span>（通常为几个小时）。</p>
<h5 id="第六步-升级-jar-包"><a href="#第六步-升级-jar-包" class="headerlink" title="第六步 升级 jar 包"></a>第六步 升级 jar 包</h5><p>升级 Jar 包比初次发布的步骤简单的多，我们只需要更新项目工程代码，并修改 <code>pom.xml</code> 文件里面的版本号，最后重新执行上面的 <strong>第四步</strong> 和 <strong>第五步</strong> 即可。</p>
<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h5><blockquote>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTMvMDcvZ3BnLmh0bWw=">GPG 入门教程<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29mdGlkZWEvcC82NzQzMTA4Lmh0bWw=">如何发布 jar 包到 maven 中央仓库<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>原创</category>
        <category>教程</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>最全 pom.xml 文件详解</title>
    <url>/2016/08/25/maven/pom/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>以前收藏的一篇文章，今日整理历史收藏，迁移至博客。</p>
<span id="more"></span>

<p>一个详细的 POM 文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 问题管理系统（例如jira）的名字， --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 传送通知的途径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 扩展配置项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 邮件的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者属性，如即时消息如何处理等 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目的其他贡献者。参见developers/developer元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目分发的主要方式：</span></span><br><span class="line"><span class="comment">            repo，可以从Maven库下载</span></span><br><span class="line"><span class="comment">            manual， 用户必须手动下载和安装依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span></span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当前代码的标签，在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组织的全名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组织主页的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 描述使用到的构建扩展。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放资源的目录，该路径相对POM路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用的插件列表 。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用的插件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它</span></span><br><span class="line"><span class="comment">            能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统体系结构 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值</span></span><br><span class="line"><span class="comment">                字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活</span></span><br><span class="line"><span class="comment">                profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 构建项目所需要的信息。参见build元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见properties元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。</span></span><br><span class="line"><span class="comment">            - compile ：默认范围，用于编译</span></span><br><span class="line"><span class="comment">            - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath</span></span><br><span class="line"><span class="comment">            - runtime: 在执行时需要使用</span></span><br><span class="line"><span class="comment">            - test: 用于test任务时使用</span></span><br><span class="line"><span class="comment">            - system: 需要外在提供相应的元素。通过systemPath来取得</span></span><br><span class="line"><span class="comment">            - systemPath: 仅用于范围为system。提供相应的路径</span></span><br><span class="line"><span class="comment">            - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用的报表插件和他们的配置。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 报表插件的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表示报表的一个集合，以及产生该集合的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 报表集合的唯一标识符，POM继承时用到 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 产生报表集合时，被使用的报表的配置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>business api website<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web</span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的版本号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cDovL3d3dy5ibG9namF2YS5uZXQvaGVsbHhvdWwvYXJjaGl2ZS8yMDEzLzA1LzE2LzM5OTM0NS5odG1s">http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 的 “死键” 问题</title>
    <url>/2019/07/19/redis/redis-unused-key/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>大规模的数据库存储系统中，数据的生命周期管理是很有必要的；从业务角度发现过期数据，数据归档和数据碎片整理等。以 MySQL 为例，1 个运行很久的 TB 级 MySQL 实例中，极有可能数百 GB 的数据，对业务来说是”过期数据”可直接归档后清理。如果不能发现和及时清理，这部分“过期数据”对生产数据库备份资源消耗，占用工作集数据内存 (过期数据行可能分散 InnoDB 的 page 中)，影响数据还原的 RTO 等。从成本和运维的角度看，代价都是很大的。针对 MySQL 这类”过期数据”问题，通过 MySQL 巡检系统发现问题，使用 MySQL 归档系统备份和删除数据等。</p>
</blockquote>
<h2 id="Redis-死键的定义"><a href="#Redis-死键的定义" class="headerlink" title="Redis 死键的定义"></a>Redis 死键的定义</h2><p>本文简单聊下 Redis ”死键”的问题，从业务角度对”死键”的 2 个定义:</p>
<ul>
<li>设置有生存时间 Time to live:TTL 的键，已经过期”死亡”，但因 Redis 主动清理不及时，导致这类键堆积.(这里可能不清晰，后文会详解)</li>
<li>未设置有 TTL 键，使用这批键的程序功能已下线，导致这类键在集群中堆积，无人管理；有的键长达 6 个月访问过一次。</li>
</ul>
<span id="more"></span>

<h2 id="Redis-过期键不能及时清理"><a href="#Redis-过期键不能及时清理" class="headerlink" title="Redis 过期键不能及时清理"></a>Redis 过期键不能及时清理</h2><p>Redis 可对键设置生存时间, 当键的生存时间为 0(过期键) 理论就会被删除，并释放占用的数据结构和内存资源。<br>但 Redis 为保证请求的性能，过期键并不是立即删除的。<br>这节主要讨论，当产生过期键的速度大于 Redis 删除过期键的速度时，导致过期键堆积的问题。</p>
<p>Redis 删除过期键的策略</p>
<p>Redis 删除过期键有两种策略：passive way 和 active way.</p>
<ul>
<li>passive way(惰性删除):当客户端访问到过期键时，发现它已过期，Redis 会主动删除它</li>
<li>active way(定期删除):Redis 会定期调用删除过期键，调用频率由参数 hz 控制，默认每秒调用 10 次</li>
</ul>
<p>我们重点讨论第二种”定期删除策略”。Redis 每个 database(Cluster 模式下只有 0 号库) 都对应 expire 的 dict，用以保存 Redis 设置有生存时间的键；Redis 每秒调用 10 次 (hz 参数决定) activeExpireCycle 函数；</p>
<p>每次随机获取 20 个带有生存时间的键。<br>删除其中已过期的键。<br>如果其中过期键超过 25%(即大于 5 个键是过期的),activeExpireCycle 函数会重新调用，开始第一步 (如果大量 KEY 同时过期，可能引起 Redis 性能抖动)。</p>
<h2 id="Redis-定期删除的速度"><a href="#Redis-定期删除的速度" class="headerlink" title="Redis 定期删除的速度"></a>Redis 定期删除的速度</h2><p>Redis 定期删除过期键的速度？ 怎么监控它？</p>
<p>Redis 定期删除动作每秒执行 10 次，正常情况每次删除几个过期键，这样每秒删除过期键约数十个。<br>通过 info stats 的 expired_keys 指标记录累计删除的过期键数量。根据生产监控 (hz=10)Redis 每秒删除过期键 20~25 个,每天能删除约 200 百万个过期键。有的 Redis 单个实例包含数千万个键，如果业务设计键过期处理不合理，每天产生过期键多于 200 百万。这容易导致 Redis 实例中存在过期键，最坏情况占整个键容量的 25%；也就说 Redis 实例最坏有 1/4 的内存被这类过期的”死键”所占据浪费。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis 查看过期键删除数量</span><br><span class="line">127.0.0.1:xxx&gt; info stats</span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:33843364</span><br><span class="line">total_commands_processed:211474375292</span><br><span class="line">instantaneous_ops_per_sec:9438</span><br><span class="line">total_net_input_bytes:19661370696457</span><br><span class="line">total_net_output_bytes:34509115216581</span><br><span class="line">expired_keys:7575307675</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:72743876832</span><br><span class="line">keyspace_misses:57604962586</span><br><span class="line">latest_fork_usec:95143</span><br></pre></td></tr></table></figure>

<p>大量过期键堆积，最直接影响是浪费内存空间；另外还会有些”灵异现象”</p>
<ul>
<li>Master 的键个数比 Slave 多 20%</li>
<li>读写分离时，应用程序读取 Slave 时能返回快过期的键</li>
<li>Redis scan 或 keys 出来的键个数，远小于 dbsize 返回的个数</li>
<li>高并发情况下，可能出现 performance 抖动,定期删除最坏可占 25%的 CPU 时间片<br>这些现象都和过期键的堆积有关。那么我们怎么避免这类过期键堆积呢。</li>
</ul>
<h3 id="如何避免过期键堆积，成为”死键”"><a href="#如何避免过期键堆积，成为”死键”" class="headerlink" title="如何避免过期键堆积，成为”死键”"></a>如何避免过期键堆积，成为”死键”</h3><p>有效避免 Redis 过期键堆积,从两个方面解决: 降低过期键产生的速度；和加快定期删除的速度。</p>
<ul>
<li>业务设计键的过期时长时，是否考虑过期键生成的速度；能否加大过期键的生存时间。<br>如天气缓存集群，大量的键要求 1 分钟过期，从产品需求角度，能否设置更大。</li>
<li>尽量避免使用大实例，控制 Redis 单实例的键个数 (如 1kw)，可有效控制单个实例过期键产生的速度；拆分为更多的分片，加大集群定期删除的速度</li>
<li>适当调大 hz 的值,增大每秒定期删除的次数；建议调整 60，官方建议小 100；<br>因调用 serverCron 除了过期删除动作外，还有很多其他操作，可能占用过多的 CPU 时间片，影响业务请求。<br>我们测试 hz 从默认 10 调整到 100 时，清理过期键的速度从 20 个升高到 140 个。</li>
<li>主动触发 Redis”惰性删除策略”,通过 scan 命令扫描整个实例的键，Redis 会删除所有已过期的键。<br>如果通过业务优化，扩容实例和调整 hz 都不能解决，可考虑定期使用这个大招。</li>
</ul>
<blockquote>
<p>以下是一个 shell, 获取当前服务器，Cluser 的 Master 通过 scan 方式清理过期键</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">local_ip=`ifconfig | grep -Eo &#x27;inet (addr:)?([0-9]*\.)&#123;3&#125;[0-9]*&#x27; | grep -Eo &#x27;([0-9]*\.)&#123;3&#125;[0-9]*&#x27; | grep -v &#x27;127.0.0.1&#x27;`</span><br><span class="line">redis-cli -p 6379 cluster nodes | grep &quot;master&quot; | grep &quot;$local_ip&quot; | while read node</span><br><span class="line">do</span><br><span class="line">  node_ins=`echo $node | awk &#x27;&#123;print $2&#125;&#x27; | cut -f 1 -d &quot;:&quot; `</span><br><span class="line">  node_port=`echo $node | awk &#x27;&#123;print $2&#125;&#x27; | cut -f 2 -d &quot;:&quot; `</span><br><span class="line">  redis-cli -h $node_ins -p $node_port --scan  &gt;&gt; /dev/null</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="你的-Redis-有堆积过期键吗？"><a href="#你的-Redis-有堆积过期键吗？" class="headerlink" title="你的 Redis 有堆积过期键吗？"></a>你的 Redis 有堆积过期键吗？</h3><p>业务低峰期，找个 Redis Master 实例，支持 scan 命令 (QPS 会增长 1w)，查看命令执行前后，dbsize/used_memory 是否有明显下降<br>redis-cli -h node_ins -p node_port –scan &gt;&gt; /dev/null</p>
<h3 id="应用程序已不使用的键"><a href="#应用程序已不使用的键" class="headerlink" title="应用程序已不使用的键"></a>应用程序已不使用的键</h3><p>一个 Redis 集群，分析键空间发现 70%的键，3 个月未访问过。这类键没未设置生存时间，实例也不能设置淘汰机制。<br>很多应用程序功能已下线，但它使用的 Redis 键往往无人清理或通过 DBA 处理；这样的键从业务角度看，属于无用的”死键”。</p>
<h3 id="获取键的-idletime"><a href="#获取键的-idletime" class="headerlink" title="获取键的 idletime"></a>获取键的 idletime</h3><p>每个 Redis 键都有一个 lru 的属性字段，用于记录它最后一次被访问的时间。<br>而 object idletime 命令，可通过系统当前时间-lru 时间，得到键多久没有被访问的秒数。<br>说明：object idletime 命令访问键时，不会改变键的 lru 属性，即不会影响键的访问时间</p>
<blockquote>
<p>以下示例，键”key:000000008149”已有150039秒未被访问过</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:7000&gt; object idletime &quot;key:000000008149&quot;</span><br><span class="line"></span><br><span class="line">(integer) 150039</span><br><span class="line"></span><br><span class="line">127.0.0.1:7000&gt; object idletime &quot;key:000000008149&quot;</span><br><span class="line"></span><br><span class="line">(integer) 150041</span><br></pre></td></tr></table></figure>

<h3 id="获取键空间空闲时间超过指定时间的键"><a href="#获取键空间空闲时间超过指定时间的键" class="headerlink" title="获取键空间空闲时间超过指定时间的键"></a>获取键空间空闲时间超过指定时间的键</h3><p>使用Python写个简单程序，scan指定数据库的键空间，打印idletime超过指定时阀值的键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">//Action: scan <span class="number">0</span>号数据库的键空间，获取空闲时长大于指定时间的键的列表，达到获取业务死键的作用</span><br><span class="line">//日期: <span class="number">2016</span>-08-<span class="number">11</span></span><br><span class="line">TIME_THRESHOLD_SECOND = <span class="number">2592000</span>  <span class="comment"># 获取idletime时长超过TIME_THRESHOLD_SEC秒数键打印. 默认:30天</span></span><br><span class="line">COUNT = <span class="number">200</span>  <span class="comment">#scan每次返回的键个数,建议不要太大，避免O(n)的n过大出现慢查询. 默认:200个</span></span><br><span class="line">YEILD_SECOND = <span class="number">0.05</span> <span class="comment">#每次scan后，sleep 0.05秒；本地测试如果不sleep，此工具会增加约2w的QPS. 避免对高负载的Redis实例产生影响。</span></span><br><span class="line">            <span class="comment">#默认:0.05秒，增长约3500个QPS,其中一个时间复杂度是O(COUNT). 如果实例负载高，key不多可以考虑sleep 0.1秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key_idletime</span>():</span></span><br><span class="line">    r = redis.StrictRedis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6380</span>, password=<span class="string">&quot;xxxx&quot;</span> ,db=<span class="number">0</span>)</span><br><span class="line">    cursor = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> cursor != <span class="number">0</span>:</span><br><span class="line">            cursor, data = r.scan(cursor=cursor, count=COUNT)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> data:</span><br><span class="line">                  key_idletime = r.<span class="built_in">object</span>(<span class="string">&quot;idletime&quot;</span>,key)</span><br><span class="line">            <span class="keyword">if</span> key_idletime &gt; TIME_THRESHOLD_SECOND:</span><br><span class="line">                <span class="built_in">print</span> key , <span class="string">&quot; &quot;</span>, key_idletime</span><br><span class="line">            time.sleep(YEILD_SECOND)</span><br><span class="line">get_key_idletime()</span><br></pre></td></tr></table></figure>

<p>我们定位Redis的长期未被访问的键，我们怎么确认属于哪个业务功能呢？ 怎么预防业务的“死键”存在？</p>
<h3 id="怎么减少业务”死键”的产生"><a href="#怎么减少业务”死键”的产生" class="headerlink" title="怎么减少业务”死键”的产生"></a>怎么减少业务”死键”的产生</h3><ul>
<li><p>通过3.1中定期巡检，自动发现1个月未访问过的键，并自动通知业务确认</p>
</li>
<li><p>设置合理的命名空间，我们建议三段式,用”:”分隔。每个集群固定前缀:每个业务功能前缀:实际键名(前缀尽量短，建议2个字节，减少内存消耗)。</p>
<p>每个团队按大业务功能有多个集群，每个集群有多个小功能模块；这样命空间管理后，集群有任何问题，DBA定位导致问题的”键前缀”，通过集群对接负责的工程师<br>很快就定位是哪个功能，什么情况引起的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 前缀   | 业务功能       | 存储内容            | 存储规模 | 生存时间 | 预计容量 |</span><br><span class="line">| ap:1: | 应用商场xxx功能 | 用户安装的appid列表 | x亿      | xx小时   | xxGB    |</span><br></pre></td></tr></table></figure></li>
<li><p>给键设置合理的生存时间; 有效避免业务死键发生。比如用户session, 用户最近x小时已安装APP列表等业务场景。有存储性质的集群，也可要求设置合理过期时间，如几个月。通过info Keyspace命令，可查看当前实例有多少键设置有生存时间属性。(另外设置过期时间，每个键多消耗约32Bytes)</p>
</li>
</ul>
<h3 id="可下线的过期键"><a href="#可下线的过期键" class="headerlink" title="可下线的过期键"></a>可下线的过期键</h3><p>数据备份<br>数据清理</p>
<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXhpYW83MjM4NDYvYXJ0aWNsZS9kZXRhaWxzLzc4MDg5NTc3">https://blog.csdn.net/liuxiao723846/article/details/78089577<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>转载</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Repost</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 3.x新特性落地实践</title>
    <url>/2024/07/22/spring-boot/2024-spring-boot-3-new-features/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Spring-Boot-3-x新特性落地实践-🚀"><a href="#Spring-Boot-3-x新特性落地实践-🚀" class="headerlink" title="Spring Boot 3.x新特性落地实践 🚀"></a>Spring Boot 3.x新特性落地实践 🚀</h1><p>大家好！👋 随着Spring Boot 3.x的正式发布，我们迎来了许多令人激动的新特性和改进。作为一名Spring生态的忠实用户，我在多个项目中完成了从Spring Boot 2.x到3.x的升级，并积累了一些宝贵的经验。今天，我将和大家分享Spring Boot 3.x的核心新特性以及落地实践中的最佳方案。</p>
<h2 id="一、Spring-Boot-3-x的核心新特性-🌟"><a href="#一、Spring-Boot-3-x的核心新特性-🌟" class="headerlink" title="一、Spring Boot 3.x的核心新特性 🌟"></a>一、Spring Boot 3.x的核心新特性 🌟</h2><h3 id="1-基于Java-17的最低要求"><a href="#1-基于Java-17的最低要求" class="headerlink" title="1. 基于Java 17的最低要求"></a>1. 基于Java 17的最低要求</h3><p>Spring Boot 3.x将最低支持的Java版本提升到了Java 17，这意味着我们可以享受Java 17带来的所有新特性和性能改进：</p>
<ul>
<li>密封类（Sealed Classes）</li>
<li>模式匹配（Pattern Matching）</li>
<li>文本块（Text Blocks）</li>
<li>改进的垃圾收集器</li>
<li>性能优化</li>
</ul>
<h3 id="2-全面支持Jakarta-EE-10"><a href="#2-全面支持Jakarta-EE-10" class="headerlink" title="2. 全面支持Jakarta EE 10"></a>2. 全面支持Jakarta EE 10</h3><p>Spring Boot 3.x全面支持Jakarta EE 10，这是Java EE的新一代演进版本。主要变化包括：</p>
<ul>
<li>包名从<code>javax.*</code>迁移到<code>jakarta.*</code></li>
<li>Servlet API 6.0支持</li>
<li>JPA 3.1支持</li>
<li>Bean Validation 3.0支持</li>
</ul>
<h3 id="3-原生镜像支持（GraalVM）"><a href="#3-原生镜像支持（GraalVM）" class="headerlink" title="3. 原生镜像支持（GraalVM）"></a>3. 原生镜像支持（GraalVM）</h3><p>Spring Boot 3.x提供了对GraalVM原生镜像的官方支持，这是一个重大突破：</p>
<ul>
<li>启动时间显著减少（毫秒级启动）</li>
<li>内存占用大幅降低</li>
<li>适合容器化和Serverless环境</li>
<li>支持AOT编译优化</li>
</ul>
<h3 id="4-核心容器改进"><a href="#4-核心容器改进" class="headerlink" title="4. 核心容器改进"></a>4. 核心容器改进</h3><p>Spring Boot 3.x对核心容器进行了多项改进：</p>
<ul>
<li>自动配置类的条件评估优化</li>
<li>改进的配置属性处理</li>
<li>更强大的启动日志</li>
<li>增强的错误诊断能力</li>
</ul>
<h3 id="5-Web层更新"><a href="#5-Web层更新" class="headerlink" title="5. Web层更新"></a>5. Web层更新</h3><p>Web层也迎来了多项重要更新：</p>
<ul>
<li>Spring MVC和WebFlux的性能优化</li>
<li>改进的测试支持</li>
<li>新增的HTTP/3支持</li>
<li>响应式API增强</li>
</ul>
<h2 id="二、从Spring-Boot-2-x升级到3-x的实战经验-📚"><a href="#二、从Spring-Boot-2-x升级到3-x的实战经验-📚" class="headerlink" title="二、从Spring Boot 2.x升级到3.x的实战经验 📚"></a>二、从Spring Boot 2.x升级到3.x的实战经验 📚</h2><h3 id="1-升级前的准备工作"><a href="#1-升级前的准备工作" class="headerlink" title="1. 升级前的准备工作"></a>1. 升级前的准备工作</h3><p>在开始升级之前，做好充分的准备工作至关重要：</p>
<p><strong>1.1 检查当前项目依赖</strong></p>
<p>使用<code>mvn dependency:tree</code>或Gradle的依赖报告功能，检查项目中是否有与Spring Boot 3.x不兼容的第三方库。</p>
<p><strong>1.2 更新开发环境</strong></p>
<p>确保你的开发环境满足以下要求：</p>
<ul>
<li>JDK 17或更高版本</li>
<li>Maven 3.8.6+或Gradle 7.5+</li>
<li>兼容的IDE版本（IntelliJ IDEA 2022.3+, Eclipse 2022-12+, VSCode最新版）</li>
</ul>
<p><strong>1.3 创建分支和备份</strong></p>
<p>在升级前创建专门的升级分支，并对重要数据进行备份，以防万一。</p>
<h3 id="2-升级的具体步骤"><a href="#2-升级的具体步骤" class="headerlink" title="2. 升级的具体步骤"></a>2. 升级的具体步骤</h3><p><strong>2.1 修改Spring Boot版本</strong></p>
<p>首先，更新项目中的Spring Boot版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Maven --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Gradle --&gt;</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;org.springframework.boot&#x27; version &#x27;3.2.4&#x27;</span><br><span class="line">    id &#x27;io.spring.dependency-management&#x27; version &#x27;1.1.4&#x27;</span><br><span class="line">    // 其他插件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.2 处理javax到jakarta的包名变更</strong></p>
<p>这是升级过程中最繁琐但也是最重要的一步：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧代码</span></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新代码</span></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br></pre></td></tr></table></figure>

<p>你可以使用IDE的批量替换功能来加速这个过程，但要注意仔细检查，避免替换错误。</p>
<p><strong>2.3 更新Spring Cloud版本（如果使用）</strong></p>
<p>如果你的项目使用了Spring Cloud，需要将其更新到与Spring Boot 3.x兼容的版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.4 修复已弃用的API和配置</strong></p>
<p>Spring Boot 3.x移除了许多在2.x中已弃用的API和配置项。使用IDE的警告功能或静态代码分析工具来识别并修复这些问题。</p>
<p><strong>2.5 运行测试并进行必要的调整</strong></p>
<p>在完成上述步骤后，运行项目的测试套件，并根据测试结果进行必要的调整。特别注意以下几点：</p>
<ul>
<li>自动配置行为的变化</li>
<li>依赖库的兼容性问题</li>
<li>配置属性的变化</li>
</ul>
<h3 id="3-常见问题及解决方案"><a href="#3-常见问题及解决方案" class="headerlink" title="3. 常见问题及解决方案"></a>3. 常见问题及解决方案</h3><p>在升级过程中，你可能会遇到以下常见问题：</p>
<p><strong>3.1 第三方库兼容性问题</strong></p>
<p><strong>问题</strong>：某些第三方库尚未支持Spring Boot 3.x或Jakarta EE 10。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>检查库的最新版本是否支持Spring Boot 3.x</li>
<li>寻找替代方案或临时解决方案</li>
<li>如果是开源库，可以考虑贡献代码帮助其支持Spring Boot 3.x</li>
</ul>
<p><strong>3.2 配置属性变化</strong></p>
<p><strong>问题</strong>：一些配置属性的名称或默认值发生了变化。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>使用<code>spring-boot-properties-migrator</code>依赖来帮助识别和迁移配置属性</li>
<li>查阅Spring Boot 3.x的官方文档，了解配置属性的变化</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-properties-migrator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.3 测试失败</strong></p>
<p><strong>问题</strong>：升级后，一些测试用例失败。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>检查测试中使用的API是否已被移除或更改</li>
<li>更新测试依赖版本</li>
<li>调整测试策略，适应Spring Boot 3.x的变化</li>
</ul>
<h2 id="三、GraalVM原生镜像在生产环境的应用案例-🏭"><a href="#三、GraalVM原生镜像在生产环境的应用案例-🏭" class="headerlink" title="三、GraalVM原生镜像在生产环境的应用案例 🏭"></a>三、GraalVM原生镜像在生产环境的应用案例 🏭</h2><h3 id="1-GraalVM原生镜像的优势"><a href="#1-GraalVM原生镜像的优势" class="headerlink" title="1. GraalVM原生镜像的优势"></a>1. GraalVM原生镜像的优势</h3><p>GraalVM原生镜像为Spring Boot应用带来了显著的优势：</p>
<ul>
<li><strong>启动时间极快</strong>：从数十秒减少到数百毫秒</li>
<li><strong>内存占用极低</strong>：通常比JVM模式减少50%-80%</li>
<li><strong>即时就绪</strong>：启动后立即达到最佳性能状态</li>
<li><strong>容器友好</strong>：特别适合Kubernetes和Serverless环境</li>
</ul>
<h3 id="2-构建原生镜像的配置与实践"><a href="#2-构建原生镜像的配置与实践" class="headerlink" title="2. 构建原生镜像的配置与实践"></a>2. 构建原生镜像的配置与实践</h3><p><strong>2.1 添加Spring Boot原生镜像支持</strong></p>
<p>要为Spring Boot应用添加GraalVM原生镜像支持，需要添加以下依赖和插件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加GraalVM原生镜像支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>developmentOnly<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加原生镜像构建插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>native-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.2 构建原生镜像</strong></p>
<p>使用Maven或Gradle构建原生镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Maven</span></span><br><span class="line">mvn -Pnative native:compile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gradle</span></span><br><span class="line">gradle nativeCompile</span><br></pre></td></tr></table></figure>

<p><strong>2.3 常见问题及解决方案</strong></p>
<p>在构建和运行原生镜像时，可能会遇到一些常见问题：</p>
<p><strong>反射问题</strong></p>
<p>GraalVM原生镜像在编译时需要知道所有反射使用的类和方法。Spring Boot的AOT处理器会自动处理大部分情况，但有些情况下你可能需要手动配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加反射配置</span></span><br><span class="line">    <span class="meta">@NativeHint(</span></span><br><span class="line"><span class="meta">        types = @TypeHint(</span></span><br><span class="line"><span class="meta">            types = &#123;com.example.MyClass.class&#125;,</span></span><br><span class="line"><span class="meta">            access = &#123;AccessBits.DECLARED_METHODS, AccessBits.DECLARED_FIELDS&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConfiguration</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>资源文件访问问题</strong></p>
<p>原生镜像默认不会包含所有资源文件，需要显式配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NativeHint(</span></span><br><span class="line"><span class="meta">    resources = @ResourceHint(</span></span><br><span class="line"><span class="meta">        patterns = &#123;&quot;static/**&quot;, &quot;templates/**&quot;, &quot;application*.properties&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-生产环境应用案例"><a href="#3-生产环境应用案例" class="headerlink" title="3. 生产环境应用案例"></a>3. 生产环境应用案例</h3><p><strong>3.1 微服务网关优化</strong></p>
<p><strong>背景</strong>：某公司的API网关基于Spring Cloud Gateway构建，在Kubernetes环境中部署，需要快速启动和低内存占用。</p>
<p><strong>优化方案</strong>：将API网关迁移到GraalVM原生镜像</p>
<p><strong>实施效果</strong>：</p>
<ul>
<li>启动时间从45秒减少到0.8秒</li>
<li>内存占用从512MB减少到128MB</li>
<li>自动扩缩容响应速度提升了50倍</li>
<li>容器镜像大小从250MB减少到80MB</li>
</ul>
<p><strong>3.2 无服务器函数优化</strong></p>
<p><strong>背景</strong>：某电商平台的无服务器函数基于Spring Cloud Function构建，冷启动时间长影响用户体验。</p>
<p><strong>优化方案</strong>：使用GraalVM原生镜像构建无服务器函数</p>
<p><strong>实施效果</strong>：</p>
<ul>
<li>冷启动时间从3-5秒减少到0.3-0.5秒</li>
<li>函数执行成本降低了65%</li>
<li>用户满意度提升了40%</li>
</ul>
<h2 id="四、Java-17-21与Spring-Boot-3-x的最佳组合-🤝"><a href="#四、Java-17-21与Spring-Boot-3-x的最佳组合-🤝" class="headerlink" title="四、Java 17/21与Spring Boot 3.x的最佳组合 🤝"></a>四、Java 17/21与Spring Boot 3.x的最佳组合 🤝</h2><h3 id="1-Java-17-vs-Java-21"><a href="#1-Java-17-vs-Java-21" class="headerlink" title="1. Java 17 vs Java 21"></a>1. Java 17 vs Java 21</h3><p>Spring Boot 3.x支持Java 17及以上版本，而Java 21作为最新的长期支持版本（LTS），提供了更多的新特性和改进。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Java 17</th>
<th>Java 21</th>
</tr>
</thead>
<tbody><tr>
<td>密封类</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>模式匹配</td>
<td>✅</td>
<td>✅（增强）</td>
</tr>
<tr>
<td>虚拟线程</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>结构化并发</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>字符串模板</td>
<td>❌</td>
<td>✅（预览）</td>
</tr>
<tr>
<td>记录模式</td>
<td>❌</td>
<td>✅（预览）</td>
</tr>
</tbody></table>
<h3 id="2-性能对比"><a href="#2-性能对比" class="headerlink" title="2. 性能对比"></a>2. 性能对比</h3><p>Java 21在性能方面有显著提升，特别是在垃圾收集和内存管理方面：</p>
<table>
<thead>
<tr>
<th>性能指标</th>
<th>Java 17</th>
<th>Java 21</th>
<th>提升幅度</th>
</tr>
</thead>
<tbody><tr>
<td>启动时间</td>
<td>基准</td>
<td>基准-15%</td>
<td>~15%</td>
</tr>
<tr>
<td>内存占用</td>
<td>基准</td>
<td>基准-20%</td>
<td>~20%</td>
</tr>
<tr>
<td>吞吐量</td>
<td>基准</td>
<td>基准+10%</td>
<td>~10%</td>
</tr>
<tr>
<td>GC暂停时间</td>
<td>基准</td>
<td>基准-30%</td>
<td>~30%</td>
</tr>
</tbody></table>
<h3 id="3-最佳实践建议"><a href="#3-最佳实践建议" class="headerlink" title="3. 最佳实践建议"></a>3. 最佳实践建议</h3><p>基于我的实践经验，我推荐以下最佳组合策略：</p>
<p><strong>3.1 新项目</strong></p>
<p>对于新项目，建议直接使用<strong>Spring Boot 3.2+和Java 21</strong>，这样可以充分利用最新的特性和性能改进。</p>
<p><strong>3.2 现有项目</strong></p>
<p>对于现有项目：</p>
<ul>
<li>如果正在使用Java 11或更早版本，建议先升级到Java 17，然后再升级到Spring Boot 3.x</li>
<li>如果已经在使用Java 17，可以直接升级到Spring Boot 3.x</li>
<li>在稳定运行一段时间后，再考虑升级到Java 21</li>
</ul>
<p><strong>3.3 配置优化建议</strong></p>
<p>为了充分发挥Java 17/21和Spring Boot 3.x的性能优势，以下是一些配置优化建议：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JVM参数优化</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseG1GC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+ParallelRefProcEnabled</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseStringDeduplication</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UnlockExperimentalVMOptions</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">G1NewSizePercent=20</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">MaxGCPauseMillis=200</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Spring Boot配置优化</span></span><br><span class="line"><span class="meta">spring.main.lazy-initialization</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jackson.serialization.fail-on-empty-beans</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">server.tomcat.connection-timeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="meta">server.tomcat.max-threads</span>=<span class="string">200</span></span><br></pre></td></tr></table></figure>

<h2 id="五、总结与展望-🔮"><a href="#五、总结与展望-🔮" class="headerlink" title="五、总结与展望 🔮"></a>五、总结与展望 🔮</h2><p>Spring Boot 3.x的发布标志着Spring生态系统的一次重大飞跃，它不仅带来了许多令人激动的新特性，还显著提升了性能和可扩展性。通过本文分享的升级经验和最佳实践，希望能够帮助大家顺利完成从Spring Boot 2.x到3.x的过渡。</p>
<p>特别值得一提的是GraalVM原生镜像支持，它为Spring Boot应用开辟了新的可能性，特别是在容器化和Serverless环境中。随着Java 21成为新的LTS版本，虚拟线程等特性将进一步提升Spring Boot应用的性能和可扩展性。</p>
<p>升级到Spring Boot 3.x不仅仅是版本的更新，更是一次技术栈的现代化升级。它为我们构建更高效、更可靠、更具可扩展性的应用提供了更强大的工具和框架。让我们一起拥抱Spring Boot 3.x带来的新机遇！</p>
<p>如果你在升级过程中有任何问题或经验分享，欢迎在评论区留言讨论！😊</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>新特性</tag>
        <tag>升级实践</tag>
        <tag>GraalVM</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成数据库版本管理工具 Flyway</title>
    <url>/2020/06/21/spring-boot/spring-boot-flyway-database-version-control/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="为什么要进行数据库版本控制？"><a href="#为什么要进行数据库版本控制？" class="headerlink" title="为什么要进行数据库版本控制？"></a>为什么要进行数据库版本控制？</h4><p>假设我们有一个名为 <em>Shiny</em> 的项目，其主要交付项目是一个名为 <em>Shiny Soft</em> 的软件，该软件连接到名为 <em>Shiny DB</em> 的数据库。<br>最简单的图可能看起来像这样：<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/SimpleView.png" alt="img"></p>
<span id="more"></span>

<p>但是在大多数项目中，我们的数据库都是像以下这样：<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/Environments.png" alt="img" style="zoom:70%;" /><br>通常，我们的环境不仅仅只有一套，一般来说会有 DEV、TEST、PROD 三套环境。<br>而在每次发版的时候，我们可能都会对数据库的表结构进行新增和变更，又或者需要插入一些初始化的数据。<br>那么，就意味着我们需要对 DEV、TEST、PROD 数据库都做一遍操作。<br>很多时候，我们并不能保证像机器一样，每次都操作都正确，很快出现了许多问题：</p>
<ul>
<li>该计算机上的数据库处于什么状态？</li>
<li>此脚本是否已经应用？</li>
<li>之后，生产中的快速修复是否已在测试中应用？</li>
<li>如何设置新的数据库实例？</li>
</ul>
<p>这些问题的答案常常是：我们不知道。</p>
<p><strong>数据库版本控制是控制这种混乱的好方法。</strong>本文就带大家入门一个数据库版本控制工具 Flyway。</p>
<h4 id="什么是-Flyway"><a href="#什么是-Flyway" class="headerlink" title="什么是 Flyway"></a>什么是 Flyway</h4><p>在 Flyway 的官网 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcv">https://flywaydb.org/<i class="fa fa-external-link-alt"></i></span> 中，对自己的介绍是：</p>
<blockquote>
<p>Version control for your database.<br>Robust schema evolution across all your environments.<br>With ease, pleasure and plain SQL.</p>
<p>即 数据库的版本控制。<br>使用轻松简单的 SQL 在所有环境中进行稳健的架构演变。</p>
</blockquote>
<p>Flyway 提供了 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">SQL-based migrations<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">Java-based migrations<i class="fa fa-external-link-alt"></i></span> 两种数据库变更方式。本文将分别用这两种方式来演示如何使用 Flyway。</p>
<h4 id="Spring-Boot-集成-Flyway"><a href="#Spring-Boot-集成-Flyway" class="headerlink" title="Spring Boot 集成 Flyway"></a>Spring Boot 集成 Flyway</h4><p>在 Spring Boot 项目中，提供了对 Flyway 的内置支持。基本上能实现开箱即用。</p>
<h5 id="第一步：首先创建一个-Spring-Boot-项目。"><a href="#第一步：首先创建一个-Spring-Boot-项目。" class="headerlink" title="第一步：首先创建一个 Spring Boot 项目。"></a>第一步：首先创建一个 Spring Boot 项目。</h5><h5 id="第二步：pom-xml-文件引入-Flyway-依赖"><a href="#第二步：pom-xml-文件引入-Flyway-依赖" class="headerlink" title="第二步：pom.xml 文件引入 Flyway 依赖"></a>第二步：<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/pom.xml"><code>pom.xml</code></a> 文件引入 <code>Flyway</code> 依赖</h5><p>在 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/pom.xml"><code>pom.xml</code></a>文件中，引入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 实现对数据库连接池的自动化配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot-starter-jdbc 支持 Flyway 的自动化配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 本文 Mysql 使用的 5.6 版本,所以 flyway 选择 5.2.4,高版本 Flyway 需升级 mysql 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="第三步：配置-application-properties"><a href="#第三步：配置-application-properties" class="headerlink" title="第三步：配置 application.properties"></a>第三步：配置 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/application.properties"><code>application.properties</code></a></h5><p><a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/application.properties"><code>application.properties</code></a> 配置如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://yizhuo.com:3306/flyway?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="comment"># 数据库驱动</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库账号</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">12345</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启 Flyway 功能</span></span><br><span class="line"><span class="meta">spring.flyway.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 禁用 Flyway 所有的 drop 相关的逻辑，避免出现跑路的情况。</span></span><br><span class="line"><span class="meta">spring.flyway.cleanDisabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># Flyway 版本控制所使用的表名 默认为 flyway_schema_history</span></span><br><span class="line"><span class="meta">spring.flyway.table</span>=<span class="string">management_flyway_schema_history</span></span><br><span class="line"><span class="comment"># 配置 SQL-based 的 SQL 脚本在该目录下，默认配置即 classpath:db/migration</span></span><br><span class="line"><span class="meta">spring.flyway.locations[0]</span>=<span class="string">classpath:db/migration</span></span><br><span class="line"><span class="comment"># 配置 Java-based 的 Java 类在该目录下</span></span><br><span class="line"><span class="meta">spring.flyway.locations[1]</span>=<span class="string">classpath:com.github.zhuyizhuo.flyway.demo.migration</span></span><br><span class="line"><span class="comment"># 是否校验迁移脚本目录。如果配置为 true，代表需要校验, 如果目录下没有迁移脚本，会抛出 IllegalStateException 异常</span></span><br><span class="line"><span class="meta">spring.flyway.check-location</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="meta">spring.flyway.url</span>=<span class="string">$&#123;spring.datasource.url&#125;</span></span><br><span class="line"><span class="comment"># 数据库账号</span></span><br><span class="line"><span class="meta">spring.flyway.user</span>=<span class="string">$&#123;spring.datasource.username&#125;</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="meta">spring.flyway.password</span>=<span class="string">$&#123;spring.datasource.password&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式一：SQL-based-migrations-创建-SQL-迁移脚本"><a href="#方式一：SQL-based-migrations-创建-SQL-迁移脚本" class="headerlink" title="方式一：SQL-based migrations 创建 SQL 迁移脚本"></a>方式一：<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">SQL-based migrations<i class="fa fa-external-link-alt"></i></span> 创建 SQL 迁移脚本</h5><p>在 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/"><code>resources/db/migration</code></a> 目录下，创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/V1.0__INIT_USERS.sql"><code>V1.0__INIT_USERS.sql</code></a> SQL 迁移脚本。内容如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一条数据 密码为 123456 MD5 加密的 32 位大写</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(username, password, create_time) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;E10ADC3949BA59ABBE56E057F20F883E&#x27;</span>, now());</span><br></pre></td></tr></table></figure>

<p>Flyway 规定脚本  <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/V1.0__INIT_USERS.sql"><code>V1.0__INIT_USERS.sql</code></a>  的命名必须遵循以下命名模式：<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621174844867.png" alt="flyway-naming"></p>
<ul>
<li>Prefix 前缀 <ul>
<li><code>V</code>用于版本控制（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3NxbE1pZ3JhdGlvblByZWZpeA==">配置<i class="fa fa-external-link-alt"></i></span>）， <code>U</code>用于撤消迁移（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3VuZG9TcWxNaWdyYXRpb25QcmVmaXg=">配置<i class="fa fa-external-link-alt"></i></span>）和 <code>R</code>用于可重复迁移（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3JlcGVhdGFibGVTcWxNaWdyYXRpb25QcmVmaXg=">配置<i class="fa fa-external-link-alt"></i></span>）。</li>
<li><strong>版本化的迁移</strong>具有<strong>版本</strong>，<strong>描述</strong>和<strong>校验和</strong>。版本化迁移是最常见的迁移类型。它们仅按顺序<strong>应用一次</strong>。<strong>版本化迁移</strong>通常用于：<ul>
<li>创建/更改/删除表/…</li>
<li>参考数据更新</li>
<li>用户数据更正</li>
</ul>
</li>
<li><strong>撤销迁移</strong>负责撤消具有相同版本的版本化迁移的影响。<strong>不建议在线上使用</strong>，原因参考 <span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI2ltcG9ydGFudC1ub3Rlcw==">Flyway 官网<i class="fa fa-external-link-alt"></i></span></li>
<li><strong>可重复的迁移</strong>有<strong>描述</strong>和<strong>校验和</strong>，但没有版本。每次校验和更改时（重新）应用它们，而不是仅运行一次。<br>这对于管理数据库对象非常有用，该数据库对象的定义随后可以在版本控制中仅保存在单个文件中。它们通常用于<ul>
<li>（重新）创建视图/过程/功能/包/…</li>
<li>批量插入参考数据</li>
</ul>
</li>
</ul>
</li>
<li>Version 版本号 <ul>
<li>每一个迁移脚本，都需要一个对应一个<strong>唯一的版本号</strong>。只要符合通常的点分符号，任何版本都是有效的。<strong>在大多数情况下，只需要一个简单的递增整数即可</strong>。但是Flyway非常灵活，所有这些版本都是有效的版本迁移版本：<ul>
<li>001</li>
<li>5.2</li>
<li>1.2.3.4.5.6.7.8.9</li>
<li>20130115113556</li>
<li>2013.01.15.11.35.56<br>版本迁移按版本顺序应用。版本按照您通常期望的方式按数字排序。</li>
</ul>
</li>
<li>脚本的执行顺序，按照版本号的顺序。<strong>Flyway</strong> 是如何比较两个 <strong>SQL</strong> 文件的先后顺序呢？它采用 <strong>采用左对齐原则, 缺位用 0 代替</strong> 。举几个例子：<ul>
<li>1.0.1.1 比 1.0.1 版本高。</li>
<li>1.0.10 比 1.0.9.4 版本高。</li>
<li>1.0.10 和 1.0.010 版本号一样高, 每个版本号部分的前导 0 会被忽略。</li>
</ul>
</li>
</ul>
</li>
<li>Separator 分隔符：两个下划线 <code>_</code> ，即 <code>__</code> 。（可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3NxbE1pZ3JhdGlvblNlcGFyYXRvcg==">配置<i class="fa fa-external-link-alt"></i></span>），一般使用缺省配置。</li>
<li>Description 描述：描述脚本的用途。</li>
<li>Suffix 后缀：<code>.sql</code> 。可<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9jb21tYW5kbGluZS9taWdyYXRlI3NxbE1pZ3JhdGlvblN1ZmZpeGVz">配置<i class="fa fa-external-link-alt"></i></span>，一般使用缺省配置。</li>
</ul>
<h5 id="启动-Spring-Boot-项目"><a href="#启动-Spring-Boot-项目" class="headerlink" title="启动 Spring Boot 项目"></a>启动 Spring Boot 项目</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlywayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FlywayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-06-21 21:32:31.934  INFO 40674 --- [           main] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 5.2.4 by Boxfuse</span><br><span class="line">2020-06-21 21:32:37.590  INFO 40674 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://yizhuo.com:3306/flyway (MySQL 5.6)</span><br><span class="line">2020-06-21 21:32:37.780  WARN 40674 --- [           main] o.f.c.i.s.classpath.ClassPathScanner     : Unable to resolve location classpath:com/github/zhuyizhuo/flyway/demo/migration</span><br><span class="line">// 发现 1 个迁移脚本。</span><br><span class="line">2020-06-21 21:32:38.009  INFO 40674 --- [           main] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.148s)</span><br><span class="line">// 创建 management_flyway_schema_history 表</span><br><span class="line">2020-06-21 21:32:38.223  INFO 40674 --- [           main] o.f.c.i.s.JdbcTableSchemaHistory         : Creating Schema History table: `flyway`.`management_flyway_schema_history`</span><br><span class="line">// 当前数据库的迁移版本</span><br><span class="line">2020-06-21 21:32:38.699  INFO 40674 --- [           main] o.f.core.internal.command.DbMigrate      : Current version of schema `flyway`: &lt;&lt; Empty Schema &gt;&gt;</span><br><span class="line">// 开始执行当前迁移脚本 版本 1.0</span><br><span class="line">2020-06-21 21:32:38.729  INFO 40674 --- [           main] o.f.core.internal.command.DbMigrate      : Migrating schema `flyway` to version 1.0 - INIT USERS</span><br><span class="line">// MYSQL 告警日志 可忽略</span><br><span class="line">2020-06-21 21:32:38.876  WARN 40674 --- [           main] o.f.c.i.s.DefaultSqlScriptExecutor       : DB: Unknown table &#x27;flyway.users&#x27; (SQL State: 42S02 - Error Code: 1051)</span><br><span class="line">// 成功执行一个迁移</span><br><span class="line">2020-06-21 21:32:39.446  INFO 40674 --- [           main] o.f.core.internal.command.DbMigrate      : Successfully applied 1 migration to schema `flyway` (execution time 00:01.251s)</span><br><span class="line">2020-06-21 21:32:39.721  INFO 40674 --- [           main] c.g.z.flyway.demo.FlywayApplication      : Started FlywayApplication in 11.145 seconds (JVM running for 12.785)</span><br></pre></td></tr></table></figure>

<p>查看数据库，发现表已经正常创建。并且插入了初始化数据。<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621215145105.png" alt="image-20200621215145105" style="zoom:50%;" /></p>
<p>在 <code>management_flyway_schema_history</code> 表中，出现了一条迁移脚本的记录：<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621215313344.png" alt="image-20200621215313344" style="zoom:50%;" /></p>
<p>各字段含义如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `management_flyway_schema_history` (</span><br><span class="line">  `installed_rank` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 安装顺序，从 1 开始递增。</span></span><br><span class="line">  `version` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 版本号</span></span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 迁移脚本描述</span></span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 脚本类型，目前有 SQL 和 Java 。</span></span><br><span class="line">  `script` <span class="type">varchar</span>(<span class="number">1000</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 脚本地址</span></span><br><span class="line">  `checksum` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 脚本校验码。避免已经执行的脚本，被人变更了。</span></span><br><span class="line">  `installed_by` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行脚本的数据库用户</span></span><br><span class="line">  `installed_on` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 安装时间</span></span><br><span class="line">  `execution_time` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行时长，单位毫秒</span></span><br><span class="line">  `success` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行结果是否成功。1-成功。0-失败</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`installed_rank`),</span><br><span class="line">  KEY `management_flyway_schema_history_s_idx` (`success`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>再次启动项目，日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-06-21 21:55:05.064  INFO 40853 --- [           main] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 5.2.4 by Boxfuse</span><br><span class="line">2020-06-21 21:55:10.977  INFO 40853 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://yizhuo.com:3306/flyway (MySQL 5.6)</span><br><span class="line">2020-06-21 21:55:11.229  WARN 40853 --- [           main] o.f.c.i.s.classpath.ClassPathScanner     : Unable to resolve location classpath:com/github/zhuyizhuo/flyway/demo/migration</span><br><span class="line">2020-06-21 21:55:11.548  INFO 40853 --- [           main] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.212s)</span><br><span class="line">2020-06-21 21:55:11.827  INFO 40853 --- [           main] o.f.core.internal.command.DbMigrate      : Current version of schema `flyway`: 1.0</span><br><span class="line">2020-06-21 21:55:11.857  INFO 40853 --- [           main] o.f.core.internal.command.DbMigrate      : Schema `flyway` is up to date. No migration necessary.</span><br><span class="line">2020-06-21 21:55:12.257  INFO 40853 --- [           main] c.g.z.flyway.demo.FlywayApplication      : Started FlywayApplication in 12.763 seconds (JVM running for 14.531)</span><br></pre></td></tr></table></figure>
<p>会发现当前已经是最新版本，无需执行迁移。<br>我们来修改一下<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-flyway/src/main/resources/db/migration/V1.0__INIT_USERS.sql"><code>V1.0__INIT_USERS.sql</code></a> 脚本，在第一行插入一个空格，再次启动项目，会报如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.flywaydb.core.api.FlywayException: Validate failed: Migration checksum mismatch for migration version 1.0</span><br><span class="line">-&gt; Applied to database : -1350962438</span><br><span class="line">-&gt; Resolved locally    : -1984295967</span><br></pre></td></tr></table></figure>

<p>根据提示信息可以看出，因为该脚本的校验和发生了变化，所以抛出异常。这样的设计，保证不会因为已执行的脚本被改动，而出现不一致的问题。</p>
<h5 id="方式二：Java-based-migrations-创建-Java-类-使用自定义类名"><a href="#方式二：Java-based-migrations-创建-Java-类-使用自定义类名" class="headerlink" title="方式二：Java-based migrations  创建 Java 类 [使用自定义类名]"></a>方式二：<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">Java-based migrations<i class="fa fa-external-link-alt"></i></span>  创建 Java 类 [使用自定义类名]</h5><p>在<code>com.github.zhuyizhuo.flyway.demo.migration</code>包下，创建 <code>UpdateUserName</code>类，修改<code>Users</code>中初始化数据的用户名，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateUserName</span> <span class="keyword">implements</span> <span class="title">JavaMigration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 JdbcTemplate ，方便 JDBC 操作</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(context.getConfiguration().getDataSource());</span><br><span class="line">        <span class="comment">// 查询所有用户，如果用户名为 张三 ，则变更成 李四</span></span><br><span class="line">        template.query(<span class="string">&quot;SELECT id, username, password, create_time FROM users&quot;</span>, <span class="keyword">new</span> RowCallbackHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRow</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                <span class="comment">// 遍历返回的结果</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    String username = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;张三&quot;</span>.equals(username)) &#123;</span><br><span class="line">                        Integer id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        template.update(<span class="string">&quot;UPDATE users SET username = ? WHERE id = ?&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;李四&quot;</span>, id);</span><br><span class="line">                        logger.info(<span class="string">&quot;[migrate][更新 user(&#123;&#125;) 的用户名(&#123;&#125; =&gt; &#123;&#125;)&quot;</span>, id, username, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (rs.next());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/** 版本号为 1.1 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MigrationVersion <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MigrationVersion.fromVersion(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/** 描述 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update user name&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUndo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/** 执行是否应在事务内部进行 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canExecuteInTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认校验和为 0  需重写 返回自己自定义计算的校验和 此处 demo 返回固定值11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getChecksum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="再次启动-Spring-Boot-项目"><a href="#再次启动-Spring-Boot-项目" class="headerlink" title="再次启动 Spring Boot 项目"></a>再次启动 Spring Boot 项目</h5><p>执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-06-21 22:17:27.999  INFO 41175 --- [           main] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 5.2.4 by Boxfuse</span><br><span class="line">2020-06-21 22:17:33.717  INFO 41175 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://yizhuo.com:3306/flyway (MySQL 5.6)</span><br><span class="line">2020-06-21 22:17:34.135  INFO 41175 --- [           main] o.f.core.internal.command.DbValidate     : Successfully validated 2 migrations (execution time 00:00.189s)</span><br><span class="line">2020-06-21 22:17:34.410  INFO 41175 --- [           main] o.f.core.internal.command.DbMigrate      : Current version of schema `flyway`: 1.0</span><br><span class="line">2020-06-21 22:17:34.441  INFO 41175 --- [           main] o.f.core.internal.command.DbMigrate      : Migrating schema `flyway` to version 1.1 - update user name</span><br><span class="line">2020-06-21 22:17:35.067  INFO 41175 --- [           main] c.g.z.f.demo.migration.UpdateUserName    : [migrate][更新 user(1) 的用户名(张三 =&gt; 李四)</span><br><span class="line">2020-06-21 22:17:35.410  INFO 41175 --- [           main] o.f.core.internal.command.DbMigrate      : Successfully applied 1 migration to schema `flyway` (execution time 00:01.126s)</span><br><span class="line">2020-06-21 22:17:35.667  INFO 41175 --- [           main] c.g.z.flyway.demo.FlywayApplication      : Started FlywayApplication in 12.281 seconds (JVM running for 14.572)</span><br></pre></td></tr></table></figure>

<p>再次查询 mysql ，发现数据已经被更新<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621222842067.png" alt="image-20200621222842067" style="zoom:70%;" /><br>并且在 <code>management_flyway_schema_history</code> 表中，增加了一条版本号为<code>1.1</code>的迁移脚本的日志。<br><img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621222930230.png" alt="image-20200621222930230" style="zoom:50%;" /></p>
<h5 id="方式二：Java-based-migrations-创建-Java-类-使用-Flyway-的命名方式命名"><a href="#方式二：Java-based-migrations-创建-Java-类-使用-Flyway-的命名方式命名" class="headerlink" title="方式二：Java-based migrations  创建 Java 类 [使用 Flyway 的命名方式命名]"></a>方式二：<span class="exturl" data-url="aHR0cHM6Ly9mbHl3YXlkYi5vcmcvZG9jdW1lbnRhdGlvbi9taWdyYXRpb25zI3NxbC1iYXNlZC1taWdyYXRpb25z">Java-based migrations<i class="fa fa-external-link-alt"></i></span>  创建 Java 类 [使用 Flyway 的命名方式命名]</h5><p>在<code>com.github.zhuyizhuo.flyway.demo.migration</code>包下，创建 <code>V1_2__Another_user</code>类，新增初始化数据，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V1_2__Another_user</span> <span class="keyword">extends</span> <span class="title">BaseJavaMigration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JdbcTemplate(<span class="keyword">new</span> SingleConnectionDataSource(context.getConnection(), <span class="keyword">true</span>))</span><br><span class="line">                .execute(<span class="string">&quot;INSERT INTO users (username, password, create_time) VALUES (&#x27;James&#x27;, &#x27;E10ADC3949BA59ABBE56E057F20F883E&#x27;, now())&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认校验和为 0  需重写 返回自己自定义计算的校验和 此处 demo 返回固定值12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getChecksum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="再再次启动项目。"><a href="#再再次启动项目。" class="headerlink" title="再再次启动项目。"></a>再再次启动项目。</h5><p>日志省略。<br>查看数据库数据，新增了一条<code> James</code> 的数据如下：</p>
<img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621225335153.png" alt="image-20200621225335153" style="zoom:70%;" />

<p>在 <code>management_flyway_schema_history</code> 表中，增加了一条版本号为<code>1.2</code>的迁移脚本的日志。<img data-src="/assets/picture/spring-boot-flyway-database-version-control/image-20200621225959300.png" alt="image-20200621225959300" style="zoom:50%;" /></p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>本文的完整工程可以查看下面仓库中的<code>spring-boot-samples-flyway</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <categories>
        <category>原创</category>
        <category>教程</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Original</tag>
        <tag>Flyway</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端通信有字段需要加解密你会如何处理</title>
    <url>/2020/07/12/spring-boot/spring-boot-jackson/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote>
<p>最近有个需求：后端所有数据的 ID 字段返回前段时均需要加密处理，前端传入后端需要解密处理，你会如何设计呢？</p>
</blockquote>
<p><strong>普通做法：</strong></p>
<p>返回数据时直接调用工具类进行 ID 字符串的加密，前端传入数据后再调用工具类进行 ID 的解密</p>
<p>这样做的问题是所有地方都需要进行加解密的处理，但是此操作和业务无关，不应该被感知，所以本文带大家来从框架层面解决这个问题。</p>
<span id="more"></span>

<h2 id="方案一：无感知版本-需按以下规范使用"><a href="#方案一：无感知版本-需按以下规范使用" class="headerlink" title="方案一：无感知版本 需按以下规范使用"></a>方案一：无感知版本 需按以下规范使用</h2><p>1、返回前端数据除了 ID,其他字段不能使用 Long 类型(Long 类型的所有字段都将进行 hash 编码)<br>2、前端传入加密 id 字段名统一为 hashId, 后端接收参数名为 hashId 则接收未解码的 hashId.后端参数为 id 则接收解码的 id;</p>
<h3 id="出参加密：使用自定义-Jackson-序列化类解决出参加密"><a href="#出参加密：使用自定义-Jackson-序列化类解决出参加密" class="headerlink" title="出参加密：使用自定义 Jackson 序列化类解决出参加密"></a>出参加密：使用自定义 <code>Jackson</code> 序列化类解决出参加密</h3><h4 id="创建一个-SpringBoot-项目，添加自定义的-Jackson-序列化类如下"><a href="#创建一个-SpringBoot-项目，添加自定义的-Jackson-序列化类如下" class="headerlink" title="创建一个 SpringBoot 项目，添加自定义的 Jackson 序列化类如下"></a>创建一个 <code>SpringBoot</code> 项目，添加自定义的 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/customize/CustomeJackSon.java"><code>Jackson</code></a> 序列化类如下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 添加此注解 则 SpringBoot 框架会自动将此序列化类注入 */</span></span><br><span class="line"><span class="meta">@JsonComponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomeJackSon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Serialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Long id, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            jsonGenerator.writeString(HashIdUtils.encode(id));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h4><h5 id="模拟编解码工具类HashIdUtils"><a href="#模拟编解码工具类HashIdUtils" class="headerlink" title="模拟编解码工具类HashIdUtils"></a>模拟编解码工具类<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/util/HashIdUtils.java"><code>HashIdUtils</code></a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIdUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BaseConstant.PREFIX + id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String hashId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashId.contains(BaseConstant.PREFIX))&#123;</span><br><span class="line">            <span class="keyword">return</span> hashId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashId.replace(BaseConstant.PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">decode2Long</span><span class="params">(String hashId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashId.contains(BaseConstant.PREFIX))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Long.valueOf(hashId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(hashId.replace(BaseConstant.PREFIX, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="常量类-BaseConstant"><a href="#常量类-BaseConstant" class="headerlink" title="常量类 BaseConstant"></a>常量类 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/constants/BaseConstant.java"><code>BaseConstant</code></a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">&quot;hash_&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCODE_KEY = <span class="string">&quot;hashId&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DECODE_KEY = <span class="string">&quot;id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_CODE = <span class="string">&quot;00000&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ILLEGAL_ARGUMENT = <span class="string">&quot;00001&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="用户信息UserInfo"><a href="#用户信息UserInfo" class="headerlink" title="用户信息UserInfo"></a>用户信息<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/model/UserInfo.java"><code>UserInfo</code></a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long height;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Car&gt; cars;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略 Get Set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="车辆信息-Car"><a href="#车辆信息-Car" class="headerlink" title="车辆信息 Car"></a>车辆信息 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/model/Car.java"><code>Car</code></a></h5><p>用来测试嵌套的 ID 是否会被加解密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 省略 Get Set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通用返回对象-BaseResponse"><a href="#通用返回对象-BaseResponse" class="headerlink" title="通用返回对象 BaseResponse"></a>通用返回对象 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/model/BaseResponse.java"><code>BaseResponse</code></a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建-UserController"><a href="#创建-UserController" class="headerlink" title="创建 UserController:"></a>创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/controller/UserController.java"><code>UserController</code></a>:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">userList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserInfo zhangSan = <span class="keyword">new</span> UserInfo(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        zhangSan.setHeight(<span class="number">178L</span>);</span><br><span class="line">        UserInfo jack = <span class="keyword">new</span> UserInfo(<span class="number">2L</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        UserInfo james = <span class="keyword">new</span> UserInfo(<span class="number">3L</span>,<span class="string">&quot;james&quot;</span>);</span><br><span class="line">        jack.addCar(<span class="keyword">new</span> Car(<span class="number">999L</span>,<span class="string">&quot;保时捷&quot;</span>));</span><br><span class="line">        jack.addCar(<span class="keyword">new</span> Car(<span class="number">888L</span>,<span class="string">&quot;奥迪&quot;</span>));</span><br><span class="line">        List&lt;UserInfo&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(zhangSan);</span><br><span class="line">        users.add(jack);</span><br><span class="line">        users.add(james);</span><br><span class="line">        <span class="keyword">return</span> BaseResponse.success(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="打开浏览器访问-http-localhost-8080-user-list-返回信息如下"><a href="#打开浏览器访问-http-localhost-8080-user-list-返回信息如下" class="headerlink" title="打开浏览器访问 http://localhost:8080/user/list 返回信息如下"></a>打开浏览器访问 <code>http://localhost:8080/user/list</code> 返回信息如下</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;hash_1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;hash_178&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;cars&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;hash_2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;height&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;cars&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;hash_999&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;保时捷&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;hash_888&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;奥迪&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;hash_3&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;height&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;james&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;cars&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到返回信息 ID 已经变为 <code>hash_1</code>、<code>hash_2</code>、<code>hash_3</code> 并且<code>Height</code>车辆的 <code>ID</code> 也被自动加密。</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><blockquote>
<p>使用者无感知，不需要添加任何注解，对代码无侵入，只需按规范使用即可，可以专注于业务逻辑。</p>
</blockquote>
<h4 id="不足："><a href="#不足：" class="headerlink" title="不足："></a>不足：</h4><blockquote>
<ol>
<li><p>如果使用 @JsonComponent 注解，将会把 Jackson 序列化注册为全局处理，其他返回前端的业务字段不能使用 Long 类型。</p>
</li>
<li><p>序列化方式为 Jackson，后续如果使用其他序列化方式则需要改动。</p>
</li>
</ol>
</blockquote>
<h3 id="入参解密：使用-Filter-RequestWrapper"><a href="#入参解密：使用-Filter-RequestWrapper" class="headerlink" title="入参解密：使用 Filter + RequestWrapper"></a>入参解密：使用 <code>Filter</code> + <code>RequestWrapper</code></h3><h4 id="第一步：新增自定义Filter-："><a href="#第一步：新增自定义Filter-：" class="headerlink" title="第一步：新增自定义Filter ："></a>第一步：新增自定义<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/filter/HttpServletFilter.java"><code>Filter</code></a> ：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        chain.doFilter(<span class="keyword">new</span> ParameterRequestWrapper((HttpServletRequest) request), response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：新增自定义-ParameterRequestWrapper："><a href="#第二步：新增自定义-ParameterRequestWrapper：" class="headerlink" title="第二步：新增自定义 ParameterRequestWrapper："></a>第二步：新增自定义 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/wrapper/ParameterRequestWrapper.java"><code>ParameterRequestWrapper</code></a>：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bodyParams;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String[]&gt; params;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        initParameterMap(request);</span><br><span class="line">        initInputStream(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String result;</span><br><span class="line">        Object v = params.get(name);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">            String[] strArr = (String[]) v;</span><br><span class="line">            <span class="keyword">if</span> (strArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result = strArr[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            result = (String) v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = v.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector&lt;&gt;(params.keySet()).elements();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] result;</span><br><span class="line">        Object v = params.get(name);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">            result = (String[]) v;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> String[]&#123;(String) v&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">new</span> String[]&#123;v.toString()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PostServletInputStream(bodyParams);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">this</span>.getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取 输入流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInputStream</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream inputStream = request.getInputStream();</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">                <span class="keyword">char</span>[] charBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">128</span>];</span><br><span class="line">                <span class="keyword">int</span> bytesRead = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = bufferedReader.read(charBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    stringBuilder.append(charBuffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bodyParams = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化参数 Map 处理 key1=value1&amp;key2=value2 类型的传参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initParameterMap</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = <span class="keyword">new</span> HashMap&lt;&gt;(req.getParameterMap());</span><br><span class="line">        <span class="comment">// 此处获取前端参数解密</span></span><br><span class="line">        String hashId = req.getParameter(BaseConstant.ENCODE_KEY);</span><br><span class="line">        <span class="keyword">if</span> (hashId != <span class="keyword">null</span> &amp;&amp; hashId.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            params.put(BaseConstant.DECODE_KEY, <span class="keyword">new</span> String[]&#123;HashIdUtils.decode(hashId)&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        String queryString = req.getQueryString();</span><br><span class="line">        <span class="keyword">if</span> (queryString != <span class="keyword">null</span> &amp;&amp; queryString.trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String[] params = queryString.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> splitIndex = params[i].indexOf(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (splitIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String key = params[i].substring(<span class="number">0</span>, splitIndex);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.params.containsKey(key)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (splitIndex &lt; params[i].length()) &#123;</span><br><span class="line">                        String value = params[i].substring(splitIndex + <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">this</span>.params.put(key, <span class="keyword">new</span> String[]&#123;value&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三步：重写输入流"><a href="#第三步：重写输入流" class="headerlink" title="第三步：重写输入流"></a>第三步：重写输入流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostServletInputStream</span>  <span class="keyword">extends</span> <span class="title">ServletInputStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream inputStream;</span><br><span class="line">    <span class="comment">/** 解析json之后的文本 */</span></span><br><span class="line">    <span class="keyword">private</span> String body ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PostServletInputStream</span><span class="params">(String body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.body=body;</span><br><span class="line">        inputStream = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> InputStream <span class="title">acquireInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.contains(BaseConstant.ENCODE_KEY))&#123;</span><br><span class="line">                ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                HashMap hashMap = mapper.readValue(body, HashMap.class);</span><br><span class="line">                Object o = hashMap.get(BaseConstant.ENCODE_KEY);</span><br><span class="line">                <span class="keyword">if</span> (o != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        String decode = HashIdUtils.decode(o.toString());</span><br><span class="line">                        hashMap.put(BaseConstant.DECODE_KEY, decode);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        <span class="comment">//ignore this exception</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                body = mapper.writeValueAsString(hashMap);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通过解析之后传入的文本生成inputStream以便后面control调用</span></span><br><span class="line">            inputStream = <span class="keyword">new</span> ByteArrayInputStream(body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inputStream;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> acquireInputStream().read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">markSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;mark not supported&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;reset not supported&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试代码：-1"><a href="#测试代码：-1" class="headerlink" title="测试代码："></a>测试代码：</h4><h5 id="UserController-新增两个方法如下"><a href="#UserController-新增两个方法如下" class="headerlink" title="UserController 新增两个方法如下"></a><a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/controller/UserController.java"><code>UserController</code></a> 新增两个方法如下</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 前端传入加密 id 字段名统一为 hashId</span></span><br><span class="line"><span class="comment">   * 后端接收参数名为 hashId 则接收未解码的 hashId.后端参数为 id 则接收解码的 id;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> hashId UserController#userList() 接口返回的 id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/info&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">queryUserInfo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;hashId&quot;,required = true)</span> String hashId,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@RequestParam(value = &quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;queryUserInfo hashId = &quot;</span> + hashId);</span><br><span class="line">      System.out.println(<span class="string">&quot;queryUserInfo id = &quot;</span> + id);</span><br><span class="line">      UserInfo info = <span class="keyword">new</span> UserInfo();</span><br><span class="line">      info.setId(id);</span><br><span class="line">      info.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">      info.setNickName(<span class="string">&quot;法外狂徒&quot;</span>+id);</span><br><span class="line">      info.setEmail(<span class="string">&quot;zhangsan@gmail.com&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> BaseResponse.success(info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/query&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">queryUser</span><span class="params">(<span class="meta">@RequestBody</span> UserInfo user)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;queryUser id = &quot;</span> + user.getId());</span><br><span class="line">      <span class="keyword">if</span> (user.getId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse(BaseConstant.ILLEGAL_ARGUMENT,<span class="string">&quot;用户 id 为空!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      UserInfo info = <span class="keyword">new</span> UserInfo();</span><br><span class="line">      info.setId(user.getId());</span><br><span class="line">      info.setHeight(<span class="number">178L</span>);</span><br><span class="line">      info.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">      info.setNickName(<span class="string">&quot;法外狂徒&quot;</span>);</span><br><span class="line">      info.setEmail(<span class="string">&quot;zhangsan@gmail.com&quot;</span>);</span><br><span class="line">      info.addCar(<span class="keyword">new</span> Car(<span class="number">333L</span>,<span class="string">&quot;大众&quot;</span>));</span><br><span class="line">      <span class="keyword">return</span> BaseResponse.success(info);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用-Postman-测试-http-localhost-8080-user-query-接口，传入参数"><a href="#使用-Postman-测试-http-localhost-8080-user-query-接口，传入参数" class="headerlink" title="使用 Postman 测试 http://localhost:8080/user/query 接口，传入参数"></a>使用 <code>Postman</code> 测试 <code>http://localhost:8080/user/query</code> 接口，传入参数</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;hashId&quot;</span>: <span class="string">&quot;hash_1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出日志:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queryUser id = 1</span><br></pre></td></tr></table></figure>

<h5 id="使用-Postman-调用-http-localhost-8080-user-info-hashId-hash-2"><a href="#使用-Postman-调用-http-localhost-8080-user-info-hashId-hash-2" class="headerlink" title="使用 Postman 调用 http://localhost:8080/user/info?hashId=hash_2"></a>使用 <code>Postman</code> 调用 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3VzZXIvaW5mbz9oYXNoSWQ9aGFzaF8y">http://localhost:8080/user/info?hashId=hash_2<i class="fa fa-external-link-alt"></i></span></h5><p>后台输出日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queryUserInfo hashId = hash_2</span><br><span class="line">queryUserInfo id = 2</span><br></pre></td></tr></table></figure>

<p>前端收到返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;hash_2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;height&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;nickName&quot;</span>: <span class="string">&quot;法外狂徒2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;zhangsan@gmail.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cars&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><blockquote>
<p>对业务代码无任何侵入。业务编写者无感知。</p>
</blockquote>
<h4 id="不足：-1"><a href="#不足：-1" class="headerlink" title="不足："></a>不足：</h4><blockquote>
<ol>
<li>前端传入数据限制为 Json 和 key-value 类型</li>
<li>如果前端传入多个需要解密的参数，目前方案需要修改</li>
<li>目前方案不支持解密前端传入的嵌套 Json</li>
</ol>
</blockquote>
<h2 id="方案二：使用者需添加一个注解"><a href="#方案二：使用者需添加一个注解" class="headerlink" title="方案二：使用者需添加一个注解"></a>方案二：使用者需添加一个注解</h2><p>1、对返回前端需要编码的字段加注解 <code>@JsonSerialize(using = CustomeJackSon.Serialize.class)</code><br>2、(可选)对前端传入需要解码的字段加注解 <code>@JsonDeserialize(using = CustomeJackSon.Deserializer.class)</code>，添加该注解可为任意 Long 类型的字段，字段名不需按照第三条定义<br>3、前端传入加密 id 字段名统一为 hashId(可配置 也可以为 id 但是这样就无法区分传入的是加密的还是未加密的 id),<br>后端参数 为 hashId 则接受未解码的 hashId，后端参数为 id 则接收解码的 id;</p>
<h3 id="在方案一基础上修改自定义-Jackson-序列化如下："><a href="#在方案一基础上修改自定义-Jackson-序列化如下：" class="headerlink" title="在方案一基础上修改自定义 Jackson 序列化如下："></a>在方案一基础上修改自定义 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-jackson/src/main/java/com/github/zhuyizhuo/jackson/sample/customize/CustomeJackSon.java"><code>Jackson</code></a> 序列化如下：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**不加 <span class="doctag">@JsonComponent</span> 注解 </span></span><br><span class="line"><span class="comment">*  使用者自行加 <span class="doctag">@JsonSerialize</span>(using = CustomeJackSon.Serialize.class)</span></span><br><span class="line"><span class="comment">*  和 <span class="doctag">@JsonDeserialize</span>(using = CustomeJackSon.Deserializer.class)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomeJackSon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Serialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Long id, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            jsonGenerator.writeString(HashIdUtils.encode(id));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">            String id = jsonParser.getValueAsString();</span><br><span class="line">            <span class="keyword">if</span> (id != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> HashIdUtils.decode2Long(id);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(jsonParser, id, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两种方案对比"><a href="#两种方案对比" class="headerlink" title="两种方案对比"></a>两种方案对比</h2><ul>
<li><p>方案一按照规范来使用，对业务代码无任何侵入，并且在开发业务时对加解密毫无感知。</p>
<ul>
<li>不足之处为其他字段类型不可使用 Long 类型，但是经过系统中分析，发现其他字段基本不存在 Long 类型字段。</li>
<li>不支持前端传入嵌套 Json 的解密，目前前端参数无嵌套 Json</li>
<li>不支持前端传入多个加密字段的解密，可修改方案为迭代 Json 的 key ，如果存在加密标识则解密。</li>
</ul>
</li>
<li><p>方案二需添加注解，会对代码产生一定的侵入性，但是自由度比较大。</p>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>本文的完整工程可以查看下面仓库中的<code>spring-boot-2.x-samples/spring-boot-samples-jackson</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>原创</category>
        <category>Jackson</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>HTTPS</tag>
        <tag>Filter</tag>
        <tag>Jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成数据库版本管理工具 Liquibase</title>
    <url>/2020/07/04/spring-boot/spring-boot-liquibase-database-version-control/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://zhuyizhuo.oss-cn-beijing.aliyuncs.com/image/1.jpeg" alt="photo"></p>
<p>在 Spring Boot 项目中，提供了对 Liquibase 的内置支持。</p>
<span id="more"></span>

<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p>什么是数据库版本控制？为什么要进行数据库版本控制？可参考我上一篇文章 <span class="exturl" data-url="aHR0cDovL3podXlpemh1by5vbmxpbmUvMjAyMC8wNi8yMS9zcHJpbmctYm9vdC1mbHl3YXktZGF0YWJhc2UtdmVyc2lvbi1jb250cm9sLw==">SpringBoot 集成数据库版本管理工具 Flyway<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>Liquibase 通过在变更日志(<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL2RhdGFiYXNlY2hhbmdlbG9nLmh0bWw=">Change Log<i class="fa fa-external-link-alt"></i></span>)文件，配置每一个变更集(<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL2NoYW5nZXNldC5odG1s">Change Set<i class="fa fa-external-link-alt"></i></span>)，实现数据库变更的管理。</p>
<p>Liquibase 提供了多种格式，如下：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL3htbF9mb3JtYXQuaHRtbA==">XML Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL3lhbWxfZm9ybWF0Lmh0bWw=">YAML Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL2pzb25fZm9ybWF0Lmh0bWw=">JSON Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL3NxbF9mb3JtYXQuaHRtbA==">SQL Format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlxdWliYXNlLm9yZy9kb2N1bWVudGF0aW9uL290aGVyX2Zvcm1hdHMuaHRtbA==">Other Formats<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>在 Spring Boot 中，默认配置使用 YAML Format 。所以我们在入门的示例中，也使用这种格式。</p>
<p>下面，就让我们开始入门 Liquibase 吧。</p>
<h2 id="第一步：首先创建一个-Spring-Boot-项目。"><a href="#第一步：首先创建一个-Spring-Boot-项目。" class="headerlink" title="第一步：首先创建一个 Spring Boot 项目。"></a>第一步：首先创建一个 Spring Boot 项目。</h2><h2 id="第二步：pom-xml-文件引入-Liquibase-依赖"><a href="#第二步：pom-xml-文件引入-Liquibase-依赖" class="headerlink" title="第二步：pom.xml 文件引入 Liquibase 依赖"></a>第二步：<a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/pom.xml"><code>pom.xml</code></a> 文件引入 <code>Liquibase</code> 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 实现对数据库连接池的自动化配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 同时，spring-boot-starter-jdbc 支持 Liquibase 的自动化配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 MySQL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Liquibase 依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.liquibase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liquibase-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第三步：配置-application-yaml"><a href="#第三步：配置-application-yaml" class="headerlink" title="第三步：配置 application.yaml"></a>第三步：配置 <a href="https://github.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/application.yaml"><code>application.yaml</code></a></h2><p><a href="https://github.com/zhuyizhuo/spring-boot-samples/tree/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/application.yaml"><code>application.yaml</code></a> 配置如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># datasource 数据源配置内容，对应 DataSourceProperties 配置属性类</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/github_demo?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 数据库账号</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 数据库密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;MYSQL_PWD:123456&#125;</span></span><br><span class="line">  <span class="comment"># Liquibase 配置内容，对应 LiquibaseProperties 配置项</span></span><br><span class="line">  <span class="attr">liquibase:</span></span><br><span class="line">    <span class="comment"># 开启 Liquibase 功能。默认为 true 。</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Liquibase 配置文件地址</span></span><br><span class="line">    <span class="attr">change-log:</span> <span class="string">classpath:/db/changelog/db_changelog.yaml</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">$&#123;spring.datasource.url&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;spring.datasource.username&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;spring.datasource.password&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用：基于-SQL-的版本控制"><a href="#常用：基于-SQL-的版本控制" class="headerlink" title="常用：基于 SQL 的版本控制"></a>常用：基于 SQL 的版本控制</h2><h3 id="在-resources-db-changelog目录下创建-db-changelog-yaml文件"><a href="#在-resources-db-changelog目录下创建-db-changelog-yaml文件" class="headerlink" title="在 resources/db/changelog目录下创建 db_changelog.yaml文件"></a>在 <code>resources/db/changelog</code>目录下创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a>文件</h3><p>修改 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a> 变更日志，增加 <code>ID = 0</code> 的变更集合( Change Set ) ，不执行任何 SQL 。代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">databaseChangeLog:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">changeSet:</span> <span class="comment"># 对应一个 ChangeSet 对象</span></span><br><span class="line">      <span class="attr">id:</span> <span class="number">0</span> <span class="comment"># ChangeSet 编号</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">yizhuo</span> <span class="comment"># 作者</span></span><br><span class="line">      <span class="attr">comments:</span> <span class="string">空</span> <span class="comment"># 备注</span></span><br></pre></td></tr></table></figure>

<p>启动 Spring Boot 项目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiquibaseApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LiquibaseApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 20:25:22.804  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:22.885  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : CREATE TABLE github_demo.DATABASECHANGELOGLOCK (ID INT NOT NULL, `LOCKED` BIT(1) NOT NULL, LOCKGRANTED datetime NULL, LOCKEDBY VARCHAR(255) NULL, CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID))</span><br><span class="line">2020-07-04 20:25:23.017  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:23.037  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : DELETE FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:23.045  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOGLOCK (ID, `LOCKED`) VALUES (1, 0)</span><br><span class="line">2020-07-04 20:25:23.062  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 20:25:23.095  INFO 70787 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 20:25:24.929  INFO 70787 --- [           main] l.c.StandardChangeLogHistoryService      : Creating database history table with name: github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:24.930  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : CREATE TABLE github_demo.DATABASECHANGELOG (ID VARCHAR(255) NOT NULL, AUTHOR VARCHAR(255) NOT NULL, FILENAME VARCHAR(255) NOT NULL, DATEEXECUTED datetime NOT NULL, ORDEREXECUTED INT NOT NULL, EXECTYPE VARCHAR(10) NOT NULL, MD5SUM VARCHAR(35) NULL, `DESCRIPTION` VARCHAR(255) NULL, COMMENTS VARCHAR(255) NULL, TAG VARCHAR(255) NULL, LIQUIBASE VARCHAR(20) NULL, CONTEXTS VARCHAR(255) NULL, LABELS VARCHAR(255) NULL, DEPLOYMENT_ID VARCHAR(10) NULL)</span><br><span class="line">2020-07-04 20:25:25.007  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:25.012  INFO 70787 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:25.013  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">2020-07-04 20:25:25.019  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 20:25:25.048  INFO 70787 --- [           main] liquibase.changelog.ChangeSet            : ChangeSet classpath:/db/changelog/db_changelog.yaml::0::yizhuo ran successfully in 7ms</span><br><span class="line">2020-07-04 20:25:25.050  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MAX(ORDEREXECUTED) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 20:25:25.054  INFO 70787 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, `DESCRIPTION`, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES (&#x27;0&#x27;, &#x27;yizhuo&#x27;, &#x27;classpath:/db/changelog/db_changelog.yaml&#x27;, NOW(), 1, &#x27;8:d41d8cd98f00b204e9800998ecf8427e&#x27;, &#x27;empty&#x27;, &#x27;&#x27;, &#x27;EXECUTED&#x27;, NULL, NULL, &#x27;3.8.9&#x27;, &#x27;3865525034&#x27;)</span><br><span class="line">2020-07-04 20:25:25.101  INFO 70787 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br><span class="line">2020-07-04 20:25:25.387  INFO 70787 --- [           main] c.g.z.liquibase.LiquibaseApplication     : Started LiquibaseApplication in 8.936 seconds (JVM running for 10.127)</span><br></pre></td></tr></table></figure>

<p>在启动的日志中，我们看到 Liquibase 会自动创建两张表：</p>
<p> <code>DATABASECHANGELOG</code> ：数据库变更日志。每一条记录，对应记录每个变更集合( Change Set ) 的执行日志。表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `DATABASECHANGELOG` (</span><br><span class="line">  `ID` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- Change Set 编号</span></span><br><span class="line">  `AUTHOR` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 作者</span></span><br><span class="line">  `FILENAME` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- Change Log 文件路径</span></span><br><span class="line">  `DATEEXECUTED` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行时间</span></span><br><span class="line">  `ORDEREXECUTED` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行的顺序</span></span><br><span class="line">  `EXECTYPE` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 执行类型。枚举值有 EXECUTED/FAILED/SKIPPED/RERAN/MARK_RAN</span></span><br><span class="line">  `MD5SUM` <span class="type">varchar</span>(<span class="number">35</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- MD5 校验码</span></span><br><span class="line">  `DESCRIPTION` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 描述</span></span><br><span class="line">  `COMMENTS` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 备注</span></span><br><span class="line">  `TAG` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- Tag 标签</span></span><br><span class="line">  `LIQUIBASE` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- LIQUIBASE 版本号</span></span><br><span class="line">  `CONTEXTS` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 上下文</span></span><br><span class="line">  `LABELS` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- Label 标签</span></span><br><span class="line">  `DEPLOYMENT_ID` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="comment">-- 部署编号</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p> <code>DATABASECHANGELOGLOCK</code>：锁记录表，用于确保多个 JVM 进程同时只能有一个可以修改数据库。表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `DATABASECHANGELOGLOCK` (</span><br><span class="line">  `ID` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 锁的编号。</span></span><br><span class="line">  `LOCKED` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 是否锁。1-锁，0-未锁</span></span><br><span class="line">  `LOCKGRANTED` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 获得锁的时间</span></span><br><span class="line">  `LOCKEDBY` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 锁定人</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>我们去查询一下 Mysql，如下：</p>
<p><img data-src="/assets/picture/spring-boot-liquibase-database-version-controller/image-20200704203257673.png" alt="image"></p>
<p>并且 <code>DATABASECHANGELOG</code> 表多了一条数据如下(部分字段截图)</p>
<p><img data-src="/assets/picture/spring-boot-liquibase-database-version-controller/image-20200704213047702.png" alt="image"></p>
<h3 id="修改-db-changelog-yaml-文件，增加-ID-1-的变更集合-Change-Set-，如下："><a href="#修改-db-changelog-yaml-文件，增加-ID-1-的变更集合-Change-Set-，如下：" class="headerlink" title="修改 db_changelog.yaml 文件，增加 ID = 1 的变更集合( Change Set ) ，如下："></a>修改 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a> 文件，增加 <code>ID = 1</code> 的变更集合( Change Set ) ，如下：</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">changeSet:</span> <span class="comment"># 对应一个 ChangeSet 对象</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">yizhuo</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="string">初始化数据库表</span></span><br><span class="line">    <span class="attr">changes:</span> <span class="comment"># 对应 Change 数组。Change 是一个接口，每种操作对应一种 Change 实现类</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">sqlFile:</span> <span class="comment"># 使用 SQL 文件，对应 SQLFileChange 对象</span></span><br><span class="line">          <span class="attr">encoding:</span> <span class="string">utf8</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">classpath:db/changelog/sql/CHANGE_LOG_INIT_DB.sql</span></span><br></pre></td></tr></table></figure>

<p>在 <code>src/main/resources</code> 下创建目录 <code>db/changelog/sql/</code> ，并创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/sql/CHANGE_LOG_INIT_DB.sql"><code>CHANGE_LOG_INIT_DB.sql</code></a>文件如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(username, password, create_time) <span class="keyword">VALUES</span>(<span class="string">&#x27;zhuo&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, now());</span><br></pre></td></tr></table></figure>

<p>再次启动项目，日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 21:21:49.694  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:21:49.746  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:21:49.777  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 21:21:49.844  INFO 72084 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 21:21:51.881  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MD5SUM FROM github_demo.DATABASECHANGELOG WHERE MD5SUM IS NOT NULL LIMIT 1</span><br><span class="line">2020-07-04 21:21:51.889  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:21:51.921  INFO 72084 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:21:51.921  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">2020-07-04 21:21:52.058  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : -- 创建用户表</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;用户编号&#x27;,</span><br><span class="line">  `username` varchar(64) DEFAULT NULL COMMENT &#x27;账号&#x27;,</span><br><span class="line">  `password` varchar(32) DEFAULT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `idx_username` (`username`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4</span><br><span class="line">2020-07-04 21:21:52.260  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : -- 插入一条数据</span><br><span class="line">INSERT INTO `users`(username, password, create_time) VALUES(&#x27;zhuo&#x27;, &#x27;password&#x27;, now())</span><br><span class="line">2020-07-04 21:21:52.283  INFO 72084 --- [           main] liquibase.changelog.ChangeSet            : SQL in file classpath:db/changelog/sql/CHANGE_LOG_INIT_DB.sql executed</span><br><span class="line">2020-07-04 21:21:52.309  INFO 72084 --- [           main] liquibase.changelog.ChangeSet            : ChangeSet classpath:/db/changelog/db_changelog.yaml::1::yizhuo ran successfully in 364ms</span><br><span class="line">2020-07-04 21:21:52.310  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MAX(ORDEREXECUTED) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:21:52.321  INFO 72084 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, `DESCRIPTION`, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES (&#x27;1&#x27;, &#x27;yizhuo&#x27;, &#x27;classpath:/db/changelog/db_changelog.yaml&#x27;, NOW(), 2, &#x27;8:88a193289a4da5d24c9fde1ae442fb3d&#x27;, &#x27;sqlFile&#x27;, &#x27;&#x27;, &#x27;EXECUTED&#x27;, NULL, NULL, &#x27;3.8.9&#x27;, &#x27;3868911933&#x27;)</span><br><span class="line">2020-07-04 21:21:52.377  INFO 72084 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br><span class="line">2020-07-04 21:21:52.615  INFO 72084 --- [           main] c.g.z.liquibase.LiquibaseApplication     : Started LiquibaseApplication in 8.401 seconds (JVM running for 10.018)</span><br><span class="line">Disconnected from the target VM, address: &#x27;127.0.0.1:54078&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>可以看到日志里执行了我们配置的初始化 SQL ，去数据库查看发现 users 表已经创建，并且 <code>DATABASECHANGELOG</code> 表又多了一条数据如下</p>
<p><img data-src="/assets/picture/spring-boot-liquibase-database-version-controller/image-20200704213227760.png" alt="image"></p>
<p>我们修改一下 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/sql/CHANGE_LOG_INIT_DB.sql"><code>CHANGE_LOG_INIT_DB.sql</code></a> 文件内容，新增一行注释如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 注释</span></span><br></pre></td></tr></table></figure>

<p>再次启动项目，会发现日志报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 21:34:55.789  WARN 72294 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;liquibase&#x27; defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Invocation of init method failed; nested exception is liquibase.exception.ValidationFailedException: Validation Failed:</span><br><span class="line">     1 change sets check sum</span><br><span class="line">          classpath:/db/changelog/db_changelog.yaml::1::yizhuo was: 8:88a193289a4da5d24c9fde1ae442fb3d but is now: 8:1b6bc2489cce8400e6aa8cfd2de6725f</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Liquibase 会给每个变更集合( Change Set )，计算出一个 <code>MD5SUM</code> 字段。这样，每次启动时，都会校验已经执行的变更集合( Change Set )，是否发生了改变。如果是，抛出异常。这样，保证不会因为 变更集合( Change Set ) 变更，导致出现问题。</p>
</blockquote>
<p>测试完成，将 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/sql/CHANGE_LOG_INIT_DB.sql"><code>CHANGE_LOG_INIT_DB.sql</code></a> 文件恢复原样。</p>
<p>再次启动项目，日志如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 21:55:43.289  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:55:43.319  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 21:55:43.337  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 21:55:43.371  INFO 72969 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 21:55:45.062  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MD5SUM FROM github_demo.DATABASECHANGELOG WHERE MD5SUM IS NOT NULL LIMIT 1</span><br><span class="line">2020-07-04 21:55:45.066  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:55:45.080  INFO 72969 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 21:55:45.080  INFO 72969 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">2020-07-04 21:55:45.113  INFO 72969 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br><span class="line">2020-07-04 21:55:45.204  INFO 72969 --- [           main] c.g.z.liquibase.LiquibaseApplication     : Started LiquibaseApplication in 6.208 seconds (JVM running for 6.875)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在整个日志中，我可以看到 <code>ID = 1</code> 的变更集合( Change Set )不会重复执行。</p>
</blockquote>
<p>基于 SQL 的版本控制介绍完毕，大部分情况下我们都只使用基于 SQL 的版本控制，但是遇到复杂的业务需要根据业务逻辑处理数据，这时基于 SQL 的版本控制可能就不够用了，下面来介绍基于 Java 类的版本控制</p>
<h2 id="扩展：基于-Java-类的版本控制"><a href="#扩展：基于-Java-类的版本控制" class="headerlink" title="扩展：基于 Java 类的版本控制"></a>扩展：基于 Java 类的版本控制</h2><p>在 <code>com.github.zhuyizhuo.liquibase.sample</code>目录下创建 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/java/com/github/zhuyizhuo/liquibase/sample/FixUsername.java"><code>FixUsername.java</code></a> 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixUsername</span> <span class="keyword">implements</span> <span class="title">CustomTaskChange</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Database database)</span> <span class="keyword">throws</span> CustomChangeException </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 此处实现复杂业务逻辑  操作数据库之类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行业务逻辑。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfirmationMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> SetupException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileOpener</span><span class="params">(ResourceAccessor resourceAccessor)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValidationErrors <span class="title">validate</span><span class="params">(Database database)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-liquibase/src/main/resources/db/changelog/db_changelog.yaml"><code>db_changelog.yaml</code></a> 变更日志，增加 <code>ID = 2</code> 的变更集合( Change Set ) 。代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">changeSet:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">yizhuo</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="string">自定义业务逻辑类</span></span><br><span class="line">    <span class="attr">changes:</span> <span class="comment"># 对应 Change 数组。Change 是一个接口，每种操作对应一种 Change 实现类</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">customChange:</span> &#123;<span class="attr">class:</span> <span class="string">com.github.zhuyizhuo.liquibase.sample.FixUsername</span>&#125;</span><br></pre></td></tr></table></figure>

<p>再次启动项目。执行日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-04 22:09:33.489  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 22:09:33.537  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOGLOCK</span><br><span class="line">2020-07-04 22:09:33.548  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT `LOCKED` FROM github_demo.DATABASECHANGELOGLOCK WHERE ID=1</span><br><span class="line">2020-07-04 22:09:33.589  INFO 73234 --- [           main] l.lockservice.StandardLockService        : Successfully acquired change log lock</span><br><span class="line">2020-07-04 22:09:34.875  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MD5SUM FROM github_demo.DATABASECHANGELOG WHERE MD5SUM IS NOT NULL LIMIT 1</span><br><span class="line">2020-07-04 22:09:34.879  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 22:09:34.886  INFO 73234 --- [           main] l.c.StandardChangeLogHistoryService      : Reading from github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 22:09:34.886  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT * FROM github_demo.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC</span><br><span class="line">执行业务逻辑。。</span><br><span class="line">2020-07-04 22:09:34.905  INFO 73234 --- [           main] liquibase.changelog.ChangeSet            : null</span><br><span class="line">2020-07-04 22:09:34.908  INFO 73234 --- [           main] liquibase.changelog.ChangeSet            : ChangeSet classpath:/db/changelog/db_changelog.yaml::2::yizhuo ran successfully in 7ms</span><br><span class="line">2020-07-04 22:09:34.909  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : SELECT MAX(ORDEREXECUTED) FROM github_demo.DATABASECHANGELOG</span><br><span class="line">2020-07-04 22:09:34.912  INFO 73234 --- [           main] liquibase.executor.jvm.JdbcExecutor      : INSERT INTO github_demo.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, `DESCRIPTION`, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES (&#x27;2&#x27;, &#x27;yizhuo&#x27;, &#x27;classpath:/db/changelog/db_changelog.yaml&#x27;, NOW(), 3, &#x27;8:39259f2c0bad8428733b5b6c30d30a0a&#x27;, &#x27;customChange&#x27;, &#x27;&#x27;, &#x27;EXECUTED&#x27;, NULL, NULL, &#x27;3.8.9&#x27;, &#x27;3871774892&#x27;)</span><br><span class="line">2020-07-04 22:09:34.943  INFO 73234 --- [           main] l.lockservice.StandardLockService        : Successfully released change log lock</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们可以看到，ID = 2 的变更集合( Change Set )完成了执行。</p>
</blockquote>
<p>此时，我们去查询下 MySQL 。如下：</p>
<p><img data-src="/assets/picture/spring-boot-liquibase-database-version-controller/image-20200704221143804.png" alt="image"></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>本文的完整工程可以查看下面仓库中的<code>spring-boot-samples-liquibase</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <categories>
        <category>原创</category>
        <category>教程</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Original</tag>
        <tag>Liquibase</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 通过 url 访问获取内部或者外部磁盘静态资源</title>
    <url>/2020/06/11/spring-boot/spring-boot-resources-visit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>在 Web 开发中，静态资源的访问是必不可少的，如：图片、JS、CSS 等资源的访问。<br>Spring Boot 对静态资源访问提供了很好的支持，基本使用默认配置就能满足开发需求。</p>
</blockquote>
<h2 id="默认静态资源映射"><a href="#默认静态资源映射" class="headerlink" title="默认静态资源映射"></a>默认静态资源映射</h2><p>Spring Boot 默认将 /** 所有访问映射到静态资源目录。</p>
<ul>
<li>Spring Boot 提供默认静态资源目录位置需置于 classpath 下，目录名需符合如下规则：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/static</span><br><span class="line">/public</span><br><span class="line">/resources</span><br><span class="line">/META-INF/resources</span><br></pre></td></tr></table></figure>

<p>举例：我们可以在 src/main/resources/ 目录下创建目录 static，在该位置创建一个 demo.txt 文件，内容为 Hello world 。启动程序后，尝试访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlbW8udHh0">http://localhost:8080/demo.txt<i class="fa fa-external-link-alt"></i></span> 。如能显示 Hello world，则配置成功。</p>
<span id="more"></span>

<ul>
<li>目录优先级</li>
</ul>
<p>如果多个资源目录同时存在，则会按照以下优先级获取资源：</p>
<blockquote>
<p>/META-INF/resources &gt; resources &gt; static &gt; public</p>
</blockquote>
<p>可看源码 <code>org.springframework.boot.autoconfigure.web.ResourceProperties</code> 中<code>CLASSPATH_RESOURCE_LOCATIONS</code>属性如下:</p>
<p><img data-src="/assets/picture/spring-boot/resource/spring-boot-resource.png" alt="resource"></p>
<h2 id="自定义静态资源目录"><a href="#自定义静态资源目录" class="headerlink" title="自定义静态资源目录"></a>自定义静态资源目录</h2><h3 id="静态资源在项目下的自定义目录"><a href="#静态资源在项目下的自定义目录" class="headerlink" title="静态资源在项目下的自定义目录"></a>静态资源在项目下的自定义目录</h3><p>在 application.yml/application.properties 文件中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">自定义的路径</span></span><br></pre></td></tr></table></figure>

<p>如果配置了自定义目录，则默认的静态目录仅 <code>META-INF/resources</code> 目录下的资源文件仍可访问，</p>
<p>其他目录失效。建议使用自定义目录时添加系统默认路径如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义静态文件目录</span></span><br><span class="line"><span class="meta">customize.static-locations</span>=<span class="string">classpath:/github</span></span><br><span class="line"><span class="comment"># 自定义静态资源目录  越靠前的配置优先级越高</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">$&#123;customize.static-locations&#125;,\</span></span><br><span class="line"><span class="string">classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,\</span></span><br><span class="line"><span class="string">classpath:/public/</span></span><br></pre></td></tr></table></figure>

<h3 id="访问本地磁盘的静态资源"><a href="#访问本地磁盘的静态资源" class="headerlink" title="访问本地磁盘的静态资源"></a>访问本地磁盘的静态资源</h3><blockquote>
<p>诸如文件上传，头像上传等场景，一般是将文件单独存放在磁盘上，此时可将磁盘目录映射到一个目录，和项目下的自定义目录类似，仅需加上 <code>file:</code> 前缀，如下：</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义静态资源目录</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">file:D:/data/management/uploadPath</span></span><br></pre></td></tr></table></figure>

<p>举例：在 D 盘新建目录 /data/management/uploadPath ，在目录下新建 demo.txt，内容为 <code>this is demo.</code> 启动程序后，尝试访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlbW8udHh0">http://localhost:8080/demo.txt<i class="fa fa-external-link-alt"></i></span> ，如能显示文件内容，则配置成功。</p>
<p>如果需要更高级的定制，例如将磁盘目录映射到一个定制路径，例如 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Byb2ZpbGUv">http://localhost:8080/profile/<i class="fa fa-external-link-alt"></i></span> ，则需要实现 <code>WebMvcConfigurer</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 自定义静态资源访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourcesConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/profile/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;file:D:/data/management/uploadPath/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 D:/data/management/uploadPath/ 下新建 /avatar/demo.txt，内容为 <code>this is profile demo.</code> 启动程序后，尝试访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Byb2ZpbGUvYXZhdGFyL2RlbW8udHh0">http://localhost:8080/profile/avatar/demo.txt<i class="fa fa-external-link-alt"></i></span> ，如能显示文件内容，则配置成功。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>本文的相关例子可以查看下面仓库中的<code>spring-boot-samples-resources</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎 Star 支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <categories>
        <category>原创</category>
        <category>教程</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Original</tag>
        <tag>访问静态资源</tag>
        <tag>WebMvcConfigurer</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 使用 Swagger2 构建强大的 API 文档</title>
    <url>/2020/06/17/spring-boot/spring-boot-swagger/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>用 swagger2 来生成接口文档，让我们脱离了传统的手写文档的模式，它可以轻松的整合到 Spring Boot 中，用很少的代码就能生成一份漂亮的文档，同时让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时同步维护接口文档。另外 Swagger2 也提供了强大的页面测试功能来调试每个 RESTful API。具体效果如下图所示：</p>
<p><img data-src="/assets/picture/spring-boot-swagger/swagger.png" alt="swagger"></p>
<span id="more"></span>

<h2 id="下面来具体介绍如何集成"><a href="#下面来具体介绍如何集成" class="headerlink" title="下面来具体介绍如何集成"></a>下面来具体介绍如何集成</h2><blockquote>
<p>首先需要创建一个 springBoot 项目</p>
</blockquote>
<h3 id="第一步：添加-Maven-依赖"><a href="#第一步：添加-Maven-依赖" class="headerlink" title="第一步：添加 Maven 依赖"></a>第一步：添加 Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第二步：新增-Swagger-配置类"><a href="#第二步：新增-Swagger-配置类" class="headerlink" title="第二步：新增 Swagger 配置类"></a>第二步：新增 Swagger 配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否开启 swagger，正式环境一般是需要关闭的，可根据 springboot 的多环境配置进行设置</span></span><br><span class="line">    <span class="meta">@Value(value = &quot;$&#123;swagger.enabled&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean swaggerEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">          <span class="comment">// 页面上的 Base URL，如果配置了 host，swagger 页面的方法请求路径会被替换为 host 路径</span></span><br><span class="line"><span class="comment">//                .host(&quot;swagger.demo&quot;)</span></span><br><span class="line">                .enable(swaggerEnabled)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 扫描所有有注解的 api，用这种方式更灵活</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                <span class="comment">// 扫描指定包中的 swagger 注解</span></span><br><span class="line"><span class="comment">//             .apis(RequestHandlerSelectors.basePackage(&quot;com.github.zhuyizhuo&quot;))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                <span class="comment">// 生成文档 接口请求地址的前缀路径 可省略</span></span><br><span class="line">                .pathMapping(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">           .title(<span class="string">&quot;Swagger Demo&quot;</span>)</span><br><span class="line">           <span class="comment">//条款地址</span></span><br><span class="line">           .termsOfServiceUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">           <span class="comment">//作者信息</span></span><br><span class="line">           .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;zhuo&quot;</span>,<span class="string">&quot;https://github.com/zhuyizhuo&quot;</span>,<span class="string">&quot;xxx@gmail.com&quot;</span>))</span><br><span class="line">           <span class="comment">// 版本</span></span><br><span class="line">           .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">           .description(<span class="string">&quot;演示 swagger 文档&quot;</span>)</span><br><span class="line">           .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三步：在接口上添加-Swagger-注解"><a href="#第三步：在接口上添加-Swagger-注解" class="headerlink" title="第三步：在接口上添加 Swagger 注解"></a><strong>第三步</strong>：在接口上添加 Swagger 注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;Demo 文档&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;打招呼&quot;,notes = &quot;这是接口 notes!&quot;,httpMethod = &quot;GET&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(dataType = &quot;string&quot;,name = &quot;name&quot;,value = &quot;姓名&quot;, required = false)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;添加用户&quot;,httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(UserInfo user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Add User Success!&quot;</span> + user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步：启动应用，访问：http-localhost-8080-swagger-ui-html，就可以看到如下的接口文档页面："><a href="#第四步：启动应用，访问：http-localhost-8080-swagger-ui-html，就可以看到如下的接口文档页面：" class="headerlink" title="第四步：启动应用，访问：http://localhost:8080/swagger-ui.html，就可以看到如下的接口文档页面："></a>第四步：启动应用，访问：<code>http://localhost:8080/swagger-ui.html</code>，就可以看到如下的接口文档页面：</h3><p><img data-src="/assets/picture/spring-boot-swagger/swagger1.png" alt="swagger1"></p>
<h2 id="Swagger-调试接口"><a href="#Swagger-调试接口" class="headerlink" title="Swagger 调试接口"></a>Swagger 调试接口</h2><p>Swagger 除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中的 <code>try it out</code> 按钮：此时 name 右侧就变为输入框，我们只需要填入参数，点击下方 <code>Execute</code> 按钮，即可完成了一次请求调用！如下：</p>
<p><img data-src="/assets/picture/spring-boot-swagger/try1.png" alt="try1"></p>
<p><img data-src="/assets/picture/spring-boot-swagger/try2.png" alt="try2"></p>
<p>见识了 Swagger 的强大功能之后，是不是以后编写接口文档 So Easy 了呢？</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>本文的完整工程可以查看下面仓库中的<code>spring-boot-samples-swagger</code>目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <categories>
        <category>原创</category>
        <category>教程</category>
        <category>Tool</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Original</tag>
        <tag>Swagger</tag>
        <tag>文档生成</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 上 IDEA 的快捷键</title>
    <url>/2016/07/30/tool/idea-hot-key-windows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Windows-上-IDEA-的快捷键"><a href="#Windows-上-IDEA-的快捷键" class="headerlink" title="Windows 上 IDEA 的快捷键"></a>Windows 上 IDEA 的快捷键</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置 ctrl + alt + S </span><br><span class="line">列出方法 CTRL + F12   </span><br><span class="line">自动提示代码实现接口方法 CTRL + 1 = ALT + ENTER </span><br><span class="line">在当前行上创建一行 CTRL + ENTER</span><br><span class="line">在当前行下创建一行 SHIFT + ENTER</span><br><span class="line">删除行 CTRL + Y</span><br><span class="line">复制行 CTRL + D</span><br><span class="line">重命名 SHIFT + F6</span><br><span class="line">查找文件 CTRL + SHIFT + N</span><br><span class="line">自动补全等号左边 CTRL + ALT + V</span><br><span class="line">上下移动代码 CTRL + SHIFT + 上下键</span><br><span class="line">打开光标处的类或方法CTRL + B, CTRL + ALT + B 进入接口或者抽象类的实现类</span><br><span class="line">F3 查找</span><br><span class="line">F4 查找变量来源</span><br><span class="line">ALT + ENTER  导包,自动修正</span><br><span class="line">CTRL + H 查看类的继承关系。 </span><br><span class="line">CTRL + Q 显示注释文档（跟eclipse鼠标放到类、方法、字段显示的内容一样）</span><br><span class="line">CTRL + W 选中代码,连续按会有其他效果--&gt; 可改为关闭当前窗口 </span><br><span class="line">CTRL + U 查看当前类的父类以及接口,</span><br><span class="line">CTRL + ALT + U 查看类UML图 简单版</span><br><span class="line">CTRL + ALT + SHIFT + U 查看类UML图</span><br><span class="line">CTRL + SHIFT + U 切换大小写</span><br><span class="line">CTRL + ALT + F7 或 ALT + F7 查看方法被谁调用</span><br><span class="line">CTRL + ALT + B 查找方法实现类</span><br><span class="line">ALT + 鼠标点击  显示变量值 </span><br><span class="line">CTRL + P 方法参数提示,可以看到这个方法有哪些多态方法</span><br><span class="line">SHIFT + ALT + INSERT 竖编辑模式</span><br><span class="line">CTRL + 空格 代码提示 </span><br><span class="line">	(和系统输入法冲突,请在</span><br><span class="line">	Settings-&gt;Keymap-&gt;mainmenu -&gt; code -&gt;Completion-&gt;basic,</span><br><span class="line">	右键添加自己的快捷键)</span><br><span class="line">	-&gt; 设置--&gt;keymap--&gt;搜basic设置成ALT+/</span><br><span class="line">Ctrl+Shift+F12 窗口最大化</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="Idea-与-Eclipse-快捷键对比"><a href="#Idea-与-Eclipse-快捷键对比" class="headerlink" title="Idea 与 Eclipse 快捷键对比"></a>Idea 与 Eclipse 快捷键对比</h1><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">功能</th>
<th align="center">Eclipse 的快捷键</th>
<th align="center">Idea 的快捷键</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">查找类名</td>
<td align="center">CTRL + SHIFT + R</td>
<td align="center">CTRL + N</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">查找JAR包中的类</td>
<td align="center">CTRL + SHIFT + T</td>
<td align="center">两次 CTRL + N</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">查找文件</td>
<td align="center">CTRL + SHIFT + R</td>
<td align="center">CTRL + SHIFT + N</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">查找JAR包中的文件</td>
<td align="center">CTRL + SHIFT + T</td>
<td align="center">两次 CTRL + SHIFT + N</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">查找类中的方法以及字段</td>
<td align="center">无</td>
<td align="center">CTRL + SHIFT + ALT + N</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">查找那些类调用该资源（资源可能是字段、方法、类）</td>
<td align="center">CTRL + SHIFT + G</td>
<td align="center">ALT + F7 ,快速显示查找内容 CTRL + ALT + F7</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">查找文件中的变量</td>
<td align="center">点击变量 CTRL + K ：移动</td>
<td align="center">点击变量 CTRL + SHIFT + F7 高亮显示 F3 ： 移动； SHIFT + F3 ： 反向移动</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">定位行数</td>
<td align="center">CTRL + L</td>
<td align="center">CTRL + G</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">快速生成get set、构造函数等</td>
<td align="center">ALT + SHIFT + S</td>
<td align="center">ALT + INSERT</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">快速生成try catch</td>
<td align="center">SHIFT + ALT + Z</td>
<td align="center">CTRL + ALT + T 同时还能生成if else 等等其他的东西</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">快速优化引用包</td>
<td align="center">CTRL + SHIFT + O</td>
<td align="center">CTRL + ALT + O</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">快速格式化代码</td>
<td align="center">CTRL + SHIFT + F</td>
<td align="center">CTRL + ALT + L</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">重构代码 rename方法 重命名</td>
<td align="center">CTRL + F2</td>
<td align="center">SHIFT + F6</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">显示类中的变量、方法</td>
<td align="center">CTRL + O</td>
<td align="center">CTRL + F12</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">快速生产类、方法、字段注释</td>
<td align="center">CTRL + SHIFT + J</td>
<td align="center">输入/** + ENTER</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">代码行 上下移动</td>
<td align="center">ALT + 上下键</td>
<td align="center">CTRL + SHIFT + 上下键</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">打开光标处的类或方法</td>
<td align="center">F3</td>
<td align="center">CTRL + B, CTRL + ALT + B 进入接口或者抽象类的实现类</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">Hide all tool windows</td>
<td align="center">Ctrl+M</td>
<td align="center">Ctrl+Shift+F12</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">Move lines</td>
<td align="center">Alt + Up/Down</td>
<td align="center">Alt+Shift+Up/Down</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Tool</category>
        <category>快捷键</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>快捷键</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java应用安全防护体系构建</title>
    <url>/2025/08/25/security/2025-java-application-security/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Java应用安全防护体系构建-🛡️"><a href="#Java应用安全防护体系构建-🛡️" class="headerlink" title="Java应用安全防护体系构建 🛡️"></a>Java应用安全防护体系构建 🛡️</h1><p>大家好！👋 在当今数字化时代，应用安全已经成为企业发展的重中之重。随着网络攻击手段的不断演进和复杂化，构建一个全面、可靠的Java应用安全防护体系变得尤为重要。今天，我将和大家分享Java应用安全防护体系构建的最佳实践，帮助你打造固若金汤的Java应用安全防线。</p>
<h2 id="一、Java应用安全威胁全景分析-🔍"><a href="#一、Java应用安全威胁全景分析-🔍" class="headerlink" title="一、Java应用安全威胁全景分析 🔍"></a>一、Java应用安全威胁全景分析 🔍</h2><h3 id="1-当前Java应用面临的主要安全威胁"><a href="#1-当前Java应用面临的主要安全威胁" class="headerlink" title="1. 当前Java应用面临的主要安全威胁"></a>1. 当前Java应用面临的主要安全威胁</h3><p>Java作为企业级应用开发的主流语言，面临着各种安全威胁：</p>
<ul>
<li><strong>注入攻击</strong>：SQL注入、命令注入、LDAP注入等</li>
<li><strong>身份验证和授权问题</strong>：弱密码、会话固定、未授权访问等</li>
<li><strong>敏感数据泄露</strong>：明文存储密码、不安全的加密算法等</li>
<li><strong>跨站脚本（XSS）</strong>：存储型XSS、反射型XSS、DOM型XSS</li>
<li><strong>跨站请求伪造（CSRF）</strong>：诱导用户执行非预期操作</li>
<li><strong>不安全的直接对象引用</strong>：未验证的用户输入直接用于访问对象</li>
<li><strong>安全配置错误</strong>：默认配置、未禁用不必要的功能等</li>
<li><strong>组件漏洞</strong>：第三方库和框架的已知漏洞</li>
<li><strong>反序列化漏洞</strong>：Java反序列化漏洞如GhostCat、Fastjson等</li>
<li><strong>DDoS攻击</strong>：分布式拒绝服务攻击</li>
</ul>
<h3 id="2-Java安全漏洞趋势分析"><a href="#2-Java安全漏洞趋势分析" class="headerlink" title="2. Java安全漏洞趋势分析"></a>2. Java安全漏洞趋势分析</h3><p>根据OWASP和CVE的统计数据，Java应用安全漏洞呈现以下趋势：</p>
<ul>
<li><strong>第三方组件漏洞占比高</strong>：超过60%的Java应用安全漏洞来自第三方库和框架</li>
<li><strong>API安全问题日益突出</strong>：随着微服务和API经济的发展，API安全漏洞数量快速增长</li>
<li><strong>供应链攻击成为新威胁</strong>：攻击者越来越多地通过供应链注入恶意代码</li>
<li><strong>内存安全问题依然存在</strong>：尽管Java有内存管理机制，但内存泄漏、堆溢出等问题仍时有发生</li>
<li><strong>加密算法过时风险</strong>：旧的加密算法如SHA-1、MD5等逐渐被破解，需要升级到更安全的算法</li>
</ul>
<h3 id="3-安全合规要求对Java应用的影响"><a href="#3-安全合规要求对Java应用的影响" class="headerlink" title="3. 安全合规要求对Java应用的影响"></a>3. 安全合规要求对Java应用的影响</h3><p>各种安全合规要求也对Java应用提出了更高的安全标准：</p>
<ul>
<li><strong>GDPR</strong>：欧盟《通用数据保护条例》，要求保护个人数据和隐私</li>
<li><strong>CCPA/CPRA</strong>：加州消费者隐私法案，加强了对消费者数据的保护</li>
<li><strong>PCI DSS</strong>：支付卡行业数据安全标准，适用于处理信用卡信息的应用</li>
<li><strong>ISO 27001</strong>：信息安全管理体系标准，提供了全面的信息安全框架</li>
<li><strong>等保2.0</strong>：中国网络安全等级保护制度，要求不同等级的信息系统采取相应的安全措施</li>
<li><strong>HIPAA</strong>：健康保险便携性和责任法案，适用于医疗健康行业</li>
</ul>
<h2 id="二、Java应用安全架构设计原则-🏗️"><a href="#二、Java应用安全架构设计原则-🏗️" class="headerlink" title="二、Java应用安全架构设计原则 🏗️"></a>二、Java应用安全架构设计原则 🏗️</h2><h3 id="1-分层安全架构设计"><a href="#1-分层安全架构设计" class="headerlink" title="1. 分层安全架构设计"></a>1. 分层安全架构设计</h3><p>构建Java应用安全防护体系，应采用分层安全架构设计原则：</p>
<ul>
<li><strong>网络层安全</strong>：防火墙、WAF、DDoS防护、TLS加密通信等</li>
<li><strong>应用层安全</strong>：身份验证、授权、会话管理、输入验证等</li>
<li><strong>数据层安全</strong>：数据加密、访问控制、数据脱敏、备份恢复等</li>
<li><strong>基础设施安全</strong>：操作系统安全、容器安全、虚拟化安全等</li>
<li><strong>运维安全</strong>：日志审计、漏洞扫描、安全监控、应急响应等</li>
<li><strong>开发安全</strong>：安全编码、代码审查、安全测试、DevSecOps等</li>
</ul>
<h3 id="2-纵深防御策略"><a href="#2-纵深防御策略" class="headerlink" title="2. 纵深防御策略"></a>2. 纵深防御策略</h3><p>纵深防御是一种多层次的安全防护策略，通过在不同层次设置安全防线，提高系统的整体安全性：</p>
<ol>
<li><strong>物理层安全</strong>：数据中心、服务器等物理设施的安全</li>
<li><strong>网络层安全</strong>：网络隔离、访问控制、流量监控等</li>
<li><strong>系统层安全</strong>：操作系统加固、补丁管理、防病毒软件等</li>
<li><strong>应用层安全</strong>：身份验证、授权、输入验证、输出编码等</li>
<li><strong>数据层安全</strong>：数据加密、访问控制、数据脱敏等</li>
<li><strong>管理层安全</strong>：安全策略、安全培训、安全审计等</li>
</ol>
<h3 id="3-最小权限原则"><a href="#3-最小权限原则" class="headerlink" title="3. 最小权限原则"></a>3. 最小权限原则</h3><p>最小权限原则是指系统中的每个用户、进程和服务都应该拥有完成其任务所需的最小权限：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现最小权限原则的示例</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通用户只能读取自己的信息</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;#id == authentication.principal.id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> ResourceNotFoundException(<span class="string">&quot;User not found&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 管理员可以读取所有用户信息</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只有管理员可以创建用户</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">(UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查用户是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByUsername(userDTO.getUsername())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&quot;Username already exists&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建新用户</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(userDTO.getUsername());</span><br><span class="line">        user.setPassword(passwordEncoder.encode(userDTO.getPassword()));</span><br><span class="line">        user.setEmail(userDTO.getEmail());</span><br><span class="line">        user.setRoles(Collections.singletonList(Role.ROLE_USER));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、身份认证与访问控制安全实践-🔑"><a href="#三、身份认证与访问控制安全实践-🔑" class="headerlink" title="三、身份认证与访问控制安全实践 🔑"></a>三、身份认证与访问控制安全实践 🔑</h2><h3 id="1-现代身份认证方案"><a href="#1-现代身份认证方案" class="headerlink" title="1. 现代身份认证方案"></a>1. 现代身份认证方案</h3><p>传统的用户名密码认证方式存在诸多安全隐患，现代应用应采用更安全的身份认证方案：</p>
<h4 id="1-1-多因素认证（MFA）"><a href="#1-1-多因素认证（MFA）" class="headerlink" title="1.1 多因素认证（MFA）"></a>1.1 多因素认证（MFA）</h4><p>多因素认证要求用户提供两种或更多的验证因素，显著提高了账户安全性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MfaService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TotpService totpService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成MFA密钥和二维码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MfaSetupResponse <span class="title">setupMfa</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> UserNotFoundException(<span class="string">&quot;User not found&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 生成TOTP密钥</span></span><br><span class="line">        String secretKey = totpService.generateSecretKey();</span><br><span class="line">        user.setMfaSecretKey(secretKey);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 生成QR码URL</span></span><br><span class="line">        String qrCodeUrl = totpService.generateQrCodeUrl(username, secretKey);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MfaSetupResponse(secretKey, qrCodeUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证MFA代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyMfa</span><span class="params">(String username, String code)</span> </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> UserNotFoundException(<span class="string">&quot;User not found&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> totpService.verifyCode(user.getMfaSecretKey(), code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-OAuth2-0与OpenID-Connect"><a href="#1-2-OAuth2-0与OpenID-Connect" class="headerlink" title="1.2 OAuth2.0与OpenID Connect"></a>1.2 OAuth2.0与OpenID Connect</h4><p>OAuth2.0是一种授权框架，OpenID Connect是基于OAuth2.0的身份认证协议，它们可以实现第三方登录和授权：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityFilterChain <span class="title">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">                .requestMatchers(<span class="string">&quot;/public/**&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .oauth2ResourceServer(oauth2 -&gt; oauth2</span><br><span class="line">                .jwt(jwt -&gt; jwt</span><br><span class="line">                    .decoder(jwtDecoder())</span><br><span class="line">                    .jwtAuthenticationConverter(jwtAuthenticationConverter())</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            .sessionManagement(session -&gt; session</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtDecoder <span class="title">jwtDecoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置JWT解码器</span></span><br><span class="line">        <span class="keyword">return</span> NimbusJwtDecoder.withPublicKey(rsaPublicKey()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAuthenticationConverter <span class="title">jwtAuthenticationConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置JWT认证转换器</span></span><br><span class="line">        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = <span class="keyword">new</span> JwtGrantedAuthoritiesConverter();</span><br><span class="line">        grantedAuthoritiesConverter.setAuthoritiesClaimName(<span class="string">&quot;roles&quot;</span>);</span><br><span class="line">        grantedAuthoritiesConverter.setAuthorityPrefix(<span class="string">&quot;ROLE_&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        JwtAuthenticationConverter jwtAuthenticationConverter = <span class="keyword">new</span> JwtAuthenticationConverter();</span><br><span class="line">        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);</span><br><span class="line">        <span class="keyword">return</span> jwtAuthenticationConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-细粒度授权控制"><a href="#2-细粒度授权控制" class="headerlink" title="2. 细粒度授权控制"></a>2. 细粒度授权控制</h3><p>细粒度授权控制可以实现对资源的精确访问控制，确保用户只能访问其被授权的资源：</p>
<h4 id="2-1-基于角色的访问控制（RBAC）"><a href="#2-1-基于角色的访问控制（RBAC）" class="headerlink" title="2.1 基于角色的访问控制（RBAC）"></a>2.1 基于角色的访问控制（RBAC）</h4><p>RBAC通过将权限分配给角色，再将角色分配给用户，实现了权限的集中管理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodSecurityConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 启用方法级安全</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只有文档所有者或管理员可以查看文档</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;@documentSecurityService.isOwner(#documentId, authentication.principal.id) or hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Document <span class="title">getDocument</span><span class="params">(Long documentId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文档逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只有文档所有者或管理员可以编辑文档</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;@documentSecurityService.isOwner(#documentId, authentication.principal.id) or hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Document <span class="title">updateDocument</span><span class="params">(Long documentId, DocumentDTO documentDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 更新文档逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只有管理员可以删除文档</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDocument</span><span class="params">(Long documentId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除文档逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;documentSecurityService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentSecurityService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DocumentRepository documentRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查用户是否是文档所有者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOwner</span><span class="params">(Long documentId, Long userId)</span> </span>&#123;</span><br><span class="line">        Document document = documentRepository.findById(documentId)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> ResourceNotFoundException(<span class="string">&quot;Document not found&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> document.getOwnerId().equals(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-基于属性的访问控制（ABAC）"><a href="#2-2-基于属性的访问控制（ABAC）" class="headerlink" title="2.2 基于属性的访问控制（ABAC）"></a>2.2 基于属性的访问控制（ABAC）</h4><p>ABAC基于用户、资源、环境等属性进行访问控制，提供了更灵活的授权机制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AbacService abacService;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Document <span class="title">getDocument</span><span class="params">(Long documentId, User user)</span> </span>&#123;</span><br><span class="line">        Document document = documentRepository.findById(documentId)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> ResourceNotFoundException(<span class="string">&quot;Document not found&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建访问控制上下文</span></span><br><span class="line">        AccessContext context = AccessContext.builder()</span><br><span class="line">                .user(user)</span><br><span class="line">                .resource(document)</span><br><span class="line">                .action(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">                .environment(<span class="string">&quot;production&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查访问权限</span></span><br><span class="line">        <span class="keyword">if</span> (!abacService.checkAccess(context)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> document;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbacService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PolicyEngine policyEngine;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查访问权限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAccess</span><span class="params">(AccessContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载策略</span></span><br><span class="line">        List&lt;Policy&gt; policies = policyRepository.findByResourceType(context.getResource().getClass().getSimpleName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 评估策略</span></span><br><span class="line">        <span class="keyword">return</span> policyEngine.evaluate(policies, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-会话管理安全"><a href="#3-会话管理安全" class="headerlink" title="3. 会话管理安全"></a>3. 会话管理安全</h3><p>安全的会话管理对于防止会话固定、会话劫持等攻击至关重要：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpSessionIdResolver <span class="title">httpSessionIdResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用Header方式传递会话ID，而不是Cookie</span></span><br><span class="line">        HeaderHttpSessionIdResolver resolver = <span class="keyword">new</span> HeaderHttpSessionIdResolver(<span class="string">&quot;X-Auth-Token&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityFilterChain <span class="title">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .sessionManagement(session -&gt; session</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class="line">                .sessionFixation().migrateSession() <span class="comment">// 防止会话固定攻击</span></span><br><span class="line">                .maximumSessions(<span class="number">1</span>) <span class="comment">// 限制每个用户只能有一个活动会话</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="keyword">true</span>) <span class="comment">// 达到最大会话数时阻止新的登录</span></span><br><span class="line">                .sessionRegistry(sessionRegistry())</span><br><span class="line">            );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionRegistry <span class="title">sessionRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionRegistryImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;HttpSessionEventPublisher&gt; <span class="title">httpSessionEventPublisher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> HttpSessionEventPublisher());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、输入验证与输出编码防护-🛡️"><a href="#四、输入验证与输出编码防护-🛡️" class="headerlink" title="四、输入验证与输出编码防护 🛡️"></a>四、输入验证与输出编码防护 🛡️</h2><h3 id="1-输入验证最佳实践"><a href="#1-输入验证最佳实践" class="headerlink" title="1. 输入验证最佳实践"></a>1. 输入验证最佳实践</h3><p>输入验证是防止注入攻击、跨站脚本等安全问题的第一道防线：</p>
<h4 id="1-1-参数验证"><a href="#1-1-参数验证" class="headerlink" title="1.1 参数验证"></a>1.1 参数验证</h4><p>使用Spring Validation框架进行参数验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">        User user = userService.createUser(userDTO);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(user, HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;Username is required&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 50, message = &quot;Username must be between 3 and 50 characters&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[a-zA-Z0-9_]+$&quot;, message = &quot;Username can only contain letters, numbers and underscores&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;Password is required&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 8, message = &quot;Password must be at least 8 characters long&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]&#123;8,&#125;$&quot;, </span></span><br><span class="line"><span class="meta">             message = &quot;Password must contain at least one uppercase letter, one lowercase letter, one number and one special character&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;Email is required&quot;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;Email format is invalid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-自定义验证器"><a href="#1-2-自定义验证器" class="headerlink" title="1.2 自定义验证器"></a>1.2 自定义验证器</h4><p>对于复杂的验证逻辑，可以创建自定义验证器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordStrengthValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">PasswordStrength</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(PasswordStrength constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化验证器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String password, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查密码强度</span></span><br><span class="line">        <span class="keyword">boolean</span> hasUppercase = !password.equals(password.toLowerCase());</span><br><span class="line">        <span class="keyword">boolean</span> hasLowercase = !password.equals(password.toUpperCase());</span><br><span class="line">        <span class="keyword">boolean</span> hasDigit = password.matches(<span class="string">&quot;.*\\d.*&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> hasSpecialChar = password.matches(<span class="string">&quot;.*[!@#$%^&amp;*(),.?\&quot;:&#123;&#125;|&lt;&gt;].*&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!hasUppercase || !hasLowercase || !hasDigit || !hasSpecialChar) &#123;</span><br><span class="line">            <span class="comment">// 自定义错误消息</span></span><br><span class="line">            context.disableDefaultConstraintViolation();</span><br><span class="line">            context.buildConstraintViolationWithTemplate(<span class="string">&quot;Password must contain at least one uppercase letter, one lowercase letter, one number and one special character&quot;</span>)</span><br><span class="line">                   .addConstraintViolation();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义验证器</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 其他字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;Password is required&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 8, message = &quot;Password must be at least 8 characters long&quot;)</span></span><br><span class="line">    <span class="meta">@PasswordStrength</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-输出编码与XSS防护"><a href="#2-输出编码与XSS防护" class="headerlink" title="2. 输出编码与XSS防护"></a>2. 输出编码与XSS防护</h3><p>输出编码是防止XSS攻击的有效手段，它确保用户输入的内容在显示时不会被浏览器解释为代码：</p>
<h4 id="2-1-HTML编码"><a href="#2-1-HTML编码" class="headerlink" title="2.1 HTML编码"></a>2.1 HTML编码</h4><p>在输出HTML内容时，对用户输入进行HTML编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HtmlUtils htmlUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sanitizeHtml</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行HTML编码</span></span><br><span class="line">        <span class="keyword">return</span> htmlUtils.htmlEscape(input);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sanitizeRichText</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用OWASP Java HTML Sanitizer进行富文本清理</span></span><br><span class="line">        PolicyFactory policy = Sanitizers.FORMATTING.and(Sanitizers.BLOCKS).and(Sanitizers.LINKS);</span><br><span class="line">        <span class="keyword">return</span> policy.sanitize(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/comments&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Comment&gt; <span class="title">createComment</span><span class="params">(<span class="meta">@RequestBody</span> CommentDTO commentDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 清理用户输入</span></span><br><span class="line">        String sanitizedContent = contentService.sanitizeRichText(commentDTO.getContent());</span><br><span class="line">        commentDTO.setContent(sanitizedContent);</span><br><span class="line">        </span><br><span class="line">        Comment comment = commentService.createComment(commentDTO);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(comment, HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-JavaScript编码"><a href="#2-2-JavaScript编码" class="headerlink" title="2.2 JavaScript编码"></a>2.2 JavaScript编码</h4><p>在输出JavaScript内容时，对用户输入进行JavaScript编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScriptService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sanitizeJavaScript</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行JavaScript编码</span></span><br><span class="line">        <span class="keyword">return</span> JavaScriptUtils.javaScriptEscape(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-使用内容安全策略（CSP）"><a href="#2-3-使用内容安全策略（CSP）" class="headerlink" title="2.3 使用内容安全策略（CSP）"></a>2.3 使用内容安全策略（CSP）</h4><p>内容安全策略（CSP）是一种安全机制，可以防止XSS攻击和数据注入攻击：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityFilterChain <span class="title">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .headers(headers -&gt; headers</span><br><span class="line">                .contentSecurityPolicy(csp -&gt; csp</span><br><span class="line">                    .policyDirectives(<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; img-src &#x27;self&#x27; data:; font-src &#x27;self&#x27;; frame-src &#x27;none&#x27;; object-src &#x27;none&#x27;&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .frameOptions(frameOptions -&gt; frameOptions.deny())</span><br><span class="line">                .httpStrictTransportSecurity(hsts -&gt; hsts</span><br><span class="line">                    .includeSubDomains(<span class="keyword">true</span>)</span><br><span class="line">                    .preload(<span class="keyword">true</span>)</span><br><span class="line">                    .maxAgeInSeconds(<span class="number">31536000</span>)</span><br><span class="line">                )</span><br><span class="line">            );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、Java应用数据安全防护-🔒"><a href="#五、Java应用数据安全防护-🔒" class="headerlink" title="五、Java应用数据安全防护 🔒"></a>五、Java应用数据安全防护 🔒</h2><h3 id="1-敏感数据加密存储"><a href="#1-敏感数据加密存储" class="headerlink" title="1. 敏感数据加密存储"></a>1. 敏感数据加密存储</h3><p>敏感数据如密码、身份证号、银行卡号等应进行加密存储：</p>
<h4 id="1-1-密码加密"><a href="#1-1-密码加密" class="headerlink" title="1.1 密码加密"></a>1.1 密码加密</h4><p>使用Spring Security提供的密码编码器进行密码加密：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordEncoderConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用BCrypt密码编码器，自动生成随机盐值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(<span class="number">12</span>); <span class="comment">// 工作因子设为12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">(UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查用户是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByUsername(userDTO.getUsername())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&quot;Username already exists&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建新用户并加密密码</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(userDTO.getUsername());</span><br><span class="line">        user.setPassword(passwordEncoder.encode(userDTO.getPassword())); <span class="comment">// 加密密码</span></span><br><span class="line">        user.setEmail(userDTO.getEmail());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> UserNotFoundException(<span class="string">&quot;User not found&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证密码</span></span><br><span class="line">        <span class="keyword">return</span> passwordEncoder.matches(password, user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-敏感数据加密"><a href="#1-2-敏感数据加密" class="headerlink" title="1.2 敏感数据加密"></a>1.2 敏感数据加密</h4><p>对于其他敏感数据，可以使用AES等对称加密算法进行加密：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKey secretKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cipher cipher;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptionService</span><span class="params">(<span class="meta">@Value(&quot;$&#123;encryption.key&#125;&quot;)</span> String secretKeyString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 从配置中获取密钥</span></span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = Base64.getDecoder().decode(secretKeyString);</span><br><span class="line">        <span class="keyword">this</span>.secretKey = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.cipher = Cipher.getInstance(<span class="string">&quot;AES/GCM/NoPadding&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加密数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (plainText == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 生成随机IV</span></span><br><span class="line">        <span class="keyword">byte</span>[] iv = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">12</span>];</span><br><span class="line">        <span class="keyword">new</span> SecureRandom().nextBytes(iv);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化加密器</span></span><br><span class="line">        GCMParameterSpec parameterSpec = <span class="keyword">new</span> GCMParameterSpec(<span class="number">128</span>, iv);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加密数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptedData = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 组合IV和加密数据</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(iv.length + encryptedData.length);</span><br><span class="line">        byteBuffer.put(iv);</span><br><span class="line">        byteBuffer.put(encryptedData);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回Base64编码的加密数据</span></span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(byteBuffer.array());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解密数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String encryptedText)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (encryptedText == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解码Base64加密数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptedData = Base64.getDecoder().decode(encryptedText);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分离IV和加密数据</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.wrap(encryptedData);</span><br><span class="line">        <span class="keyword">byte</span>[] iv = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">12</span>];</span><br><span class="line">        byteBuffer.get(iv);</span><br><span class="line">        <span class="keyword">byte</span>[] cipherText = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.remaining()];</span><br><span class="line">        byteBuffer.get(cipherText);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化解密器</span></span><br><span class="line">        GCMParameterSpec parameterSpec = <span class="keyword">new</span> GCMParameterSpec(<span class="number">128</span>, iv);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解密数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] decryptedData = cipher.doFinal(cipherText);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回解密后的明文</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decryptedData, StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentRepository paymentRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EncryptionService encryptionService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">createPayment</span><span class="params">(PaymentDTO paymentDTO)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建支付记录</span></span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment();</span><br><span class="line">        payment.setUserId(paymentDTO.getUserId());</span><br><span class="line">        payment.setAmount(paymentDTO.getAmount());</span><br><span class="line">        payment.setCurrency(paymentDTO.getCurrency());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加密银行卡号</span></span><br><span class="line">        String encryptedCardNumber = encryptionService.encrypt(paymentDTO.getCardNumber());</span><br><span class="line">        payment.setCardNumber(encryptedCardNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 保存支付记录</span></span><br><span class="line">        <span class="keyword">return</span> paymentRepository.save(payment);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Payment payment = paymentRepository.findById(id)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> ResourceNotFoundException(<span class="string">&quot;Payment not found&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不需要解密敏感数据</span></span><br><span class="line">        <span class="keyword">return</span> payment;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentDetailsById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Payment payment = paymentRepository.findById(id)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> ResourceNotFoundException(<span class="string">&quot;Payment not found&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只有授权用户才能查看解密后的敏感数据</span></span><br><span class="line">        <span class="comment">// 在实际应用中，需要添加权限检查</span></span><br><span class="line">        String decryptedCardNumber = encryptionService.decrypt(payment.getCardNumber());</span><br><span class="line">        payment.setCardNumber(decryptedCardNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> payment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数据脱敏与掩码"><a href="#2-数据脱敏与掩码" class="headerlink" title="2. 数据脱敏与掩码"></a>2. 数据脱敏与掩码</h3><p>对于不需要完整显示的敏感数据，可以进行脱敏或掩码处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataMaskingService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 掩码处理银行卡号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">maskCreditCard</span><span class="params">(String cardNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cardNumber == <span class="keyword">null</span> || cardNumber.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cardNumber;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> length = cardNumber.length();</span><br><span class="line">        <span class="keyword">int</span> startLength = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> endLength = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> maskLength = length - startLength - endLength;</span><br><span class="line">        </span><br><span class="line">        StringBuilder masked = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        masked.append(cardNumber.substring(<span class="number">0</span>, startLength));</span><br><span class="line">        masked.append(<span class="string">&quot;*&quot;</span>.repeat(maskLength));</span><br><span class="line">        masked.append(cardNumber.substring(length - endLength));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> masked.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 掩码处理手机号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">maskPhoneNumber</span><span class="params">(String phoneNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (phoneNumber == <span class="keyword">null</span> || phoneNumber.length() &lt; <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> phoneNumber;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> length = phoneNumber.length();</span><br><span class="line">        <span class="keyword">int</span> startLength = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> endLength = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> maskLength = length - startLength - endLength;</span><br><span class="line">        </span><br><span class="line">        StringBuilder masked = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        masked.append(phoneNumber.substring(<span class="number">0</span>, startLength));</span><br><span class="line">        masked.append(<span class="string">&quot;*&quot;</span>.repeat(maskLength));</span><br><span class="line">        masked.append(phoneNumber.substring(length - endLength));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> masked.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 掩码处理邮箱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">maskEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (email == <span class="keyword">null</span> || !email.contains(<span class="string">&quot;@&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> email;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String[] parts = email.split(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">        String username = parts[<span class="number">0</span>];</span><br><span class="line">        String domain = parts[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (username.length() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> email;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maskLength = Math.max(<span class="number">1</span>, username.length() - <span class="number">2</span>);</span><br><span class="line">        StringBuilder maskedUsername = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        maskedUsername.append(username.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        maskedUsername.append(<span class="string">&quot;*&quot;</span>.repeat(maskLength));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maskedUsername + <span class="string">&quot;@&quot;</span> + domain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataMaskingService dataMaskingService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserResponseDTO&gt; <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        User user = userService.getUserById(id);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建响应DTO并进行数据脱敏</span></span><br><span class="line">        UserResponseDTO response = <span class="keyword">new</span> UserResponseDTO();</span><br><span class="line">        response.setId(user.getId());</span><br><span class="line">        response.setUsername(user.getUsername());</span><br><span class="line">        response.setEmail(dataMaskingService.maskEmail(user.getEmail()));</span><br><span class="line">        response.setPhoneNumber(dataMaskingService.maskPhoneNumber(user.getPhoneNumber()));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-安全的数据库访问"><a href="#3-安全的数据库访问" class="headerlink" title="3. 安全的数据库访问"></a>3. 安全的数据库访问</h3><p>确保数据库访问的安全性，防止SQL注入等攻击：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findOrdersByUserIdAndStatus</span><span class="params">(Long userId, String status)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用参数化查询，防止SQL注入</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM orders WHERE user_id = ? AND status = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> Object[]&#123;userId, status&#125;, <span class="keyword">new</span> OrderRowMapper());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">searchOrders</span><span class="params">(String keyword)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 即使是LIKE查询，也应使用参数化查询</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM orders WHERE order_no LIKE ? OR customer_name LIKE ?&quot;</span>;</span><br><span class="line">        String likeKeyword = <span class="string">&quot;%&quot;</span> + keyword + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> Object[]&#123;likeKeyword, likeKeyword&#125;, <span class="keyword">new</span> OrderRowMapper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用MyBatis进行参数化查询</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用#&#123;&#125;占位符，MyBatis会自动进行参数化处理</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users WHERE username = #&#123;username&#125; AND status = #&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUsernameAndStatus</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;status&quot;)</span> String status)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态SQL也使用#&#123;&#125;占位符</span></span><br><span class="line">    <span class="meta">@Select(&quot;&lt;script&gt;SELECT * FROM users WHERE 1=1&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;username != null&#x27;&gt; AND username like CONCAT(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;status != null&#x27;&gt; AND status = #&#123;status&#125;&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&lt;/script&gt;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">searchUsers</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;status&quot;)</span> String status)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、Java应用安全监控与审计-📊"><a href="#六、Java应用安全监控与审计-📊" class="headerlink" title="六、Java应用安全监控与审计 📊"></a>六、Java应用安全监控与审计 📊</h2><h3 id="1-安全事件日志记录"><a href="#1-安全事件日志记录" class="headerlink" title="1. 安全事件日志记录"></a>1. 安全事件日志记录</h3><p>记录安全事件日志对于安全审计和问题排查至关重要：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAuditAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger auditLogger = LoggerFactory.getLogger(<span class="string">&quot;security-audit&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.controller.AuthController.login(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginPointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.controller.AuthController.logout(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logoutPointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.controller.AdminController.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adminOperationPointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;loginPointcut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logSuccessfulLogin</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] <span class="keyword">instanceof</span> LoginRequest) &#123;</span><br><span class="line">            LoginRequest loginRequest = (LoginRequest) args[<span class="number">0</span>];</span><br><span class="line">            auditLogger.info(<span class="string">&quot;User login successful: username=&#123;&#125;, ip=&#123;&#125;&quot;</span>, </span><br><span class="line">                            loginRequest.getUsername(),</span><br><span class="line">                            getClientIp());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;loginPointcut()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logFailedLogin</span><span class="params">(JoinPoint joinPoint, Exception ex)</span> </span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] <span class="keyword">instanceof</span> LoginRequest) &#123;</span><br><span class="line">            LoginRequest loginRequest = (LoginRequest) args[<span class="number">0</span>];</span><br><span class="line">            auditLogger.warn(<span class="string">&quot;User login failed: username=&#123;&#125;, ip=&#123;&#125;, reason=&#123;&#125;&quot;</span>, </span><br><span class="line">                            loginRequest.getUsername(),</span><br><span class="line">                            getClientIp(),</span><br><span class="line">                            ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;adminOperationPointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logAdminOperation</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        String username = authentication.getName();</span><br><span class="line">        String operation = joinPoint.getSignature().getName();</span><br><span class="line">        </span><br><span class="line">        auditLogger.info(<span class="string">&quot;Admin operation started: user=&#123;&#125;, operation=&#123;&#125;, params=&#123;&#125;, ip=&#123;&#125;&quot;</span>, </span><br><span class="line">                        username,</span><br><span class="line">                        operation,</span><br><span class="line">                        Arrays.toString(joinPoint.getArgs()),</span><br><span class="line">                        getClientIp());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object result = joinPoint.proceed();</span><br><span class="line">            auditLogger.info(<span class="string">&quot;Admin operation completed: user=&#123;&#125;, operation=&#123;&#125;, ip=&#123;&#125;&quot;</span>, </span><br><span class="line">                            username,</span><br><span class="line">                            operation,</span><br><span class="line">                            getClientIp());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            auditLogger.error(<span class="string">&quot;Admin operation failed: user=&#123;&#125;, operation=&#123;&#125;, ip=&#123;&#125;, error=&#123;&#125;&quot;</span>, </span><br><span class="line">                            username,</span><br><span class="line">                            operation,</span><br><span class="line">                            getClientIp(),</span><br><span class="line">                            e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取客户端IP地址</span></span><br><span class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();</span><br><span class="line">        String ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.isEmpty() || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.isEmpty() || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.isEmpty() || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-异常处理与安全响应"><a href="#2-异常处理与安全响应" class="headerlink" title="2. 异常处理与安全响应"></a>2. 异常处理与安全响应</h3><p>合理的异常处理和安全响应可以防止信息泄露：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理未授权访问异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(AccessDeniedException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleAccessDeniedException</span><span class="params">(AccessDeniedException ex)</span> </span>&#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Access denied: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        ErrorResponse error = <span class="keyword">new</span> ErrorResponse(<span class="string">&quot;ACCESS_DENIED&quot;</span>, <span class="string">&quot;You do not have permission to access this resource&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(error, HttpStatus.FORBIDDEN);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理认证异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(AuthenticationException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleAuthenticationException</span><span class="params">(AuthenticationException ex)</span> </span>&#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Authentication failed: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        ErrorResponse error = <span class="keyword">new</span> ErrorResponse(<span class="string">&quot;AUTHENTICATION_FAILED&quot;</span>, <span class="string">&quot;Authentication failed, please check your credentials&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(error, HttpStatus.UNAUTHORIZED);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理资源未找到异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ResourceNotFoundException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleResourceNotFoundException</span><span class="params">(ResourceNotFoundException ex)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Resource not found: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        ErrorResponse error = <span class="keyword">new</span> ErrorResponse(<span class="string">&quot;RESOURCE_NOT_FOUND&quot;</span>, <span class="string">&quot;The requested resource could not be found&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(error, HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理无效请求异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BadRequestException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBadRequestException</span><span class="params">(BadRequestException ex)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Bad request: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        ErrorResponse error = <span class="keyword">new</span> ErrorResponse(<span class="string">&quot;BAD_REQUEST&quot;</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(error, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理所有其他异常，但不暴露详细错误信息</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleGenericException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Unexpected error: &#123;&#125;&quot;</span>, ex.getMessage(), ex);</span><br><span class="line">        ErrorResponse error = <span class="keyword">new</span> ErrorResponse(<span class="string">&quot;INTERNAL_ERROR&quot;</span>, <span class="string">&quot;An unexpected error occurred, please try again later&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(error, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorResponse</span><span class="params">(String code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-安全漏洞扫描与自动化检测"><a href="#3-安全漏洞扫描与自动化检测" class="headerlink" title="3. 安全漏洞扫描与自动化检测"></a>3. 安全漏洞扫描与自动化检测</h3><p>定期进行安全漏洞扫描和自动化检测可以及时发现和修复安全问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityScannerScheduler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecurityScannerService securityScannerService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每天凌晨2点执行安全扫描</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 2 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleSecurityScan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        securityScannerService.performSecurityScan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityScannerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SecurityScannerService.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VulnerabilityRepository vulnerabilityRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行安全扫描</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performSecurityScan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Starting scheduled security scan&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行依赖漏洞扫描</span></span><br><span class="line">            List&lt;Vulnerability&gt; vulnerabilities = scanDependencies();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 记录漏洞</span></span><br><span class="line">            <span class="keyword">for</span> (Vulnerability vuln : vulnerabilities) &#123;</span><br><span class="line">                vulnerabilityRepository.save(vuln);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果发现高风险漏洞，发送邮件告警</span></span><br><span class="line">            List&lt;Vulnerability&gt; highRiskVulnerabilities = vulnerabilities.stream()</span><br><span class="line">                    .filter(v -&gt; <span class="string">&quot;HIGH&quot;</span>.equals(v.getSeverity()) || <span class="string">&quot;CRITICAL&quot;</span>.equals(v.getSeverity()))</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!highRiskVulnerabilities.isEmpty()) &#123;</span><br><span class="line">                emailService.sendSecurityAlertEmail(highRiskVulnerabilities);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            logger.info(<span class="string">&quot;Security scan completed. Found &#123;&#125; vulnerabilities&quot;</span>, vulnerabilities.size());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Security scan failed: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 扫描依赖漏洞</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Vulnerability&gt; <span class="title">scanDependencies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Vulnerability&gt; vulnerabilities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在实际应用中，这里会调用OWASP Dependency Check或其他漏洞扫描工具</span></span><br><span class="line">        <span class="comment">// 这里为了示例，返回模拟数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟发现的漏洞</span></span><br><span class="line">        vulnerabilities.add(<span class="keyword">new</span> Vulnerability(<span class="string">&quot;log4j-core&quot;</span>, <span class="string">&quot;2.14.1&quot;</span>, <span class="string">&quot;CVE-2021-44228&quot;</span>, <span class="string">&quot;CRITICAL&quot;</span>, <span class="string">&quot;Remote Code Execution&quot;</span>, <span class="string">&quot;Update to version 2.17.0 or later&quot;</span>));</span><br><span class="line">        vulnerabilities.add(<span class="keyword">new</span> Vulnerability(<span class="string">&quot;spring-security&quot;</span>, <span class="string">&quot;5.5.1&quot;</span>, <span class="string">&quot;CVE-2022-22965&quot;</span>, <span class="string">&quot;HIGH&quot;</span>, <span class="string">&quot;Remote Code Execution&quot;</span>, <span class="string">&quot;Update to version 5.6.3 or later&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vulnerabilities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、总结与未来安全趋势展望-📝"><a href="#七、总结与未来安全趋势展望-📝" class="headerlink" title="七、总结与未来安全趋势展望 📝"></a>七、总结与未来安全趋势展望 📝</h2><p>通过本文的介绍，我们详细讲解了Java应用安全防护体系构建的最佳实践，包括身份认证与访问控制、输入验证与输出编码、数据安全防护、安全监控与审计等方面的内容。</p>
<p>Java应用安全的未来发展趋势主要包括以下几个方面：</p>
<ol>
<li><strong>零信任架构</strong>：零信任安全模型将成为主流，强调”永不信任，始终验证”</li>
<li><strong>AI驱动的安全</strong>：人工智能和机器学习技术将被更广泛地应用于安全威胁检测和响应</li>
<li><strong>DevSecOps深化</strong>：安全将更深入地集成到开发和运维流程中，实现”安全左移”</li>
<li><strong>容器安全与云原生安全</strong>：随着容器化和云原生技术的普及，容器安全和云原生安全将变得越来越重要</li>
<li><strong>供应链安全</strong>：软件供应链安全将受到更多关注，防止供应链攻击</li>
<li><strong>隐私计算</strong>：在保护数据隐私的前提下进行数据处理和分析的技术将得到发展</li>
</ol>
<p>构建一个全面的Java应用安全防护体系是一个持续的过程，需要不断地学习、实践和改进。希望本文能够为你提供一些有用的指导和启发，帮助你构建更安全的Java应用。如果你有任何问题或建议，欢迎在评论区留言讨论！😊</p>
]]></content>
      <tags>
        <tag>Java安全</tag>
        <tag>应用安全</tag>
        <tag>防护体系</tag>
        <tag>安全架构</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 JApiDocs 生成静态文档</title>
    <url>/2020/07/16/tool/japidocs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天分享一个生成静态文档的工具 <code>JApiDocs</code>。</p>
<p>首先看一下生成效果</p>
<p><img data-src="/assets/picture/japidocs/japidocs.png" alt="japidocs"></p>
<span id="more"></span>

<h2 id="和-Swagger-对比"><a href="#和-Swagger-对比" class="headerlink" title="和 Swagger 对比"></a>和 Swagger 对比</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>和 <code>Swagger</code> 相比，<code>JApiDocs</code> 对现有代码无任何侵入，只需按 <code>javadoc</code> 格式添加注释，就能生成文档。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><code>JApiDocs</code> 适合生成静态文档，目前没有 <code>Swagger</code> 的调试功能。</li>
<li>需要解析的对象必须在项目的源码中，不支持 <code>Jar</code> 包内的注释解析。</li>
</ul>
<h3 id="下面来快速入门"><a href="#下面来快速入门" class="headerlink" title="下面来快速入门"></a>下面来快速入门</h3><h4 id="首先引入依赖"><a href="#首先引入依赖" class="headerlink" title="首先引入依赖"></a>首先引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.yedaxia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>japidocs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按照 <code>javadoc</code> 格式添加注释的 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-japidocs/src/main/java/com/github/zhuyizhuo/japidocs/sample/controller/UserController.java"><code>UserController</code></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户 Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/user/&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;list&quot;, method = &#123;RequestMethod.GET,  RequestMethod.POST&#125;  )</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;List&lt;UserVO&gt;&gt; list(UserVO user)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(path = &quot;save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;UserVO&gt; <span class="title">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserVO user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">deleteUser</span><span class="params">(<span class="meta">@RequestParam</span> Long userId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实体 <a href="https://github.com/zhuyizhuo/spring-boot-samples/blob/master/spring-boot-2.x-samples/spring-boot-samples-japidocs/src/main/java/com/github/zhuyizhuo/japidocs/sample/vo/UserVO.java"><code>UserVO</code></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 用户 ID */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"><span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行以下代码即可生成文档"><a href="#运行以下代码即可生成文档" class="headerlink" title="运行以下代码即可生成文档"></a>运行以下代码即可生成文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JApiDocsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自动获取当前项目路径</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/spring-boot-2.x-samples/spring-boot-samples-japidocs&quot;</span>;</span><br><span class="line">        DocsConfig config = <span class="keyword">new</span> DocsConfig();</span><br><span class="line">        <span class="comment">// 项目根目录</span></span><br><span class="line">        config.setProjectPath(projectPath);</span><br><span class="line">        <span class="comment">// 项目名称</span></span><br><span class="line">        config.setProjectName(<span class="string">&quot;SpringBoot 集成 JApiDocs 生成&quot;</span>);</span><br><span class="line">        <span class="comment">// 声明该API的版本</span></span><br><span class="line">        config.setApiVersion(<span class="string">&quot;V1.0&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成API 文档所在目录</span></span><br><span class="line">        config.setDocsPath(projectPath + <span class="string">&quot;/docs&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置自动生成</span></span><br><span class="line">        config.setAutoGenerate(Boolean.TRUE);</span><br><span class="line">        <span class="comment">// 执行生成文档</span></span><br><span class="line">        Docs.buildHtmlDocs(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多配置参考:</p>
<blockquote>
<p>JApiDocs 官方文档：<span class="exturl" data-url="aHR0cHM6Ly9qYXBpZG9jcy5hZ2lsZXN0dWRpby5jbi8jLw==">https://japidocs.agilestudio.cn/#/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>本文的完整工程可以查看下面仓库中的 <code>spring-boot-samples-japidocs</code> 目录：</p>
<ul>
<li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by9zcHJpbmctYm9vdC1zYW1wbGVzL3RyZWUvbWFzdGVyL3NwcmluZy1ib290LTIueC1zYW1wbGVz">https://github.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
<li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vemh1eWl6aHVvL3NwcmluZy1ib290LXNhbXBsZXMvdHJlZS9tYXN0ZXIvc3ByaW5nLWJvb3QtMi54LXNhbXBsZXM=">https://gitee.com/zhuyizhuo/spring-boot-samples/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎<code>Star</code>支持，您的关注是我坚持的动力！</strong></p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman 配置全局变量与环境变量</title>
    <url>/2020/08/20/tool/postman-variable/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在 Postman 的使用过程中，我们常常遇到就是参数的传递与共享，如何减少不必要的参数的复制与黏贴的动作呢？通过本篇文章的学习，将实现如何实现在 Postman 中参数的一次定义，到处使用。</p>
<span id="more"></span>

<h2 id="配置-Postman-全局变量"><a href="#配置-Postman-全局变量" class="headerlink" title="配置 Postman 全局变量"></a><strong>配置 Postman 全局变量</strong></h2><h3 id="可用场景"><a href="#可用场景" class="headerlink" title="可用场景"></a>可用场景</h3><p>token 访问资源</p>
<blockquote>
<p>在真实的项目中，用户登陆系统会返回一个 token 令牌，而需要 token 可访问的资源则需要在访问时携带这个令牌，使用 postman 配置下全局变量，就不用每次登陆后，来回复制粘贴令牌了。</p>
</blockquote>
<p>假如登陆接口返回数据如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjMiLCJpYXQiOjE1OTY3NzA0MTV9&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在没有配置全局变量的情况下，我们请求其他需要 token 才可访问的资源时，需要将 token 内容粘贴到参数中，并且每次重新获取 token 后需要重复操作。如下</p>
<img data-src="/assets/picture/postman-variable/image-20200820124600740.png" alt="Authorization" style="zoom:50%;" />

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开 Postman，在  Tests 选项下设置脚本如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Status code is 200&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> jsonDate = <span class="built_in">JSON</span>.parse(responseBody) <span class="comment">//将响应体转换为 JSON 格式的字符串</span></span><br><span class="line">pm.globals.set(<span class="string">&quot;token&quot;</span>, jsonDate.data.token); <span class="comment">// 获取 Token 值，并设置到全局变量，变量的 key 为 token</span></span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img data-src="/assets/picture/postman-variable/image-20200820123737997.png" alt="Tests"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>用脚本自动设置全局变量后，只需要使用  即可获取到全局变量，再也不需要每次去手动修改</p>
<p><img data-src="/assets/picture/postman-variable/image-20200820124733445.png" alt="Authorization-token"></p>
<h2 id="配置-Postman-环境变量"><a href="#配置-Postman-环境变量" class="headerlink" title="配置 Postman 环境变量"></a><strong>配置 Postman 环境变量</strong></h2><h3 id="可用场景-1"><a href="#可用场景-1" class="headerlink" title="可用场景"></a>可用场景</h3><p>切换环境</p>
<blockquote>
<p>一个项目通常有多个环境，而很多配置是可以共用在多个环境上，不使用环境变量的话，一个接口可能我们要保存不同环境的测试用例</p>
</blockquote>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>打开 Postman ，点击右上角的齿轮按钮 ⚙  -&gt;  Add ，设置环境变量相关信息，如下</p>
<p><img data-src="/assets/picture/postman-variable/image-20200820125640573.png" alt="env"></p>
<p>保存 <code>local</code> 环境信息，并同样新增 <code>test</code> 环境</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>使用 &#123;&#123;variable&#125;&#125; 获取环境变量的值，此处为 &#123;&#123;management&#125;&#125; ，打出双括号 &#123;&#123; 会自动提示可使用的变量（包括全局变量），如下图</p>
<p><img data-src="/assets/picture/postman-variable/image-20200820125914424.png" alt="url"></p>
<p>使用了环境变量后，可在右上角切换环境，这样如果环境发生了变化，只需要新增对应的环境变量就可以实现复用，接口再也不需要重新添加一遍了</p>
<p><img data-src="/assets/picture/postman-variable/image-20200820130403211.png" alt="change-env"></p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>技术图谱网站介绍：系统化学习技术的新方式</title>
    <url>/2024/10/26/tool/technical-graph-introduction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="技术图谱：系统化学习技术的新方式-🚀"><a href="#技术图谱：系统化学习技术的新方式-🚀" class="headerlink" title="技术图谱：系统化学习技术的新方式 🚀"></a>技术图谱：系统化学习技术的新方式 🚀</h1><p>嘿，亲爱的开发者朋友们！👋 作为一名长期在技术海洋中航行的”老水手”，我深知面对浩如烟海的技术知识时，那种既兴奋又迷茫的复杂心情。今天，我要向大家隆重介绍我的最新力作——<strong>技术图谱</strong>（<span class="exturl" data-url="aHR0cHM6Ly96aHV5aXpodW8uZ2l0aHViLmlvL3RlY2huaWNhbC1ncmFwaC1kb2MvJUVGJUJDJTg5JUVGJUJDJThDJUU0JUI4JTgwJUU0JUI4JUFBJUU4JTgzJUJEJUU4JUFFJUE5JUU0JUJEJUEwJUU1JTlDJUE4JUU2JThBJTgwJUU2JTlDJUFGJUU4JUJGJUI3JUU1JUFFJUFCJUU0JUI4JUFEJUU2JTg5JUJFJUU1JTg4JUIwJUU2JUI4JTg1JUU2JTk5JUIwJUU4JUI3JUFGJUU1JUJFJTg0JUU3JTlBJTg0JUU3JUE1JTlFJUU1JUE1JTg3JUU1JUI3JUE1JUU1JTg1JUI3JUVGJUJDJTgxJUYwJTlGJThFJTg5">https://zhuyizhuo.github.io/technical-graph-doc/），一个能让你在技术迷宫中找到清晰路径的神奇工具！🎉<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="什么是技术图谱？🤔"><a href="#什么是技术图谱？🤔" class="headerlink" title="什么是技术图谱？🤔"></a>什么是技术图谱？🤔</h2><p>技术图谱不仅仅是一个简单的技术清单，它更像是一张<strong>技术世界的导航地图</strong>🗺️。想象一下，所有的技术知识不再是零散的孤岛，而是通过各种关联连接成一个完整的网络。在这里，你可以看到从前端到后端，从数据库到云计算，各种技术是如何相互关联、协同工作的。</p>
<p><img data-src="https://images.unsplash.com/photo-1518770660439-4636190af475?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80" alt="技术知识网络图"></p>
<h2 id="设计理念：三位一体的学习哲学-💡"><a href="#设计理念：三位一体的学习哲学-💡" class="headerlink" title="设计理念：三位一体的学习哲学 💡"></a>设计理念：三位一体的学习哲学 💡</h2><p>技术图谱的设计融合了我多年的学习经验，遵循三个核心原则：</p>
<h3 id="1-分层学习-📚"><a href="#1-分层学习-📚" class="headerlink" title="1. 分层学习 📚"></a>1. 分层学习 📚</h3><p>从底层原理到上层应用，构建完整的知识金字塔。我们不仅关注”如何使用某个API”，更深入探讨”为什么这个技术会出现”、”它解决了什么问题”。这种由内而外的学习方式，能让你的知识根基更加稳固！</p>
<h3 id="2-深度优先-⛏️"><a href="#2-深度优先-⛏️" class="headerlink" title="2. 深度优先 ⛏️"></a>2. 深度优先 ⛏️</h3><p>在关键领域形成技术深度。与其浅尝辄止地了解100种技术，不如在核心领域建立扎实的知识壁垒。技术图谱会引导你在重要技术上不断深入，成为真正的专家！</p>
<h3 id="3-广度拓展-🌐"><a href="#3-广度拓展-🌐" class="headerlink" title="3. 广度拓展 🌐"></a>3. 广度拓展 🌐</h3><p>了解相关技术生态。技术从来不是孤立存在的，就像一个优秀的厨师不仅要会炒菜，还要了解食材的特性和搭配规律。技术图谱会帮你理解一个技术如何与其他技术协同工作，形成完整的解决方案。</p>
<h2 id="持续更新的技术栈：永不过时的知识库-🔄"><a href="#持续更新的技术栈：永不过时的知识库-🔄" class="headerlink" title="持续更新的技术栈：永不过时的知识库 🔄"></a>持续更新的技术栈：永不过时的知识库 🔄</h2><p>在这个技术迭代比翻脸还快的时代，保持知识的时效性至关重要！技术图谱会<strong>定期更新</strong>，确保它反映最新的技术发展趋势。无论是前端的React、Vue新特性，还是后端的微服务、Serverless架构，你都能在这里找到最新、最实用的信息！⏰</p>
<h2 id="如何使用技术图谱？超简单操作指南-🎮"><a href="#如何使用技术图谱？超简单操作指南-🎮" class="headerlink" title="如何使用技术图谱？超简单操作指南 🎮"></a>如何使用技术图谱？超简单操作指南 🎮</h2><p>使用技术图谱就像玩游戏一样简单有趣：</p>
<ol>
<li>访问<span class="exturl" data-url="aHR0cHM6Ly96aHV5aXpodW8uZ2l0aHViLmlvL3RlY2huaWNhbC1ncmFwaC1kb2Mv">https://zhuyizhuo.github.io/technical-graph-doc/<i class="fa fa-external-link-alt"></i></span>，开启你的技术探险之旅！</li>
<li>在首页可以像看地图一样概览整个技术世界的结构 🌍</li>
<li>点击具体的技术节点，就像打开一个宝箱，里面装满了该技术的详细信息和宝藏 🎁</li>
<li>通过图谱导航，像走迷宫一样探索不同技术之间的奇妙关联 🧩</li>
<li>关注GitHub仓库，及时获取最新的技术更新，不错过任何一个重要的技术变革！</li>
</ol>
<h2 id="开源与贡献：让我们一起建设技术世界-👫"><a href="#开源与贡献：让我们一起建设技术世界-👫" class="headerlink" title="开源与贡献：让我们一起建设技术世界 👫"></a>开源与贡献：让我们一起建设技术世界 👫</h2><p>技术图谱是一个开源项目，就像一个开放的花园，需要大家共同浇灌才能绽放得更加美丽！如果你有任何建议或者想要贡献内容，欢迎访问<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by90ZWNobmljYWwtZ3JhcGgtZG9j">GitHub仓库<i class="fa fa-external-link-alt"></i></span>参与进来。你的每一个想法和贡献，都能让这个项目变得更加完善和实用！💪</p>
<p><img data-src="https://images.unsplash.com/photo-1552664730-d307ca884978?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80" alt="开源协作"></p>
<h2 id="写在最后：技术学习是一场精彩的旅程-🚂"><a href="#写在最后：技术学习是一场精彩的旅程-🚂" class="headerlink" title="写在最后：技术学习是一场精彩的旅程 🚂"></a>写在最后：技术学习是一场精彩的旅程 🚂</h2><p>创建技术图谱的初衷，是希望能够帮助更多的开发者建立系统化的技术知识体系，避免在学习过程中迷失方向。技术学习不是一场短跑比赛，而是一场精彩的马拉松。在这条漫长的道路上，技术图谱将成为你的忠实伙伴和导航仪！</p>
<p>如果你觉得这个项目对你有帮助，欢迎分享给更多的开发者朋友。让我们一起在技术的道路上不断进步，探索更广阔的技术世界！🌟</p>
<blockquote>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly96aHV5aXpodW8uZ2l0aHViLmlvL3RlY2huaWNhbC1ncmFwaC1kb2Mv">https://zhuyizhuo.github.io/technical-graph-doc/<i class="fa fa-external-link-alt"></i></span> 🌐<br>GitHub仓库：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXlpemh1by90ZWNobmljYWwtZ3JhcGgtZG9j">https://github.com/zhuyizhuo/technical-graph-doc<i class="fa fa-external-link-alt"></i></span> 🛠️<br>记得给个Star哦！⭐</p>
</blockquote>
]]></content>
      <tags>
        <tag>技术资源</tag>
        <tag>学习方法</tag>
        <tag>技术图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB 的 MVCC 多版本并发控制</title>
    <url>/2021/03/01/database/mysql/InnoDB-mvcc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MVCC(Mutil-Version Concurrency Control)，就是多版本并发控制。</p>
<p>MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。</p>
<p>在 MySQL 的 InnoDB 引擎中就是指在已提交读 (READ COMMITTD) 和可重复读 (REPEATABLE READ) 这两种隔离级别下的事务对于 SELECT 操作会访问版本链中的记录的过程。</p>
<p>这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT 可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>
<span id="more"></span>

<p><code>InnoDB</code> 向存储在数据库中的每一行添加三个字段：</p>
<ul>
<li>6 字节的 <code>DB_TRX_ID</code> 字段指示插入或更新该行的最后一笔事务的事务 ID。此外，删除在内部被视为更新，在该更新中，行中的特殊位被设置为将其标记为已删除。</li>
<li>一个 7 字节的 <code>DB_ROLL_PTR</code> 字段称为滚动指针。回滚指针指向写入回滚段的撤消日志（undo log）记录。如果该行已更新，则撤消日志记录将包含在更新该行之前重建该行的内容所必需的信息。(注意插入操作的 undo 日志没有这个属性，因为它没有老版本)</li>
<li>一个 6 字节的 <code>DB_ROW_ID</code> 字段包含一个行 ID，该行 ID 随着插入新行而单调增加。如果 <code>InnoDB</code>自动生成聚簇索引，则该索引包含行 ID 值。否则，该 <code>DB_ROW_ID</code> 列不会出现在任何索引中。</li>
</ul>
<p>新增一个事务时事务 id 会增加，<code>DB_TRX_ID</code> 能够表示事务开始的先后顺序。</p>
<h2 id="MVCC-优势"><a href="#MVCC-优势" class="headerlink" title="MVCC 优势"></a>MVCC 优势</h2><p><strong>MVCC最大的优势：读不加锁，读写不冲突。在读多写少的 OLTP 应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能</strong></p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>每行记录都需要额外的存储空间，需要做更多的行检查工作，以及一些额外的维护工作。</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>在分析MVCC原理之前，先看下 InnoDB 中数据行的结构：</p>
<p><img data-src="assets/picture/mysql-mvcc/v2-e1844f5816a332018183559d1573d80e_1440w.jpg" alt="img"></p>
<p>在 InnoDB 中，每一行都有2个隐藏列 DB_TRX_ID 和DATA_ROLL_PTR(如果没有定义主键，则还有个隐藏主键列)：</p>
<ol>
<li>DATA_TRX_ID表示最近修改该行数据的事务ID</li>
<li>DATA_ROLL_PTR则表示指向该行回滚段的指针，该行上所有旧的版本，在undo中都通过链表的形式组织，而该值，正式指向undo中该行的历史记录链表</li>
</ol>
<p>整个MVCC的关键就是通过DATA_TRX_ID和DATA_ROLL_PTR这两个隐藏列来实现的。</p>
<h2 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h2><ol>
<li><p>ReadView 说白了就是一个数据结构，在 SQL 开始的时候被创建。这个数据结构中包含了 3 个主要的成员：ReadView{low_trx_id, up_trx_id, trx_ids}，在并发情况下，一个事务在启动时，trx_sys 链表中存在部分还未提交的事务，那么哪些改变对当前事务是可见的，哪些又是不可见的，这个需要通过 ReadView 来进行判定，首先来看下 ReadView 中的 3 个成员各自代表的意思：</p>
<ul>
<li><p>low_trx_id 表示该 SQL 启动时，当前事务链表中最大的事务 id 编号，也就是最近创建的除自身以外最大事务编号；</p>
</li>
<li><p>up_trx_id 表示该 SQL 启动时，当前事务链表中最小的事务 id 编号，也就是当前系统中创建最早但还未提交的事务；</p>
</li>
<li><p>trx_ids 表示所有事务链表中事务的 id 集合。</p>
</li>
</ul>
</li>
</ol>
<p>上述3个成员组成了ReadView中的主要部分，简单图示如下：</p>
<p><img data-src="assets/picture/mysql-mvcc/v2-7b3dc9ba4be387f086fc63f114031574_1440w.jpg" alt="img"></p>
<p>根据上图所示，所有数据行上DATA_TRX_ID小于up_trx_id的记录，说明修改该行的事务在当前事务开启之前都已经提交完成，所以对当前事务来说，都是可见的。而对于DATA_TRX_ID大于low_trx_id的记录，说明修改该行记录的事务在当前事务之后，所以对于当前事务来说是不可见的。</p>
<p><strong>注意，ReadView是与SQL绑定的，而并不是事务，所以即使在同一个事务中，每次SQL启动时构造的ReadView的up_trx_id和low_trx_id也都是不一样的，至于DATA_TRX_ID大于low_trx_id本身出现也只有当多个SQL并发的时候，在一个SQL构造完ReadView之后，另外一个SQL修改了数据后又进行了提交，对于这种情况，数据其实是不可见的。</strong></p>
<p>最后，至于位于（up_trx_id, low_trx_id）中间的事务是否可见，这个需要根据不同的事务隔离级别来确定。对于RC的事务隔离级别来说，对于事务执行过程中，已经提交的事务的数据，对当前事务是可见的，也就是说上述图中，当前事务运行过程中，trx1~4中任意一个事务提交，对当前事务来说都是可见的；而对于RR隔离级别来说，事务启动时，已经开始的事务链表中的事务的所有修改都是不可见的，所以在RR级别下，low_trx_id基本保持与up_trx_id相同的值即可。</p>
<p>最后用一张图来解释MySQL中的MVCC实现：</p>
<p><img data-src="assets/picture/mysql-mvcc/v2-77c276015661224f1ddaa0ce9be03d0f_1440w.jpg" alt="img"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>MySQL 官网：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2lubm9kYi1tdWx0aS12ZXJzaW9uaW5nLmh0bWw=">InnoDB Multi-Versioning<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>知乎：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MDIwODg5NQ==">MySQL InnoDB MVCC实现<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 的 Redo log、bin log、Undo log</title>
    <url>/2021/03/03/database/mysql/mysql-binlog-redolog-undolog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="MySQL-事务日志"><a href="#MySQL-事务日志" class="headerlink" title="MySQL 事务日志"></a>MySQL 事务日志</h2><p>事务日志可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。事务日志持久以后，内存中被修改的数据在后台可以慢慢地刷回到磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志（Write-Ahead Logging），修改数据需要写两次磁盘。</p>
<p>如果数据的修改已经记录到事务日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。</p>
<p>MySQL Innodb中跟数据持久性、一致性有关的日志，有以下几种：</p>
<ul>
<li>Bin log</li>
<li>Redo log</li>
<li>Undo log</li>
</ul>
<span id="more"></span>

<h2 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h2><p>binlog，是mysql服务层产生的日志，常用来进行数据恢复、数据库复制，常见的mysql主从架构，就是采用slave同步master的binlog实现的, 另外通过解析binlog能够实现mysql到其他数据源（如ElasticSearch)的数据复制。</p>
<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p>redo log 记录了数据操作在物理层面的修改，mysql 中使用了大量缓存，缓存存在于内存中，修改操作时会直接修改内存，而不是立刻修改磁盘，当内存和磁盘的数据不一致时，称内存中的数据为脏页(dirty page)。为了保证数据的安全性，事务进行中时会不断的产生redo log，在事务提交时进行一次flush操作，保存到磁盘中, redo log是按照顺序写入的，磁盘的顺序读写的速度远大于随机读写。当数据库或主机失效重启时，会根据redo log进行数据的恢复，如果redo log中有事务提交，则进行事务提交修改数据。这样实现了事务的原子性、一致性和持久性。</p>
<h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>undo log 除了记录redo log外，当进行数据修改时还会记录 undo log，undo log用于数据的撤回操作，它记录了修改的反向操作，比如，插入对应删除，修改对应修改为原来的数据，通过undo log可以实现事务回滚，并且可以根据undo log回溯到某个特定的版本的数据，实现MVCC。</p>
<p>Undo log分为Insert和Update两种，delete可以看做是一种特殊的update，即在记录上修改删除标记。</p>
<p>update undo log记录了数据之前的数据信息，通过这些信息可以还原到之前版本的状态。</p>
<p>当进行插入操作时，生成的Insert undo log在事务提交后即可删除，因为其他事务不需要这个undo log。</p>
<p>进行删除修改操作时，会生成对应的undo log，并将当前数据记录中的db_roll_ptr指向新的undo log。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>简书：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mNjkyZDRmOGE1M2U=">MYSQL MVCC实现原理<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 存储引擎</title>
    <url>/2021/02/20/database/mysql/mysql-engine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>MySQL 数据库区别于其他数据库的最重要的一个特点就是其插件式的表存储引擎。需要注意的是，存储引擎是基于表的，而不是数据库的（即同一个数据库中的不同表可以有不同的存储引擎）。</p>
<h2 id="查看支持哪些存储引擎"><a href="#查看支持哪些存储引擎" class="headerlink" title="查看支持哪些存储引擎"></a>查看支持哪些存储引擎</h2><p>想了解 MySQL 中支持的引擎的情况，可以使用如下命令查看：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="常用搜索引擎介绍"><a href="#常用搜索引擎介绍" class="headerlink" title="常用搜索引擎介绍"></a>常用搜索引擎介绍</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p><strong>索引顺序存取方法</strong>（ISAM, Indexed Sequential Access Method）最初是 IBM 公司发展起来的一个文件系统，可以连续地（按照他们进入的顺序）或者任意地（根据索引）记录任何访问。<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTXlTUUw=">MySQL<i class="fa fa-external-link-alt"></i></span> 实现 ISAM 为 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTXlJU0FN">MyISAM<i class="fa fa-external-link-alt"></i></span>。</p>
<p>MyISAM 是 MYSQL 的默认存储引擎 (5.5版之前)，优势在于占用空间小，处理速度快，但却有一个缺点：不支持事务处理。</p>
<p>基于MyISAM存储引擎的表支持3种不同的存储格式。包括静态型、动态型和压缩型。其中，静态型是MyISAM的默认存储格式，它的字段是固定长度的；动态型包含变长字段，记录的长度不是固定的；压缩型需要用到myisampack工具，占用的磁盘空间较小。</p>
<p>每个MyISAM资料表，皆由存储在硬盘上的3个文件所组成，每个文件都以资料表名称为文件主名，并搭配不同扩展名区分文件类型：</p>
<ul>
<li><code>.frm</code>  存储资料表定义，此文件非 MyISAM 引擎的一部分。</li>
<li><code>.MYD</code>  存放真正的资料，是MYData的缩写。</li>
<li><code>.MYI</code>  存储索引信息，是MYIndex的缩写。</li>
</ul>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>MySQL 5.5 以及之后版本默认存储引擎。</p>
<p>InnoDB通过使用多版本并发控制（MVCC）来获得高并发性，并且实现了SQL标准的4种隔离级别，默认为REPEATABLE级别。<br>提供了插入缓冲，二次写，自适应哈希索引，预读等高性能和高可用的功能。</p>
<p>数据和索引存储在 <code>innodb_data_home_dir</code> 和 <code>innodb_data_file_path</code> 定义的表空间中。</p>
<p>innodb中通过B+树作为索引的数据结构，并且主键所在的索引为ClusterIndex(聚簇索引), ClusterIndex中的叶子节点中保存了对应的数据内容。一个表只能有一个主键，所以只能有一个聚簇索引，如果表没有定义主键，则选择第一个非NULL唯一索引作为聚簇索引，如果还没有则生成一个隐藏id列作为聚簇索引。</p>
<p>除了Cluster Index外的索引是Secondary Index(辅助索引)。辅助索引中的叶子节点保存的是聚簇索引的叶子节点的值。</p>
<blockquote>
<p><strong>需要牢记的是，B+树索引本身并不能找到具体的一条记录，能找到的只是该记录所在的页。</strong>数据库把页载入到内存，然后通过Page Directory再进行二叉查找。只不过二叉查找的时间复杂度很低，同时在内存中的查找很快，因此通常忽略这部分查找所用的时间。</p>
</blockquote>
<p>每个InnoDB资料表，皆由存储在硬盘上的2个文件所组成，每个文件都以资料表名称为文件主名，并搭配不同扩展名区分文件类型：</p>
<ul>
<li><code>.frm</code>  表定义文件。</li>
<li><code>.ibd</code>  表数据文件。</li>
</ul>
<h4 id="变量设置"><a href="#变量设置" class="headerlink" title="变量设置"></a>变量设置</h4><ul>
<li> innodb_flush_log_at_trx_commit 设置多少次事务刷新一次事务日志</li>
</ul>
<h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><p>MEMORY 是 MySQL 中一类特殊的存储引擎。它使用存储在内存中的内容来创建表，而且<strong>数据全部放在内存中</strong>。</p>
<p>每个基于 MEMORY 存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为 <em>frm</em> 类型。该文件中只存储表的结构。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。值得注意的是，服务器需要有足够的内存来维持MEMORY存储引擎的表的使用。如果不需要了，可以释放内存，甚至删除不需要的表。</p>
<p>MEMORY默认使用哈希索引。速度比使用B树索引快。</p>
<p>因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于MEMORY的表的生命周期很短，一般是一次性的。</p>
<h2 id="搜索引擎选择"><a href="#搜索引擎选择" class="headerlink" title="搜索引擎选择"></a>搜索引擎选择</h2><p>当你的数据库主要以 <strong>查询为主</strong>，相比较而言更新和写入比较少，并且业务方面 <strong>数据完整性要求不那么严格</strong>，就选择 <code>MyISAM</code> 。</p>
<p>当你的数据库有 <strong>大量的写入、更新操作</strong> 而查询比较少或者 <strong>数据完整性要求比较高</strong> 的时候就选择 <code>InnoDB</code>。</p>
<p>如果需要 <strong>很快的读写速度</strong>，对 <strong>数据的安全性要求较低</strong>，可以选择 <code>MEMOEY</code>。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。</p>
<h2 id="InnoDB-与-MyISAM-存储引擎对比"><a href="#InnoDB-与-MyISAM-存储引擎对比" class="headerlink" title="InnoDB 与 MyISAM 存储引擎对比"></a>InnoDB 与 MyISAM 存储引擎对比</h2><p>意外恢复、缓存管理、数据压缩、事务、锁、</p>
<ol>
<li>InnoDB 通过重放其日志从崩溃或其他意外关闭中恢复；而 MyISAM 遇到错误，必须完全扫描并修复或重建任何已更新但未完全刷新到磁盘的索引或可能的表。InnoDB 的修复时间，大略都是固定的，但 MyISAM 的修复时间，则与资料量的多少成正比。相对而言，随着资料量的增加，InnoDB会有较佳的稳定性。</li>
<li>MyISAM 依赖于文件系统块缓存来缓存对数据行和索引的读取，而 InnoDB 则是有自己的读写缓存管理机制。（InnoDB不会将被修改的数据页立即交给操作系统）因此在某些情况下，InnoDB的资料访问会比MyISAM更有效率。</li>
<li>InnoDB 目前并不支持MyISAM所提供的压缩与terse row formats（简洁的行格式），所以对硬盘与缓存的使用量较大。因此MySQL从5.0版开始，提供另一个负载较轻的格式，可减少约略20%的系统负载，而压缩功能已项目于未来的新版中推出。</li>
<li>当操作完全兼容 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQUNJRA==">ACID<i class="fa fa-external-link-alt"></i></span>（事务）时，虽然InnoDB会自动合并多个连接，但每次有事务产生时，仍至少须写入硬盘一次，因此对于某些硬盘或磁盘阵列，会造成每秒200次的事务处理上限。对于需要更高事务率的应用程序，将需要具有写入缓存和备用电池的磁盘控制器，以保持事务完整性。当然InnoDB也提供数种对性能冲击较低的模式，但相对的也会降低事务的完整性。而MyISAM则无此问题，但这并非因为它比较先进，这只是因为它不支持事务。</li>
<li>InnoDB 为数据和索引提供可更新的 LZW 压缩页面存储。 MyISAM 压缩表无法更新。</li>
<li>MyISAM 支持表锁不支持行锁、外键。 InnoDB 支持行锁、外键。</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>维基百科：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTXlJU0FN">MyISAM<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>维基百科：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSW5ub0RC">InnoDB<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>维基百科：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTXlTUUwlRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTMlRTUlQkMlOTUlRTYlOTMlOEUlRTclOUElODQlRTYlQUYlOTQlRTglQkUlODM=">MySQL数据库引擎的比较<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>简书：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iZDg2NzVlNWM3YjI=">《高性能MySQL》&amp;《MySQL技术内幕 InnoDB存储引擎》笔记<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 的隔离级别与事务</title>
    <url>/2021/02/17/database/mysql/mysql-isolation-level-and-transaction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在讲解 Mysql 的隔离级别与事务之前，先要了解一下概念：什么是 脏读、幻读、不可重复读？</p>
<p>假如有表 User 中数据如下</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>sex</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Jack</td>
<td>25</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>Rose</td>
<td>23</td>
<td>女</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="脏读-不可重复读-幻读"><a href="#脏读-不可重复读-幻读" class="headerlink" title="脏读 不可重复读 幻读"></a>脏读 不可重复读 幻读</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><p>脏读又称无效数据的读出，是指在数据库访问中，事务 A 将某一值修改，然后事务 B 读取该值，此后事务 A 因为某种原因撤销对该值的修改，这就导致了事务 B 所读取到的数据是无效的。 一般是针对于 update 操作的。</p>
<table>
<thead>
<tr>
<th>时间顺序</th>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>Update user set age = 30 where id = 1</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>select age from user where id = 1 查询出年龄为 30 (脏读)</td>
</tr>
<tr>
<td>5</td>
<td>RollBack</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>结束事务</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>此处进行业务操作 例如将年龄加一</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td>Update user set age = 31 where id = 1</td>
</tr>
<tr>
<td>9</td>
<td></td>
<td>提交事务</td>
</tr>
</tbody></table>
<blockquote>
<p>按照正确逻辑，上述操作最终年龄应为 25+1 = 26</p>
</blockquote>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>知道了脏读产生的原因，如果要避免脏读，可以在操作数据的时候对数据加行锁，禁止其它事务对数据进行读取和修改即可</p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>前后多次读取，数据内容不一致。针对于 update 操作。</p>
<h4 id="产生原因-1"><a href="#产生原因-1" class="headerlink" title="产生原因"></a>产生原因</h4><p>事务A先执行读操作，由于整个事务A比较大，前后多次读取同一条数据需要经历很长的时间 ，而在事务A两次读取数据中间的过程中，有事务B对数据执行更改操作，造成的事务A两次读取数据不一致，即不可重复读。</p>
<table>
<thead>
<tr>
<th>时间顺序</th>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>select age from user where id = 1 (查询出年龄为25)</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>4</td>
<td>其它操作</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td></td>
<td>update user set age = 23 where id = 1</td>
</tr>
<tr>
<td>6</td>
<td></td>
<td>提交事务</td>
</tr>
<tr>
<td>7</td>
<td>select age from user where id = 1 (查询出年龄为23)</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>其它操作</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>结束事务</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>按照正确逻辑，事务 A 前后两次读取到的数据应该一致</p>
</blockquote>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>对数据加行锁，禁止其它事务修改该行数据即可。</p>
<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读是指当事务不是独立执行时发生的一种现象。</p>
<h4 id="产生原因-2"><a href="#产生原因-2" class="headerlink" title="产生原因"></a>产生原因</h4><p>事务A先读取与搜索条件相匹配的若干行，由于整个事务A比较大，前后多次读取同一组数据需要经历很长的时间，而在事务A两次读取数据中间的过程中，有事务B对事务A的结果集执行新增或者删除行的操作，造成的事务A两次读取数据总量不一致，仿佛产生了幻觉一样，即幻读。一般是针对 insert 和 delete 操作。</p>
<table>
<thead>
<tr>
<th>时间顺序</th>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>select count(*) from user where id &lt; 5 (查询结果为2)</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>4</td>
<td>其它操作</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td></td>
<td>delete from user where id = 2</td>
</tr>
<tr>
<td>6</td>
<td></td>
<td>提交事务</td>
</tr>
<tr>
<td>7</td>
<td>select count(*) from user where id &lt; 5  (查询结果为1)</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>其它操作</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>结束事务</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>按照正确逻辑，事务 A 前后两次读取到的数据总量应该一致</p>
</blockquote>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用表级锁，锁定整张表，事务A结束后才释放该锁，这个时候才允许其他事务新增或删除数据。</p>
<h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><p>不可重复读和脏读的区别是：脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。 </p>
<p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p>
<h2 id="Mysql-的隔离级别与事务"><a href="#Mysql-的隔离级别与事务" class="headerlink" title="Mysql 的隔离级别与事务"></a>Mysql 的隔离级别与事务</h2><h3 id="关于隔离级别的理解"><a href="#关于隔离级别的理解" class="headerlink" title="关于隔离级别的理解"></a>关于隔离级别的理解</h3><h4 id="1-read-uncommitted-读未提交"><a href="#1-read-uncommitted-读未提交" class="headerlink" title="1.read uncommitted 读未提交"></a>1.read uncommitted 读未提交</h4><p>可以看到未提交的数据（脏读）。</p>
<p>举个例子：别人说的话你都相信了，但是可能他只是说说，并不实际做。</p>
<h4 id="2-read-committed-读已提交"><a href="#2-read-committed-读已提交" class="headerlink" title="2.read committed 读已提交"></a>2.read committed 读已提交</h4><p>读取提交的数据。但是，可能多次读取的数据结果不一致（不可重复读，幻读）。</p>
<p>用读写的观点就是：读取的行数据，可以写。</p>
<h4 id="3-repeatable-read-可重复读（MySQL-默认隔离级别）"><a href="#3-repeatable-read-可重复读（MySQL-默认隔离级别）" class="headerlink" title="3.repeatable read 可重复读（MySQL 默认隔离级别）"></a>3.repeatable read 可重复读（MySQL 默认隔离级别）</h4><p>可以重复读取，但有幻读。</p>
<p>读写观点：读取的数据行不可写，但是可以往表中新增数据。</p>
<p>在 MySQL innodb 中，采用锁和多版本并发控制（MVCC）机制解决了幻读问题。</p>
<h4 id="4-serializable-可串行化"><a href="#4-serializable-可串行化" class="headerlink" title="4.serializable 可串行化"></a>4.serializable 可串行化</h4><p>可读，不可写。像 Java 中的锁，写数据必须等待另一个事务结束。</p>
<h3 id="各隔离级别是否会产生脏读、不可重复读、幻读"><a href="#各隔离级别是否会产生脏读、不可重复读、幻读" class="headerlink" title="各隔离级别是否会产生脏读、不可重复读、幻读"></a>各隔离级别是否会产生脏读、不可重复读、幻读</h3><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交 read uncommitted</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>读已提交 read committed</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>可重复读 repeatable read</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>可串行化 Serializable</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody></table>
<h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性 ACID"></a>事务的特性 ACID</h3><p>事务在英文中是 transaction，和现实世界中的交易很类似，它有如下四个特性：</p>
<h4 id="A-Atomicity-原子性"><a href="#A-Atomicity-原子性" class="headerlink" title="A (Atomicity) 原子性"></a>A (Atomicity) 原子性</h4><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。</p>
<p>比如银行转账，从A账户转100元至B账户，分为两个步骤：</p>
<p>1）从A账户取100元；</p>
<p>2）存入100元至B账户。</p>
<p>这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p>
<h4 id="C-Consistency-一致性"><a href="#C-Consistency-一致性" class="headerlink" title="C (Consistency) 一致性"></a>C (Consistency) 一致性</h4><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p>
<p>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p>
<h4 id="I-Isolation-独立性"><a href="#I-Isolation-独立性" class="headerlink" title="I (Isolation) 独立性"></a>I (Isolation) 独立性</h4><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p>
<p>比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p>
<h4 id="D-Durability-持久性"><a href="#D-Durability-持久性" class="headerlink" title="D (Durability) 持久性"></a>D (Durability) 持久性</h4><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p>
<h3 id="查看与设置隔离级别"><a href="#查看与设置隔离级别" class="headerlink" title="查看与设置隔离级别"></a>查看与设置隔离级别</h3><p>1.查看当前会话隔离级别</p>
<p>select @@tx_isolation; 或者 show variables like ‘%tx_isolation%’</p>
<p>2.查看系统当前隔离级别</p>
<p>select @@global.tx_isolation;</p>
<p>3.设置当前会话隔离级别</p>
<p>set session transaction isolation level read uncommitted;</p>
<p>set session transaction isolation level read committed;</p>
<p>set session transaction isolation level repeatable read;</p>
<p>set session transaction isolation level serializable;</p>
<p>4.设置系统当前隔离级别</p>
<p>set global transaction isolation level repeatable read;</p>
<p>5.命令行，开始事务时</p>
<p>set autocommit=off 或者 start transaction / begin</p>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 笔记整理</title>
    <url>/2020/08/08/database/mysql/mysql-sql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示所有的库</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE MANAGEMENT;</span><br><span class="line"><span class="comment">-- 选择库</span></span><br><span class="line">USE [数据库名];</span><br><span class="line"><span class="comment">-- 显示所有的表</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="comment">-- 显示建表语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [表名];</span><br><span class="line"><span class="comment">-- 显示表的定义信息 表结构</span></span><br><span class="line"><span class="keyword">DESC</span> [表名];</span><br><span class="line"><span class="comment">-- 显示表的定义信息</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> TABLENAME;</span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> OLD_TABLE_NAME RENAME <span class="keyword">TO</span> NEW_TABLE_NAME;</span><br><span class="line"><span class="comment">-- 显示版本信息</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"><span class="comment">-- 当前选中的库</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"><span class="comment">-- 显示当前登录用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="comment">-- 显示当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>;</span><br><span class="line"><span class="comment">-- 显示当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br><span class="line"><span class="comment">-- 显示当前日期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="comment">-- 当前时间  时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>; </span><br><span class="line"><span class="comment">-- 当前时间戳 年月日时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>;</span><br><span class="line"><span class="comment">-- 截断表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> XXX;</span><br><span class="line"><span class="comment">-- 删除表 ABC 如果存在删除 不存在则不报错</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> ABC;</span><br><span class="line"><span class="comment">-- 把USERNAME值赋给变量@A</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="variable">@A</span>:<span class="operator">=</span> USERNAME  <span class="keyword">FROM</span>  <span class="keyword">USER</span> <span class="keyword">WHERE</span> ID <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 查询表结构 SQL</span></span><br><span class="line"><span class="keyword">SELECT</span>  col.<span class="operator">*</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.`COLUMNS` col <span class="keyword">WHERE</span> col.TABLE_SCHEMA<span class="operator">=</span><span class="string">&#x27;schema&#x27;</span> <span class="keyword">AND</span> col.TABLE_NAME<span class="operator">=</span><span class="string">&#x27;table&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询表名及表注释 SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME,TABLE_COMMENT <span class="keyword">FROM</span>  INFORMATION_SCHEMA.`TABLES`  <span class="keyword">WHERE</span>  TABLE_SCHEMA<span class="operator">=</span><span class="string">&#x27;schema&#x27;</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="常用-SQL"><a href="#常用-SQL" class="headerlink" title="常用 SQL"></a>常用 SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 去除重复项</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> OWNER  <span class="keyword">FROM</span>  PET;</span><br><span class="line"><span class="comment">-- 批量插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> YOURTABLE <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">-- 设置表的自增主键从 1 开始</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 条件判断</span></span><br><span class="line"><span class="keyword">select</span> id, if(sal <span class="operator">&gt;</span> <span class="number">3000</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>) <span class="keyword">from</span> sal;</span><br><span class="line"><span class="comment">-- count(*) 与 count(列名) 区别</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span>; <span class="comment">-- 统计所有</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(name) <span class="keyword">from</span> <span class="keyword">user</span>; <span class="comment">-- 只统计 name 非null 的数据</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符串转成时间</span></span><br><span class="line"><span class="keyword">select</span> STR_TO_DATE(&quot;2018-02-01 23:00:00&quot; ,&quot;%Y-%m-%d %H:%i:%S&quot;);</span><br><span class="line"><span class="comment">-- 字符串转时间戳</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2018-12-05 01:10:00&#x27;</span>);</span><br><span class="line"><span class="comment">-- 字符串转时间戳</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2018-12-05&#x27;</span>);</span><br><span class="line"><span class="comment">-- 时间戳转字符串</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1543943400</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>);</span><br><span class="line"><span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line">REPLACE (str, search_str ,replace_str)</span><br></pre></td></tr></table></figure>

<h3 id="查询-Mysql-运行时参数"><a href="#查询-Mysql-运行时参数" class="headerlink" title="查询 Mysql 运行时参数"></a>查询 Mysql 运行时参数</h3><ul>
<li><strong>Mysql 官方文档</strong>：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3NlcnZlci1zeXN0ZW0tdmFyaWFibGVzLmh0bWwjc3lzdmFyX2xvd2VyX2Nhc2VfdGFibGVfbmFtZXM=">https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_lower_case_table_names<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看所有参数</span><br><span class="line">show variables;</span><br><span class="line">-- 模糊查询参数</span><br><span class="line">show variables like &#x27;%packet%&#x27;;</span><br><span class="line">show variables like &#x27;%net_buffer%&#x27;;</span><br><span class="line">-- 查看mysql 数据库编码:</span><br><span class="line">show variables like &#x27;char%&#x27;;</span><br><span class="line">show variables like &#x27;collation_%&#x27;;</span><br><span class="line">-- 查看数据存储目录:</span><br><span class="line">show variables like &#x27;datadir&#x27;;</span><br><span class="line">-- 查看锁等待:</span><br><span class="line">show variables like &#x27;innodb_lock_wait_timeout&#x27;;</span><br><span class="line">/* 查看大小写敏感问题:</span><br><span class="line"> 取值范围有三个，分别是0、1、2. </span><br><span class="line"> 1. 设置成0：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时大小写敏感。 </span><br><span class="line"> 2. 设置成1：表名转小写后存储到硬盘，比较时大小写不敏感。 </span><br><span class="line"> 3. 设置成2：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时统一转小写比较。</span><br><span class="line"> 这个选项不仅仅适用于表名的大小写敏感，同样适用于数据库名和表别名。</span><br><span class="line">*/</span><br><span class="line">show variables like &#x27;lower_case_table_names%&#x27;;</span><br><span class="line">-- 查询慢查询相关参数</span><br><span class="line">show variables like &#x27;slow_query_log%&#x27;</span><br><span class="line">-- 开启慢查询日志</span><br><span class="line">set global slow_query_log = on</span><br><span class="line">set global slow_query_log_file = &#x27;/var/lib/mysql/gupaoedu-slow.log&#x27;</span><br><span class="line">set global log_queries_not_using_indexes = on</span><br><span class="line">-- 单位 秒</span><br><span class="line">set global long_query_time = 0.1</span><br></pre></td></tr></table></figure>
<h3 id="Mysql-查询正在执行的进程"><a href="#Mysql-查询正在执行的进程" class="headerlink" title="Mysql 查询正在执行的进程"></a>Mysql 查询正在执行的进程</h3><ul>
<li>show processlist</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+----+------+-------------------+-----------------+---------+------+-------+------------------+</span><br><span class="line">| Id | User | Host              | db              | Command | Time | State | Info             |</span><br><span class="line">+----+------+-------------------+-----------------+---------+------+-------+------------------+</span><br><span class="line">| 66 | zhuo | 172.17.0.11:45948 | yizhuo_projects | Sleep   |   53 |       | NULL             |</span><br><span class="line">| 67 | zhuo | 172.17.0.11:45952 | yizhuo_projects | Sleep   | 1502 |       | NULL             |</span><br><span class="line">| 68 | zhuo | 172.17.0.11:45954 | yizhuo_projects | Sleep   | 1502 |       | NULL             |</span><br><span class="line">| 69 | zhuo | 172.17.0.11:45968 | yizhuo_projects | Sleep   | 1492 |       | NULL             |</span><br><span class="line">| 70 | zhuo | 172.17.0.11:45978 | yizhuo_projects | Sleep   | 1487 |       | NULL             |</span><br><span class="line">| 71 | zhuo | 172.17.0.11:45982 | yizhuo_projects | Sleep   | 1482 |       | NULL             |</span><br><span class="line">| 72 | zhuo | 172.17.0.11:45988 | yizhuo_projects | Sleep   | 1480 |       | NULL             |</span><br><span class="line">| 73 | zhuo | 172.17.0.11:45992 | yizhuo_projects | Sleep   | 1476 |       | NULL             |</span><br><span class="line">| 74 | zhuo | 172.17.0.11:45996 | yizhuo_projects | Sleep   | 1473 |       | NULL             |</span><br><span class="line">| 75 | zhuo | 172.17.0.11:46004 | yizhuo_projects | Sleep   | 1465 |       | NULL             |</span><br><span class="line">| 76 | zhuo | localhost         | NULL            | Query   |    0 | init  | show processlist |</span><br><span class="line">+----+------+-------------------+-----------------+---------+------+-------+------------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>State 状态官网： <span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2dlbmVyYWwtdGhyZWFkLXN0YXRlcy5odG1s">https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>大部分状态对应很快的操作，只要有一个线程保持同一个状态好几秒钟，那么可能是有问题发生了，需要检查一下。<br>还有其他的状态没在下面列出来，不过它们大部分只是在查看服务器是否有存在错误是才用得着。</p>
</blockquote>
<p>这个命令中最关键的就是 State 列，Mysql 列出的状态主要有以下几种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Checking table</span><br><span class="line">-&gt; 正在检查数据表（这是自动的）。</span><br><span class="line">Closing tables</span><br><span class="line">-&gt; 正在将表中修改的数据刷新到磁盘中，同时正在关闭已经用完的表。这是一个很快的操作，如果不是这样的话，就应该确认磁盘空间是否已经满了或者磁盘是否正处于重负中。</span><br><span class="line">Connect Out</span><br><span class="line">-&gt; 复制从服务器正在连接主服务器。</span><br><span class="line">Copying to tmp table on disk</span><br><span class="line">-&gt; 由于临时结果集大于tmp_table_size，正在将临时表从内存存储转为磁盘存储以此节省内存。</span><br><span class="line">Creating tmp table</span><br><span class="line">-&gt; 正在创建临时表以存放部分查询结果。</span><br><span class="line">deleting from main table</span><br><span class="line">-&gt; 服务器正在执行多表删除中的第一部分，刚删除第一个表。</span><br><span class="line">deleting from reference tables</span><br><span class="line">-&gt; 服务器正在执行多表删除中的第二部分，正在删除其他表的记录。</span><br><span class="line">Flushing tables</span><br><span class="line">-&gt; 正在执行FLUSH TABLES，等待其他线程关闭数据表。</span><br><span class="line">Killed</span><br><span class="line">-&gt; 发送了一个kill请求给某线程，那么这个线程将会检查kill标志位，同时会放弃下一个kill请求。MySQL会在每次的主循环中检查kill标志位，不过有些情况下该线程可能会过一小段才能死掉。如果该线程程被其他线程锁住了，那么kill请求会在锁释放时马上生效。</span><br><span class="line">Locked</span><br><span class="line">-&gt; 被其他查询锁住了。</span><br><span class="line">Sending data</span><br><span class="line">-&gt; 正在处理SELECT查询的记录，同时正在把结果发送给客户端。</span><br><span class="line">Sorting for group</span><br><span class="line">-&gt; 正在为GROUP BY做排序。</span><br><span class="line">Sorting for order</span><br><span class="line">-&gt; 正在为ORDER BY做排序。</span><br><span class="line">Opening tables</span><br><span class="line">-&gt; 这个过程应该会很快，除非受到其他因素的干扰。例如，在执ALTER TABLE或LOCK TABLE语句行完以前，数据表无法被其他线程打开。正尝试打开一个表。</span><br><span class="line">Removing duplicates</span><br><span class="line">-&gt; 正在执行一个SELECT DISTINCT方式的查询，但是MySQL无法在前一个阶段优化掉那些重复的记录。因此，MySQL需要再次去掉重复的记录，然后再把结果发送给客户端。</span><br><span class="line">Reopen table</span><br><span class="line">-&gt; 获得了对一个表的锁，但是必须在表结构修改之后才能获得这个锁。已经释放锁，关闭数据表，正尝试重新打开数据表。</span><br><span class="line">Repair by sorting</span><br><span class="line">-&gt; 修复指令正在排序以创建索引。</span><br><span class="line">Repair with keycache</span><br><span class="line">-&gt; 修复指令正在利用索引缓存一个一个地创建新索引。它会比Repair by sorting慢些。</span><br><span class="line">Searching rows for update</span><br><span class="line">-&gt; 正在将符合条件的记录找出来以备更新。它必须在UPDATE要修改相关的记录之前就完成了。</span><br><span class="line">Sleeping</span><br><span class="line">-&gt; 正在等待客户端发送新请求.</span><br><span class="line">System lock</span><br><span class="line">-&gt; 正在等待取得一个外部的系统锁。如果当前没有运行多个mysqld服务器同时请求同一个表，那么可以通过增加--skip-external-locking参数来禁止外部系统锁。</span><br><span class="line">Upgrading lock</span><br><span class="line">-&gt; INSERT DELAYED正在尝试取得一个锁表以插入新记录。</span><br><span class="line">Updating</span><br><span class="line">-&gt; 正在搜索匹配的记录，并且修改它们。</span><br><span class="line">User Lock</span><br><span class="line">-&gt; 正在等待GET_LOCK()。</span><br><span class="line">Waiting for tables</span><br><span class="line">-&gt; 该线程得到通知，数据表结构已经被修改了，需要重新打开数据表以取得新的结构。然后，为了能的重新打开数据表，必须等到所有其他线程关闭这个表。以下几种情况下会产生这个通知：FLUSH TABLES tbl_name, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE,或OPTIMIZE TABLE。</span><br><span class="line">waiting for handler insert</span><br><span class="line">-&gt; INSERT DELAYED 已经处理完了所有待处理的插入操作，正在等待新的请求。</span><br></pre></td></tr></table></figure>

<h3 id="排查问题常用-SQL"><a href="#排查问题常用-SQL" class="headerlink" title="排查问题常用 SQL"></a>排查问题常用 SQL</h3><p>按客户端 IP 分组，看哪个客户端的链接数最多</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> client_ip,<span class="built_in">count</span>(client_ip) <span class="keyword">as</span> client_num <span class="keyword">from</span> (<span class="keyword">select</span> substring_index(host,<span class="string">&#x27;:&#x27;</span> ,<span class="number">1</span>) <span class="keyword">as</span> client_ip <span class="keyword">from</span> processlist ) <span class="keyword">as</span> connect_info <span class="keyword">group</span> <span class="keyword">by</span> client_ip <span class="keyword">order</span> <span class="keyword">by</span> client_num <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p>查看正在执行的线程，并按 Time 倒排序，看看有没有执行时间特别长的线程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.processlist <span class="keyword">where</span> Command <span class="operator">!=</span> <span class="string">&#x27;Sleep&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">Time</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p>找出所有执行时间超过 5 分钟的线程，拼凑出 kill 语句，方便后面查杀</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;kill &#x27;</span>, id, <span class="string">&#x27;;&#x27;</span>) <span class="keyword">from</span> information_schema.processlist <span class="keyword">where</span> Command <span class="operator">!=</span> <span class="string">&#x27;Sleep&#x27;</span> <span class="keyword">and</span> <span class="type">Time</span> <span class="operator">&gt;</span> <span class="number">300</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">Time</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>MySQL</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 镜像 Oracle 12c 配置</title>
    <url>/2021/01/01/database/oracle/docker-oracle-12c-config/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Oracle-12C-新特性——CDB-与-PDB"><a href="#Oracle-12C-新特性——CDB-与-PDB" class="headerlink" title="Oracle 12C 新特性——CDB 与 PDB"></a>Oracle 12C 新特性——CDB 与 PDB</h3><blockquote>
<p>Oracle 12C 引入了 CDB 与 PDB 的新特性，在 ORACLE 12C 数据库引入的多租用户环境（Multitenant Environment）中，允许一个数据库容器（CDB）承载多个可插拔数据库（PDB）。CDB 全称为 Container Database，中文翻译为数据库容器，PDB 全称为 Pluggable Database，即可插拔数据库。在 ORACLE 12C 之前，实例与数据库是一对一或多对一关系（RAC）：即一个实例只能与一个数据库相关联，数据库可以被多个实例所加载。而实例与数据库不可能是一对多的关系。当进入 ORACLE 12C 后，实例与数据库可以是一对多的关系。</p>
</blockquote>
<p>在阅读本文之前，需要先注册 Docker hub 账号。因为 Oracle 12c 的官方镜像需要登陆 Docker hub。</p>
<span id="more"></span>

<h2 id="第一步：登陆-Docker-hub"><a href="#第一步：登陆-Docker-hub" class="headerlink" title="第一步：登陆 Docker hub"></a>第一步：登陆 Docker hub</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>

<p>安装提示输入 Docker hub 的用户名及密码</p>
<h2 id="第二步：拉取-Oracle-12c-镜像"><a href="#第二步：拉取-Oracle-12c-镜像" class="headerlink" title="第二步：拉取 Oracle 12c 镜像"></a>第二步：拉取 Oracle 12c 镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull store/oracle/database-enterprise:12.2.0.1</span><br></pre></td></tr></table></figure>

<h2 id="第三步：创建容器"><a href="#第三步：创建容器" class="headerlink" title="第三步：创建容器"></a>第三步：创建容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9080:8080 -p 1521:1521 --name oracle store/oracle/database-enterprise:12.2.0.1</span><br></pre></td></tr></table></figure>

<h2 id="第四步：启动容器"><a href="#第四步：启动容器" class="headerlink" title="第四步：启动容器"></a>第四步：启动容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start oracle</span><br></pre></td></tr></table></figure>

<p>使用 docker ps 命令查看 Oracle 启动结果，等状态为 healthy ,就可以开始配置 Oracle 了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker ps</span><br><span class="line">CONTAINER ID   IMAGE                                       COMMAND                  CREATED        STATUS                  PORTS                                                      NAMES</span><br><span class="line">ec7378c7bd73   store/oracle/database-enterprise:12.2.0.1   <span class="string">&quot;/bin/sh -c &#x27;/bin/ba…&quot;</span>   3 weeks ago    Up 31 hours (healthy)   0.0.0.0:1521-&gt;1521/tcp, 5500/tcp, 0.0.0.0:9080-&gt;8080/tcp   oracle</span><br></pre></td></tr></table></figure>

<h2 id="第五步：配置-Oracle"><a href="#第五步：配置-Oracle" class="headerlink" title="第五步：配置 Oracle"></a>第五步：配置 Oracle</h2><h3 id="首先进入容器"><a href="#首先进入容器" class="headerlink" title="首先进入容器"></a>首先进入容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="创建目录，为了下面创建表空间存放文件使用"><a href="#创建目录，为了下面创建表空间存放文件使用" class="headerlink" title="创建目录，为了下面创建表空间存放文件使用"></a>创建目录，为了下面创建表空间存放文件使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/oracle/oradata</span><br></pre></td></tr></table></figure>

<h3 id="使用默认密码-sys-Oradoc-db1-登陆"><a href="#使用默认密码-sys-Oradoc-db1-登陆" class="headerlink" title="使用默认密码 sys/Oradoc_db1 登陆"></a>使用默认密码 sys/Oradoc_db1 登陆</h3><p>登陆时需确认 Oracle 容器状态为 healthy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@oracle /]$ sqlplus sys/Oradoc_db1@ORCLCDB as sysdba</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 12.2.0.1.0 Production on Fri Jan 1 14:18:11 2021</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2016, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Last Successful login time: Thu Dec 10 2020 07:27:01 +00:00</span><br><span class="line"></span><br><span class="line">Connected to:</span><br><span class="line">Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production</span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> sys identified <span class="keyword">by</span> 新密码;</span><br></pre></td></tr></table></figure>

<h3 id="为了防止命令行中数据展示表格错乱的情况可以设计行宽和列宽"><a href="#为了防止命令行中数据展示表格错乱的情况可以设计行宽和列宽" class="headerlink" title="为了防止命令行中数据展示表格错乱的情况可以设计行宽和列宽"></a>为了防止命令行中数据展示表格错乱的情况可以设计行宽和列宽</h3><p>每行展示300个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> linesize <span class="number">300</span></span><br></pre></td></tr></table></figure>

<h3 id="查看CDB容器中的PDBS信息"><a href="#查看CDB容器中的PDBS信息" class="headerlink" title="查看CDB容器中的PDBS信息"></a>查看CDB容器中的PDBS信息</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> con_id, dbid, guid, name , open_mode <span class="keyword">from</span> v$pdbs;</span><br><span class="line"></span><br><span class="line">    CON_ID	 DBID GUID			       NAME																OPEN_MODE</span><br><span class="line"><span class="comment">---------- ---------- -------------------------------- -------------------------------------------------------------------------------------------------------------------------------- ----------</span></span><br><span class="line">	 <span class="number">2</span>  <span class="number">874739485</span> <span class="number">49</span>BBBDA685E81921E053AA43C40A7BEA PDB$SEED 															READ <span class="keyword">ONLY</span></span><br><span class="line">	 <span class="number">3</span> <span class="number">4173724830</span> B6181033109C016FE053020012AC4F1F ORCLPDB1 															READ WRITE</span><br></pre></td></tr></table></figure>

<h3 id="在容器间切换-切换到-pdb"><a href="#在容器间切换-切换到-pdb" class="headerlink" title="在容器间切换  切换到 pdb"></a>在容器间切换  切换到 pdb</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">alter</span> session <span class="keyword">set</span> container <span class="operator">=</span> ORCLPDB1;</span><br><span class="line"></span><br><span class="line">Session altered.</span><br></pre></td></tr></table></figure>

<h3 id="创建临时表空间"><a href="#创建临时表空间" class="headerlink" title="创建临时表空间"></a>创建临时表空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create temporary tablespace TABLE_SPACE_TMP  tempfile <span class="string">&#x27;/home/oracle/oradata/temp.dbf&#x27;</span> size 128M autoextend on next 128M maxsize 512M extent management <span class="built_in">local</span>;</span><br></pre></td></tr></table></figure>

<h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space TABLE_SPACE_NAME logging datafile <span class="string">&#x27;/home/oracle/oradata/tbs.dbf&#x27;</span>  size <span class="number">512</span>M;</span><br></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>创建用户需切换至 pdb</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> 密码 <span class="keyword">default</span> tablespace TABLE_SPACE_NAME temporary tablespace TABLE_SPACE_TMP;</span><br></pre></td></tr></table></figure>

<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,resource,dba <span class="keyword">to</span> 用户名;</span><br></pre></td></tr></table></figure>

<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure>

<h3 id="使用创建的用户登陆"><a href="#使用创建的用户登陆" class="headerlink" title="使用创建的用户登陆"></a>使用创建的用户登陆</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlplus 用户名/密码@ORCLPDB1</span><br></pre></td></tr></table></figure>

<p>至此 Oracle 数据库配置完成。</p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><h3 id="Mac-使用-Navicat-连接-Oracle"><a href="#Mac-使用-Navicat-连接-Oracle" class="headerlink" title="Mac 使用 Navicat 连接 Oracle"></a>Mac 使用 Navicat 连接 Oracle</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">host</span>:<span class="string">localhost</span></span><br><span class="line"><span class="attr">port</span>:<span class="string">1521</span></span><br><span class="line"><span class="attr">Service</span> <span class="string">Name:ORCLPDB1.localdomain</span></span><br><span class="line"><span class="attr">Role</span>:<span class="string">SYSDBA/default</span></span><br><span class="line"><span class="attr">Username</span>:<span class="string">用户名</span></span><br><span class="line"><span class="attr">Password</span>:<span class="string">密码</span></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>Docker Oracle 12c 镜像：<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL29yYWNsZS1kYXRhYmFzZS1lbnRlcnByaXNlLWVkaXRpb24=">https://hub.docker.com/_/oracle-database-enterprise-edition<i class="fa fa-external-link-alt"></i></span></p>
<p>Github 链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29yYWNsZS9kb2NrZXItaW1hZ2VzL3RyZWUvbWFzdGVyL09yYWNsZURhdGFiYXNl">https://github.com/oracle/docker-images/tree/master/OracleDatabase<i class="fa fa-external-link-alt"></i></span></p>
<p>Docker Oracle 12c 镜像使用文档：<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS91L3podXlpemh1by9jb250ZW50L3N1Yi1hNzBiZjRlMi0wZTkzLTRmMWUtYTU3NS0xZWM5NzdkZmVhNDk=">https://hub.docker.com/u/zhuyizhuo/content/sub-a70bf4e2-0e93-4f1e-a575-1ec977dfea49<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>ORACLE 内置函数</title>
    <url>/2016/12/02/database/oracle/oracle-build-in-function/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-ASCII-返回与指定的字符对应的十进制数"><a href="#1-ASCII-返回与指定的字符对应的十进制数" class="headerlink" title="1.ASCII 返回与指定的字符对应的十进制数;"></a>1.ASCII 返回与指定的字符对应的十进制数;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ascii(&#x27;A&#x27;) A,ascii(&#x27;a&#x27;) a,ascii(&#x27;0&#x27;) zero,ascii(&#x27; &#x27;) space from dual;</span><br><span class="line"></span><br><span class="line">A          A      ZERO     SPACE</span><br><span class="line">--------- --------- --------- ---------</span><br><span class="line">65         97        48        32</span><br></pre></td></tr></table></figure>


<h2 id="2-CHR-给出整数-返回对应的字符"><a href="#2-CHR-给出整数-返回对应的字符" class="headerlink" title="2.CHR 给出整数,返回对应的字符;"></a>2.CHR 给出整数,返回对应的字符;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL&gt; select chr(54740) zhao,chr(65) chr65 from dual;</span><br><span class="line"></span><br><span class="line">ZH C</span><br><span class="line">-- -</span><br><span class="line">赵 A</span><br></pre></td></tr></table></figure>

<h2 id="3-CONCAT-连接两个字符串"><a href="#3-CONCAT-连接两个字符串" class="headerlink" title="3.CONCAT 连接两个字符串;"></a>3.CONCAT 连接两个字符串;</h2><pre><code>SQL&gt; select concat(&#39;010-&#39;,&#39;88888888&#39;)||&#39;转23&#39;  小张电话 from dual;

小张电话
----------------
010-88888888转23
</code></pre>
<span id="more"></span>

<h2 id="4-INITCAP-返回字符串并将字符串的第一个字母变为大写"><a href="#4-INITCAP-返回字符串并将字符串的第一个字母变为大写" class="headerlink" title="4.INITCAP 返回字符串并将字符串的第一个字母变为大写;"></a>4.INITCAP 返回字符串并将字符串的第一个字母变为大写;</h2><pre><code>SQL&gt; select initcap(&#39;smith&#39;) upp from dual;

UPP
-----
Smith
</code></pre>
<h2 id="5-INSTR-C1-C2-I-J-在一个字符串中搜索指定的字符-返回发现指定的字符的位置"><a href="#5-INSTR-C1-C2-I-J-在一个字符串中搜索指定的字符-返回发现指定的字符的位置" class="headerlink" title="5.INSTR(C1,C2,I,J) 在一个字符串中搜索指定的字符,返回发现指定的字符的位置;"></a>5.INSTR(C1,C2,I,J) 在一个字符串中搜索指定的字符,返回发现指定的字符的位置;</h2><pre><code>C1    被搜索的字符串
C2    希望搜索的字符串
I     搜索的开始位置,默认为1
J     出现的位置,默认为1
SQL&gt; select instr(&#39;oracle traning&#39;,&#39;ra&#39;,1,2) instring from dual;

INSTRING
---------
9
</code></pre>
<h2 id="6-LENGTH-返回字符串的长度"><a href="#6-LENGTH-返回字符串的长度" class="headerlink" title="6.LENGTH 返回字符串的长度;"></a>6.LENGTH 返回字符串的长度;</h2><pre><code>SQL&gt; select name,length(name),addr,length(addr),sal,length(to_char(sal)) from nchar_tst;

NAME   LENGTH(NAME) ADDR             LENGTH(ADDR)       SAL LENGTH(TO_CHAR(SAL))
------ ------------ ---------------- ------------ --------- --------------------
小张            3 北京市海锭区                6        9999.99                    7
</code></pre>
<h2 id="7-LOWER-返回字符串-并将所有的字符小写"><a href="#7-LOWER-返回字符串-并将所有的字符小写" class="headerlink" title="7.LOWER 返回字符串,并将所有的字符小写"></a>7.LOWER 返回字符串,并将所有的字符小写</h2><pre><code>SQL&gt; select lower(&#39;AaBbCcDd&#39;)AaBbCcDd from dual;

AABBCCDD
--------
aabbccdd
</code></pre>
<h2 id="8-UPPER-返回字符串-并将所有的字符大写"><a href="#8-UPPER-返回字符串-并将所有的字符大写" class="headerlink" title="8.UPPER 返回字符串,并将所有的字符大写"></a>8.UPPER 返回字符串,并将所有的字符大写</h2><pre><code>SQL&gt; select upper(&#39;AaBbCcDd&#39;) upper from dual;

UPPER
--------
AABBCCDD
</code></pre>
<h2 id="9-RPAD和LPAD-粘贴字符"><a href="#9-RPAD和LPAD-粘贴字符" class="headerlink" title="9.RPAD和LPAD(粘贴字符)"></a>9.RPAD和LPAD(粘贴字符)</h2><pre><code>RPAD  在列的右边粘贴字符
LPAD  在列的左边粘贴字符
SQL&gt; select lpad(rpad(&#39;gao&#39;,10,&#39;*&#39;),17,&#39;*&#39;)from dual;

LPAD(RPAD(&#39;GAO&#39;,1
-----------------
*******gao*******
不够字符则用*来填满
</code></pre>
<h2 id="10-LTRIM和RTRIM"><a href="#10-LTRIM和RTRIM" class="headerlink" title="10.LTRIM和RTRIM"></a>10.LTRIM和RTRIM</h2><pre><code>LTRIM  删除左边出现的字符串
RTRIM  删除右边出现的字符串
SQL&gt; select ltrim(rtrim(&#39;   gao qian jing   &#39;,&#39; &#39;),&#39; &#39;) from dual;

LTRIM(RTRIM(&#39;
-------------
gao qian jing
</code></pre>
<h2 id="11-SUBSTR-string-start-count"><a href="#11-SUBSTR-string-start-count" class="headerlink" title="11.SUBSTR(string,start,count)"></a>11.SUBSTR(string,start,count)</h2><pre><code>取子字符串,从start开始,取count个
SQL&gt; select substr(&#39;13088888888&#39;,3,8) from dual;

--------
08888888

1 substr(&quot;ABCDEFG&quot;, 0); //返回：ABCDEFG，截取所有字符 
2 substr(&quot;ABCDEFG&quot;, 2); //返回：CDEFG，截取从C开始之后所有字符 
3 substr(&quot;ABCDEFG&quot;, 0, 3); //返回：ABC，截取从A开始3个字符 
4 substr(&quot;ABCDEFG&quot;, 0, 100); //返回：ABCDEFG，100虽然超出预处理的字符串最长度，但不会影响返回结果，系统按预处理字符串最大数量返回。 
5 substr(&quot;ABCDEFG&quot;, -3); //返回：EFG，注意参数-3，为负值时表示从尾部开始算起，字符串排列位置不变。
</code></pre>
<h2 id="12-REPLACE-‘string’-’s1’-’s2’"><a href="#12-REPLACE-‘string’-’s1’-’s2’" class="headerlink" title="12.REPLACE(‘string’,’s1’,’s2’)"></a>12.REPLACE(‘string’,’s1’,’s2’)</h2><pre><code>string   希望被替换的字符或变量
s1       被替换的字符串
s2       要替换的字符串
SQL&gt; select replace(&#39;he love you&#39;,&#39;he&#39;,&#39;i&#39;) from dual;

REPLACE(&#39;HELOVEYOU&#39;,&#39;HE&#39;,&#39;I&#39;)
------------------------------
i love you
</code></pre>
<h2 id="13-SOUNDEX-返回一个与给定的字符串读音相同的字符串"><a href="#13-SOUNDEX-返回一个与给定的字符串读音相同的字符串" class="headerlink" title="13.SOUNDEX 返回一个与给定的字符串读音相同的字符串"></a>13.SOUNDEX 返回一个与给定的字符串读音相同的字符串</h2><pre><code>SQL&gt; create table table1(xm varchar(8));
SQL&gt; insert into table1 values(&#39;weather&#39;);
SQL&gt; insert into table1 values(&#39;wether&#39;);
SQL&gt; insert into table1 values(&#39;gao&#39;);

SQL&gt; select xm from table1 where soundex(xm)=soundex(&#39;weather&#39;);

XM
--------
weather
wether
</code></pre>
<h2 id="14-TRIM-‘s’-from-‘string’"><a href="#14-TRIM-‘s’-from-‘string’" class="headerlink" title="14.TRIM(‘s’ from ‘string’)"></a>14.TRIM(‘s’ from ‘string’)</h2><pre><code>LEADING   剪掉前面的字符
TRAILING  剪掉后面的字符
如果不指定,默认为空格符
</code></pre>
<h2 id="15-ABS-返回指定值的绝对值"><a href="#15-ABS-返回指定值的绝对值" class="headerlink" title="15.ABS 返回指定值的绝对值"></a>15.ABS 返回指定值的绝对值</h2><pre><code>SQL&gt; select abs(100),abs(-100) from dual;

ABS(100) ABS(-100)
--------- ---------
100       100
</code></pre>
<h2 id="16-ACOS-给出反余弦的值"><a href="#16-ACOS-给出反余弦的值" class="headerlink" title="16.ACOS 给出反余弦的值"></a>16.ACOS 给出反余弦的值</h2><pre><code>SQL&gt; select acos(-1) from dual;

ACOS(-1)
---------
3.1415927
</code></pre>
<h2 id="17-ASIN-给出反正弦的值"><a href="#17-ASIN-给出反正弦的值" class="headerlink" title="17.ASIN 给出反正弦的值"></a>17.ASIN 给出反正弦的值</h2><pre><code>SQL&gt; select asin(0.5) from dual;

ASIN(0.5)
---------
.52359878
</code></pre>
<h2 id="18-ATAN-返回一个数字的反正切值"><a href="#18-ATAN-返回一个数字的反正切值" class="headerlink" title="18.ATAN 返回一个数字的反正切值"></a>18.ATAN 返回一个数字的反正切值</h2><pre><code>SQL&gt; select atan(1) from dual;

ATAN(1)
---------
.78539816
</code></pre>
<h2 id="19-CEIL-返回大于或等于给出数字的最小整数"><a href="#19-CEIL-返回大于或等于给出数字的最小整数" class="headerlink" title="19.CEIL 返回大于或等于给出数字的最小整数"></a>19.CEIL 返回大于或等于给出数字的最小整数</h2><pre><code>SQL&gt; select ceil(3.1415927) from dual;

CEIL(3.1415927)
---------------
4
</code></pre>
<h2 id="20-COS-返回一个给定数字的余弦"><a href="#20-COS-返回一个给定数字的余弦" class="headerlink" title="20.COS 返回一个给定数字的余弦"></a>20.COS 返回一个给定数字的余弦</h2><pre><code>SQL&gt; select cos(-3.1415927) from dual;

COS(-3.1415927)
---------------
-1
</code></pre>
<h2 id="21-COSH-返回一个数字反余弦值"><a href="#21-COSH-返回一个数字反余弦值" class="headerlink" title="21.COSH 返回一个数字反余弦值"></a>21.COSH 返回一个数字反余弦值</h2><pre><code>SQL&gt; select cosh(20) from dual;

COSH(20)
---------
242582598
</code></pre>
<h2 id="22-EXP-返回一个数字e的n次方根"><a href="#22-EXP-返回一个数字e的n次方根" class="headerlink" title="22.EXP 返回一个数字e的n次方根"></a>22.EXP 返回一个数字e的n次方根</h2><pre><code>SQL&gt; select exp(2),exp(1) from dual;

EXP(2)    EXP(1)
--------- ---------
7.3890561 2.7182818
</code></pre>
<h2 id="23-FLOOR-对给定的数字取整数"><a href="#23-FLOOR-对给定的数字取整数" class="headerlink" title="23.FLOOR 对给定的数字取整数"></a>23.FLOOR 对给定的数字取整数</h2><pre><code>SQL&gt; select floor(2345.67) from dual;

FLOOR(2345.67)
--------------
2345
</code></pre>
<h2 id="24-LN-返回一个数字的对数值"><a href="#24-LN-返回一个数字的对数值" class="headerlink" title="24.LN 返回一个数字的对数值"></a>24.LN 返回一个数字的对数值</h2><pre><code>SQL&gt; select ln(1),ln(2),ln(2.7182818) from dual;

LN(1)     LN(2) LN(2.7182818)
--------- --------- -------------
0 .69314718     .99999999
</code></pre>
<h2 id="25-LOG-n1-n2-返回一个以n1为底n2的对数"><a href="#25-LOG-n1-n2-返回一个以n1为底n2的对数" class="headerlink" title="25.LOG(n1,n2) 返回一个以n1为底n2的对数"></a>25.LOG(n1,n2) 返回一个以n1为底n2的对数</h2><pre><code>SQL&gt; select log(2,1),log(2,4) from dual;

LOG(2,1)  LOG(2,4)
--------- ---------
0         2
</code></pre>
<h2 id="26-MOD-n1-n2-返回一个n1除以n2的余数"><a href="#26-MOD-n1-n2-返回一个n1除以n2的余数" class="headerlink" title="26.MOD(n1,n2) 返回一个n1除以n2的余数"></a>26.MOD(n1,n2) 返回一个n1除以n2的余数</h2><pre><code>SQL&gt; select mod(10,3),mod(3,3),mod(2,3) from dual;

MOD(10,3)  MOD(3,3)  MOD(2,3)
--------- --------- ---------
1         0         2
</code></pre>
<h2 id="27-POWER-返回n1的n2次方根"><a href="#27-POWER-返回n1的n2次方根" class="headerlink" title="27.POWER 返回n1的n2次方根"></a>27.POWER 返回n1的n2次方根</h2><pre><code>SQL&gt; select power(2,10),power(3,3) from dual;

POWER(2,10) POWER(3,3)
----------- ----------
1024         27
</code></pre>
<h2 id="28-ROUND和TRUNC"><a href="#28-ROUND和TRUNC" class="headerlink" title="28.ROUND和TRUNC"></a>28.ROUND和TRUNC</h2><pre><code>按照指定的精度进行舍入
SQL&gt; select round(55.5),round(-55.4),trunc(55.5),trunc(-55.5) from dual;

ROUND(55.5) ROUND(-55.4) TRUNC(55.5) TRUNC(-55.5)
----------- ------------ ----------- ------------
56          -55          55          -55
</code></pre>
<h2 id="29-SIGN-取数字n的符号-大于0返回1-小于0返回-1-等于0返回0"><a href="#29-SIGN-取数字n的符号-大于0返回1-小于0返回-1-等于0返回0" class="headerlink" title="29.SIGN 取数字n的符号,大于0返回1,小于0返回-1,等于0返回0"></a>29.SIGN 取数字n的符号,大于0返回1,小于0返回-1,等于0返回0</h2><pre><code>SQL&gt; select sign(123),sign(-100),sign(0) from dual;

SIGN(123) SIGN(-100)   SIGN(0)
--------- ---------- ---------
1         -1         0
</code></pre>
<h2 id="30-SIN-返回一个数字的正弦值"><a href="#30-SIN-返回一个数字的正弦值" class="headerlink" title="30.SIN 返回一个数字的正弦值"></a>30.SIN 返回一个数字的正弦值</h2><pre><code>SQL&gt; select sin(1.57079) from dual;

SIN(1.57079)
------------
1
</code></pre>
<h2 id="31-SIGH-返回双曲正弦的值"><a href="#31-SIGH-返回双曲正弦的值" class="headerlink" title="31.SIGH 返回双曲正弦的值"></a>31.SIGH 返回双曲正弦的值</h2><pre><code>SQL&gt; select sin(20),sinh(20) from dual;


SIN(20)  SINH(20)
--------- ---------
.91294525 242582598
</code></pre>
<h2 id="32-SQRT-返回数字n的根"><a href="#32-SQRT-返回数字n的根" class="headerlink" title="32.SQRT 返回数字n的根"></a>32.SQRT 返回数字n的根</h2><pre><code>SQL&gt; select sqrt(64),sqrt(10) from dual;

SQRT(64)  SQRT(10)
--------- ---------
8 3.1622777
</code></pre>
<h2 id="33-TAN-返回数字的正切值"><a href="#33-TAN-返回数字的正切值" class="headerlink" title="33.TAN 返回数字的正切值"></a>33.TAN 返回数字的正切值</h2><pre><code>SQL&gt; select tan(20),tan(10) from dual;

TAN(20)   TAN(10)
--------- ---------
2.2371609 .64836083
</code></pre>
<h2 id="34-TANH"><a href="#34-TANH" class="headerlink" title="34.TANH"></a>34.TANH</h2><pre><code>返回数字n的双曲正切值
SQL&gt; select tanh(20),tan(20) from dual;

TANH(20)   TAN(20)
--------- ---------
1 2.2371609
</code></pre>
<h2 id="35-TRUNC"><a href="#35-TRUNC" class="headerlink" title="35.TRUNC"></a>35.TRUNC</h2><pre><code>按照指定的精度截取一个数
SQL&gt; select trunc(124.1666,-2) trunc1,trunc(124.16666,2) from dual;

TRUNC1 TRUNC(124.16666,2)
--------- ------------------
100             124.16
</code></pre>
<h2 id="36-ADD-MONTHS"><a href="#36-ADD-MONTHS" class="headerlink" title="36.ADD_MONTHS"></a>36.ADD_MONTHS</h2><pre><code>增加或减去月份
SQL&gt; select to_char(add_months(to_date(&#39;199912&#39;,&#39;yyyymm&#39;),2),&#39;yyyymm&#39;) from dual;

TO_CHA
------
200002
SQL&gt; select to_char(add_months(to_date(&#39;199912&#39;,&#39;yyyymm&#39;),-2),&#39;yyyymm&#39;) from dual;

TO_CHA
------
199910
</code></pre>
<h2 id="37-LAST-DAY"><a href="#37-LAST-DAY" class="headerlink" title="37.LAST_DAY"></a>37.LAST_DAY</h2><pre><code>返回日期的最后一天
SQL&gt; select to_char(sysdate,&#39;yyyy.mm.dd&#39;),to_char((sysdate)+1,&#39;yyyy.mm.dd&#39;) from dual;

TO_CHAR(SY TO_CHAR((S
---------- ----------
2004.05.09 2004.05.10
SQL&gt; select last_day(sysdate) from dual;

LAST_DAY(S
----------
31-5月 -04
</code></pre>
<h2 id="38-MONTHS-BETWEEN-date2-date1"><a href="#38-MONTHS-BETWEEN-date2-date1" class="headerlink" title="38.MONTHS_BETWEEN(date2,date1)"></a>38.MONTHS_BETWEEN(date2,date1)</h2><pre><code>给出date2-date1的月份
SQL&gt; select months_between(&#39;19-12月-1999&#39;,&#39;19-3月-1999&#39;) mon_between from dual;

MON_BETWEEN
-----------
9
SQL&gt;selectmonths_between(to_date(&#39;2000.05.20&#39;,&#39;yyyy.mm.dd&#39;),to_date(&#39;2005.05.20&#39;,&#39;yyyy.dd&#39;)) mon_betw from dual;

MON_BETW
---------
-60
</code></pre>
<h2 id="39-NEW-TIME-date-’this’-’that’"><a href="#39-NEW-TIME-date-’this’-’that’" class="headerlink" title="39.NEW_TIME(date,’this’,’that’)"></a>39.NEW_TIME(date,’this’,’that’)</h2><pre><code>给出在this时区=other时区的日期和时间
SQL&gt; select to_char(sysdate,&#39;yyyy.mm.dd hh24:mi:ss&#39;) bj_time,to_char(new_time
2  (sysdate,&#39;PDT&#39;,&#39;GMT&#39;),&#39;yyyy.mm.dd hh24:mi:ss&#39;) los_angles from dual;

BJ_TIME             LOS_ANGLES
------------------- -------------------
2004.05.09 11:05:32 2004.05.09 18:05:32
</code></pre>
<h2 id="40-NEXT-DAY-date-’day’"><a href="#40-NEXT-DAY-date-’day’" class="headerlink" title="40.NEXT_DAY(date,’day’)"></a>40.NEXT_DAY(date,’day’)</h2><pre><code>给出日期date和星期x之后计算下一个星期的日期
SQL&gt; select next_day(&#39;18-5月-2001&#39;,&#39;星期五&#39;) next_day from dual;

NEXT_DAY
----------
25-5月 -01
</code></pre>
<h2 id="41-SYSDATE-用来得到系统的当前日期"><a href="#41-SYSDATE-用来得到系统的当前日期" class="headerlink" title="41.SYSDATE 用来得到系统的当前日期"></a>41.SYSDATE 用来得到系统的当前日期</h2><pre><code>SQL&gt; select to_char(sysdate,&#39;dd-mm-yyyy day&#39;) from dual;

TO_CHAR(SYSDATE,&#39;
-----------------
09-05-2004 星期日
trunc(date,fmt)按照给出的要求将日期截断,如果fmt=&#39;mi&#39;表示保留分,截断秒
SQL&gt; select to_char(trunc(sysdate,&#39;hh&#39;),&#39;yyyy.mm.dd hh24:mi:ss&#39;) hh,
2  to_char(trunc(sysdate,&#39;mi&#39;),&#39;yyyy.mm.dd hh24:mi:ss&#39;) hhmm from dual;

HH                  HHMM
------------------- -------------------
2004.05.09 11:00:00 2004.05.09 11:17:00
</code></pre>
<h2 id="42-CHARTOROWID-将字符数据类型转换为ROWID类型"><a href="#42-CHARTOROWID-将字符数据类型转换为ROWID类型" class="headerlink" title="42.CHARTOROWID 将字符数据类型转换为ROWID类型"></a>42.CHARTOROWID 将字符数据类型转换为ROWID类型</h2><pre><code>SQL&gt; select rowid,rowidtochar(rowid),ename from scott.emp;

ROWID              ROWIDTOCHAR(ROWID) ENAME
------------------ ------------------ ----------
AAAAfKAACAAAAEqAAA AAAAfKAACAAAAEqAAA SMITH
AAAAfKAACAAAAEqAAB AAAAfKAACAAAAEqAAB ALLEN
AAAAfKAACAAAAEqAAC AAAAfKAACAAAAEqAAC WARD
AAAAfKAACAAAAEqAAD AAAAfKAACAAAAEqAAD JONES
</code></pre>
<h2 id="43-CONVERT-c-dset-sset"><a href="#43-CONVERT-c-dset-sset" class="headerlink" title="43.CONVERT(c,dset,sset)"></a>43.CONVERT(c,dset,sset)</h2><pre><code>将源字符串 sset从一个语言字符集转换到另一个目的dset字符集
SQL&gt; select convert(&#39;strutz&#39;,&#39;we8hp&#39;,&#39;f7dec&#39;) &quot;conversion&quot; from dual;

conver
------
strutz
</code></pre>
<h2 id="44-HEXTORAW-将一个十六进制构成的字符串转换为二进制"><a href="#44-HEXTORAW-将一个十六进制构成的字符串转换为二进制" class="headerlink" title="44.HEXTORAW 将一个十六进制构成的字符串转换为二进制"></a>44.HEXTORAW 将一个十六进制构成的字符串转换为二进制</h2><h2 id="45-RAWTOHEXT-将一个二进制构成的字符串转换为十六进制"><a href="#45-RAWTOHEXT-将一个二进制构成的字符串转换为十六进制" class="headerlink" title="45.RAWTOHEXT 将一个二进制构成的字符串转换为十六进制"></a>45.RAWTOHEXT 将一个二进制构成的字符串转换为十六进制</h2><h2 id="46-ROWIDTOCHAR-将ROWID数据类型转换为字符类型"><a href="#46-ROWIDTOCHAR-将ROWID数据类型转换为字符类型" class="headerlink" title="46.ROWIDTOCHAR 将ROWID数据类型转换为字符类型"></a>46.ROWIDTOCHAR 将ROWID数据类型转换为字符类型</h2><h2 id="47-TO-CHAR-date-’format’"><a href="#47-TO-CHAR-date-’format’" class="headerlink" title="47.TO_CHAR(date,’format’)"></a>47.TO_CHAR(date,’format’)</h2><pre><code>SQL&gt; select to_char(sysdate,&#39;yyyy/mm/dd hh24:mi:ss&#39;) from dual;

TO_CHAR(SYSDATE,&#39;YY
-------------------
2004/05/09 21:14:41
</code></pre>
<h2 id="48-TO-DATE-string-’format’-将字符串转化为ORACLE中的一个日期"><a href="#48-TO-DATE-string-’format’-将字符串转化为ORACLE中的一个日期" class="headerlink" title="48.TO_DATE(string,’format’) 将字符串转化为ORACLE中的一个日期"></a>48.TO_DATE(string,’format’) 将字符串转化为ORACLE中的一个日期</h2><h2 id="49-TO-MULTI-BYTE-将字符串中的单字节字符转化为多字节字符"><a href="#49-TO-MULTI-BYTE-将字符串中的单字节字符转化为多字节字符" class="headerlink" title="49.TO_MULTI_BYTE  将字符串中的单字节字符转化为多字节字符"></a>49.TO_MULTI_BYTE  将字符串中的单字节字符转化为多字节字符</h2><pre><code>SQL&gt;  select to_multi_byte(&#39;高&#39;) from dual;

TO
--
高
</code></pre>
<h2 id="50-TO-NUMBER"><a href="#50-TO-NUMBER" class="headerlink" title="50.TO_NUMBER"></a>50.TO_NUMBER</h2><pre><code>将给出的字符转换为数字
SQL&gt; select to_number(&#39;1999&#39;) year from dual;

YEAR
---------
1999
</code></pre>
<h2 id="51-BFILENAME-dir-file-指定一个外部二进制文件"><a href="#51-BFILENAME-dir-file-指定一个外部二进制文件" class="headerlink" title="51.BFILENAME(dir,file)指定一个外部二进制文件"></a>51.BFILENAME(dir,file)指定一个外部二进制文件</h2><pre><code>SQL&gt;insert into file_tb1 values(bfilename(&#39;lob_dir1&#39;,&#39;image1.gif&#39;));
</code></pre>
<h2 id="52-CONVERT-‘x’-’desc’-’source’-将x字段或变量的源source转换为desc"><a href="#52-CONVERT-‘x’-’desc’-’source’-将x字段或变量的源source转换为desc" class="headerlink" title="52.CONVERT(‘x’,’desc’,’source’) 将x字段或变量的源source转换为desc"></a>52.CONVERT(‘x’,’desc’,’source’) 将x字段或变量的源source转换为desc</h2><pre><code>SQL&gt; select sid,serial#,username,decode(command,
2  0,&#39;none&#39;,
3  2,&#39;insert&#39;,
4  3,
5  &#39;select&#39;,
6  6,&#39;update&#39;,
7  7,&#39;delete&#39;,
8  8,&#39;drop&#39;,
9  &#39;other&#39;) cmd  from v$session where type!=&#39;background&#39;;

SID   SERIAL# USERNAME                       CMD
--------- --------- ------------------------------ ------
1         1                                none
2         1                                none
3         1                                none
4         1                                none
5         1                                none
6         1                                none
7      1275                                none
8      1275                                none
9        20 GAO                            select
10        40 GAO                            none
</code></pre>
<h2 id="53-DUMP-s-fmt-start-length"><a href="#53-DUMP-s-fmt-start-length" class="headerlink" title="53.DUMP(s,fmt,start,length)"></a>53.DUMP(s,fmt,start,length)</h2><pre><code>DUMP函数以fmt指定的内部数字格式返回一个VARCHAR2类型的值
SQL&gt; col global_name for a30
SQL&gt; col dump_string for a50
SQL&gt; set lin 200
SQL&gt; select global_name,dump(global_name,1017,8,5) dump_string from global_name;

GLOBAL_NAME                    DUMP_STRING
------------------------------ --------------------------------------------------
ORACLE.WORLD                   Typ=1 Len=12 CharacterSet=ZHS16GBK: W,O,R,L,D
</code></pre>
<h2 id="54-EMPTY-BLOB-和EMPTY-CLOB"><a href="#54-EMPTY-BLOB-和EMPTY-CLOB" class="headerlink" title="54.EMPTY_BLOB()和EMPTY_CLOB()"></a>54.EMPTY_BLOB()和EMPTY_CLOB()</h2><pre><code>这两个函数都是用来对大数据类型字段进行初始化操作的函数
</code></pre>
<h2 id="55-GREATEST"><a href="#55-GREATEST" class="headerlink" title="55.GREATEST"></a>55.GREATEST</h2><pre><code>返回一组表达式中的最大值,即比较字符的编码大小.
SQL&gt; select greatest(&#39;AA&#39;,&#39;AB&#39;,&#39;AC&#39;) from dual;

GR
--
AC
SQL&gt; select greatest(&#39;啊&#39;,&#39;安&#39;,&#39;天&#39;) from dual;

GR
--
天
</code></pre>
<h2 id="56-LEAST"><a href="#56-LEAST" class="headerlink" title="56.LEAST"></a>56.LEAST</h2><pre><code>返回一组表达式中的最小值
SQL&gt; select least(&#39;啊&#39;,&#39;安&#39;,&#39;天&#39;) from dual;

LE
--
啊
</code></pre>
<h2 id="57-UID"><a href="#57-UID" class="headerlink" title="57.UID"></a>57.UID</h2><pre><code>返回标识当前用户的唯一整数
SQL&gt; show user
USER 为&quot;GAO&quot;
SQL&gt; select username,user_id from dba_users where user_id=uid;

USERNAME                         USER_ID
------------------------------ ---------
GAO                                   25
</code></pre>
<h2 id="58-USER"><a href="#58-USER" class="headerlink" title="58.USER"></a>58.USER</h2><pre><code>返回当前用户的名字
SQL&gt; select user from  dual;

USER
------------------------------
GAO
</code></pre>
<h2 id="59-USEREVN"><a href="#59-USEREVN" class="headerlink" title="59.USEREVN"></a>59.USEREVN</h2><pre><code>返回当前用户环境的信息,opt可以是:
ENTRYID,SESSIONID,TERMINAL,ISDBA,LABLE,LANGUAGE,CLIENT_INFO,LANG,VSIZE
ISDBA  查看当前用户是否是DBA如果是则返回true
SQL&gt; select userenv(&#39;isdba&#39;) from dual;

USEREN
------
FALSE
SQL&gt; select userenv(&#39;isdba&#39;) from dual;

USEREN
------
TRUE
SESSION
返回会话标志
SQL&gt; select userenv(&#39;sessionid&#39;) from dual;

USERENV(&#39;SESSIONID&#39;)
--------------------
152
ENTRYID
返回会话人口标志
SQL&gt; select userenv(&#39;entryid&#39;) from dual;

USERENV(&#39;ENTRYID&#39;)
------------------
0
INSTANCE
返回当前INSTANCE的标志
SQL&gt; select userenv(&#39;instance&#39;) from dual;

USERENV(&#39;INSTANCE&#39;)
-------------------
1
LANGUAGE
返回当前环境变量
SQL&gt; select userenv(&#39;language&#39;) from dual;

USERENV(&#39;LANGUAGE&#39;)
----------------------------------------------------
SIMPLIFIED CHINESE_CHINA.ZHS16GBK
LANG
返回当前环境的语言的缩写
SQL&gt; select userenv(&#39;lang&#39;) from dual;

USERENV(&#39;LANG&#39;)
----------------------------------------------------
ZHS
TERMINAL
返回用户的终端或机器的标志
SQL&gt; select userenv(&#39;terminal&#39;) from dual;

USERENV(&#39;TERMINA
----------------
GAO
VSIZE(X)
返回X的大小(字节)数
SQL&gt; select vsize(user),user from dual;

VSIZE(USER) USER
----------- ------------------------------
6 SYSTEM
</code></pre>
<h2 id="60-AVG-DISTINCT-ALL"><a href="#60-AVG-DISTINCT-ALL" class="headerlink" title="60.AVG(DISTINCT|ALL)"></a>60.AVG(DISTINCT|ALL)</h2><pre><code>all表示对所有的值求平均值,distinct只对不同的值求平均值
SQLWKS&gt; create table table3(xm varchar(8),sal number(7,2));
语句已处理。
SQLWKS&gt;  insert into table3 values(&#39;gao&#39;,1111.11);
SQLWKS&gt;  insert into table3 values(&#39;gao&#39;,1111.11);
SQLWKS&gt;  insert into table3 values(&#39;zhu&#39;,5555.55);
SQLWKS&gt; commit;

SQL&gt; select avg(distinct sal) from gao.table3;

AVG(DISTINCTSAL)
----------------
3333.33

SQL&gt; select avg(all sal) from gao.table3;

AVG(ALLSAL)
-----------
2592.59
</code></pre>
<h2 id="61-MAX-DISTINCT-ALL"><a href="#61-MAX-DISTINCT-ALL" class="headerlink" title="61.MAX(DISTINCT|ALL)"></a>61.MAX(DISTINCT|ALL)</h2><pre><code>求最大值,ALL表示对所有的值求最大值,DISTINCT表示对不同的值求最大值,相同的只取一次
SQL&gt; select max(distinct sal) from scott.emp;


MAX(DISTINCTSAL)
----------------
5000
</code></pre>
<h2 id="62-MIN-DISTINCT-ALL"><a href="#62-MIN-DISTINCT-ALL" class="headerlink" title="62.MIN(DISTINCT|ALL)"></a>62.MIN(DISTINCT|ALL)</h2><pre><code>求最小值,ALL表示对所有的值求最小值,DISTINCT表示对不同的值求最小值,相同的只取一次
SQL&gt; select min(all sal) from gao.table3;

MIN(ALLSAL)
-----------
1111.11
</code></pre>
<h2 id="63-STDDEV-distinct-all"><a href="#63-STDDEV-distinct-all" class="headerlink" title="63.STDDEV(distinct|all)"></a>63.STDDEV(distinct|all)</h2><pre><code>求标准差,ALL表示对所有的值求标准差,DISTINCT表示只对不同的值求标准差
SQL&gt; select stddev(sal) from scott.emp;

STDDEV(SAL)
-----------
1182.5032

SQL&gt; select stddev(distinct sal) from scott.emp;

STDDEV(DISTINCTSAL)
-------------------
1229.951
</code></pre>
<h2 id="64-VARIANCE-DISTINCT-ALL-求协方差"><a href="#64-VARIANCE-DISTINCT-ALL-求协方差" class="headerlink" title="64.VARIANCE(DISTINCT|ALL) 求协方差"></a>64.VARIANCE(DISTINCT|ALL) 求协方差</h2><pre><code>SQL&gt; select variance(sal) from scott.emp;

VARIANCE(SAL)
-------------
1398313.9
</code></pre>
<h2 id="65-GROUP-BY-主要用来对一组数进行统计"><a href="#65-GROUP-BY-主要用来对一组数进行统计" class="headerlink" title="65.GROUP BY 主要用来对一组数进行统计"></a>65.GROUP BY 主要用来对一组数进行统计</h2><pre><code>SQL&gt; select deptno,count(*),sum(sal) from scott.emp group by deptno;

DEPTNO  COUNT(*)  SUM(SAL)
--------- --------- ---------
10         3      8750
20         5     10875
30         6      9400
</code></pre>
<h2 id="66-HAVING-对分组统计再加限制条件"><a href="#66-HAVING-对分组统计再加限制条件" class="headerlink" title="66.HAVING  对分组统计再加限制条件"></a>66.HAVING  对分组统计再加限制条件</h2><pre><code>SQL&gt; select deptno,count(*),sum(sal) from scott.emp group by deptno having nt(*)&gt;=5;

DEPTNO  COUNT(*)  SUM(SAL)
--------- --------- ---------
20         5     10875
30         6      9400
SQL&gt; select deptno,count(*),sum(sal) from scott.emp having count(*)&gt;=5 group by tno ;

DEPTNO  COUNT(*)  SUM(SAL)
--------- --------- ---------
20         5     10875
30         6      9400
</code></pre>
<h2 id="67-ORDER-BY-用于对查询到的结果进行排序输出"><a href="#67-ORDER-BY-用于对查询到的结果进行排序输出" class="headerlink" title="67.ORDER BY  用于对查询到的结果进行排序输出"></a>67.ORDER BY  用于对查询到的结果进行排序输出</h2><pre><code>SQL&gt; select deptno,ename,sal from scott.emp order by deptno,sal desc;

DEPTNO ENAME            SAL
--------- ---------- ---------
10 KING            5000
10 CLARK           2450
10 MILLER          1300
20 SCOTT           3000
20 FORD            3000
20 JONES           2975
20 ADAMS           1100
20 SMITH            800
30 BLAKE           2850
30 ALLEN           1600
30 TURNER          1500
30 WARD            1250
30 MARTIN          1250
30 JAMES            950
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>这么做会使 Oracle 索引失效</title>
    <url>/2019/07/18/database/oracle/oracle-index-invalidation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1、 没有 WHERE 子句<br>2、 使用 IS NULL 和 IS NOT NULL , 以下语句 comm 列的索引会失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NULL</span>; </span><br></pre></td></tr></table></figure>
<p>3、 WHERE 子句中使用函数<br>如果没有使用基于函数的索引，那么 where 子句中对存在索引的列使用函数时，会使优化器忽略掉这些索引。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> staff <span class="keyword">where</span> trunc(birthdate) <span class="operator">=</span> <span class="string">&#x27;01-MAY-82&#x27;</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>但是把函数应用在条件上，索引是可以生效的，把上面的语句改成下面的语句，就可以通过索引进行查找。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> staff <span class="keyword">where</span> birthdate <span class="operator">&lt;</span> (to_date(<span class="string">&#x27;01-MAY-82&#x27;</span>) <span class="operator">+</span> <span class="number">0</span>、<span class="number">9999</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：对于 MIN, MAX 函数，Oracle 仍然使用索引。</p>
</blockquote>
<p>4、 使用 LIKE ‘%T’ 进行模糊查询<br>5、 WHERE 子句中使用不等于操作</p>
<blockquote>
<p>不等于操作包括：&lt;&gt;, !=, NOT colum &gt;= ?, NOT colum &lt;= ?</p>
</blockquote>
<p>对于这个限制条件可以通过 OR 替代，例如：<code>colum &lt;&gt; 0</code> ===&gt; <code>colum&gt;0 OR colum&lt;0</code></p>
<p>6、 等于和范围索引不会被合并使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_id, emp_m, salary_q ... <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;manager&#x27;</span> <span class="keyword">AND</span> deptno<span class="operator">&gt;</span><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><code>job</code> 和 <code>deptno</code> 都是非唯一索引，这种条件下 oracle 不会合并索引，它只会使用第一个索引。<br>7、 比较不匹配数据类型<br>dept_id 是一个 varchar2 型的字段，在这个字段上有索引，但是下面的语句会执行全表扫描。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">900198</span>;</span><br></pre></td></tr></table></figure>
<p>这是因为 oracle 会自动把 where 子句转换成 to_number(dept_id)=900198，相当于使用函数，这样就限制了索引的使用。正确写法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from dept where dept_id = &#x27;900198&#x27;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTIxNDQ4MS9hcnRpY2xlL2RldGFpbHMvODQ5NjIyNjE=">https://blog.csdn.net/weixin_39214481/article/details/84962261<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>转载</category>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>索引</tag>
      </tags>
  </entry>
</search>
